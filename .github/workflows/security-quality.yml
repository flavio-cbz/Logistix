name: Security & Quality Pipeline

# LogistiX Security & Quality Pipeline
# ===================================
# Pipeline CI/CD complet pour maintenir la s√©curit√© et qualit√© du code
# - Validation automatique des endpoints s√©curis√©s
# - Tests de validation Zod 
# - Analyse de s√©curit√© des API
# - Quality gates pour emp√™cher les r√©gressions

on:
  push:
    branches: [ main, develop, cleanup-files ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Analyse quotidienne √† 02:00 UTC
    - cron: '0 2 * * *'

jobs:
  # ANALYSE DE S√âCURIT√â DES ENDPOINTS
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      security-score: ${{ steps.analyze.outputs.security-score }}
      endpoints-secured: ${{ steps.analyze.outputs.endpoints-secured }}
      total-endpoints: ${{ steps.analyze.outputs.total-endpoints }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Security Analysis
        id: analyze
        run: |
          echo "üîç Analyse de s√©curit√© des endpoints..."
          
          # Ex√©cuter notre script d'analyse personnalis√©
          node scripts/analyze-api-security.js > security-report.txt
          
          # Extraire les m√©triques
          SECURED=$(grep -oP "Endpoints s√©cur√©s: \K\d+" security-report.txt)
          TOTAL=$(grep -oP "Total endpoints: \K\d+" security-report.txt)
          PERCENTAGE=$(grep -oP "Pourcentage s√©curis√©: \K[\d.]+" security-report.txt)
          
          echo "endpoints-secured=$SECURED" >> $GITHUB_OUTPUT
          echo "total-endpoints=$TOTAL" >> $GITHUB_OUTPUT
          echo "security-score=$PERCENTAGE" >> $GITHUB_OUTPUT
          
          # Affichage des r√©sultats
          echo "üìä Endpoints s√©curis√©s: $SECURED/$TOTAL ($PERCENTAGE%)"
          
          # Quality gate: minimum 35% d'endpoints s√©curis√©s
          if (( $(echo "$PERCENTAGE < 35" | bc -l) )); then
            echo "‚ùå √âCHEC: Moins de 35% d'endpoints s√©curis√©s ($PERCENTAGE%)"
            exit 1
          fi
          
          echo "‚úÖ SUCC√àS: Seuil de s√©curit√© atteint ($PERCENTAGE% >= 35%)"
          
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: security-report.txt
          retention-days: 30

  # TESTS DE VALIDATION ZOD
  validation-tests:
    name: Zod Validation Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Validation Tests
        run: |
          echo "üß™ Tests de validation des sch√©mas Zod..."
          
          # Compiler TypeScript et ex√©cuter les tests
          npm run build > /dev/null 2>&1 || true
          npx tsx scripts/test-validation-schemas.ts
          
      - name: Validation Performance Test
        run: |
          echo "‚ö° Test de performance des validations..."
          
          # Test de performance - doit √™tre < 1ms par validation
          npx tsx -e "
          import { z } from 'zod';
          import { loginSchema } from './lib/schemas/index.js';
          
          const testData = { email: 'test@example.com', password: 'Test123!' };
          const iterations = 1000;
          
          const start = Date.now();
          for (let i = 0; i < iterations; i++) {
            loginSchema.parse(testData);
          }
          const elapsed = Date.now() - start;
          const avgTime = elapsed / iterations;
          
          console.log(\`‚ö° Performance: \${avgTime.toFixed(3)}ms par validation\`);
          
          if (avgTime > 1) {
            console.log('‚ùå √âCHEC: Validation trop lente (> 1ms)');
            process.exit(1);
          }
          
          console.log('‚úÖ SUCC√àS: Performance acceptable (< 1ms)');
          " 2>/dev/null || echo "üìù Note: Tests de performance optionnels"

  # BUILD & LINT
  build-and-lint:
    name: Build & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript Check
        run: |
          echo "üîß V√©rification TypeScript..."
          npm run type-check || npm run build
          
      - name: ESLint Check
        run: |
          echo "üìè Analyse ESLint..."
          npm run lint
          
      - name: Build Check
        run: |
          echo "üèóÔ∏è Test de build..."
          npm run build

 # QUALITY GATES & REPORTING
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security-analysis, validation-tests, build-and-lint]
    if: always()
    
    steps:
      - name: Evaluate Quality Gates
        run: |
          echo "üìä RAPPORT DE QUALIT√â - LogistiX CRM"
          echo "===================================="
          
          # R√©cup√©rer les m√©triques de s√©curit√©
          SECURITY_SCORE="${{ needs.security-analysis.outputs.security-score }}"
          ENDPOINTS_SECURED="${{ needs.security-analysis.outputs.endpoints-secured }}"
          TOTAL_ENDPOINTS="${{ needs.security-analysis.outputs.total-endpoints }}"
          
          echo "üîí S√©curit√© des Endpoints:"
          echo "   - Endpoints s√©curis√©s: $ENDPOINTS_SECURED/$TOTAL_ENDPOINTS"
          echo "   - Score de s√©curit√©: $SECURITY_SCORE%"
          
          # √âvaluation des quality gates
          echo ""
          echo "üéØ Quality Gates:"
          
          # Gate 1: S√©curit√© minimum
          if (( $(echo "$SECURITY_SCORE >= 35" | bc -l) )); then
            echo "   ‚úÖ S√©curit√©: $SECURITY_SCORE% >= 35% (PASS)"
          else
            echo "   ‚ùå S√©curit√©: $SECURITY_SCORE% < 35% (FAIL)"
            QUALITY_FAIL=1
          fi
          
          # Gate 2: Build r√©ussi
          if [ "${{ needs.build-and-lint.result }}" == "success" ]; then
            echo "   ‚úÖ Build & Lint: SUCCESS (PASS)"
          else
            echo "   ‚ùå Build & Lint: FAILED"
            QUALITY_FAIL=1
          fi
          
          # Gate 3: Tests de validation
          if [ "${{ needs.validation-tests.result }}" == "success" ]; then
            echo "   ‚úÖ Tests Validation: SUCCESS (PASS)"
          else
            echo "   ‚ö†Ô∏è Tests Validation: FAILED (WARNING)"
          fi
          
          echo ""
          
          # R√©sultat final
          if [ "${QUALITY_FAIL:-0}" == "1" ]; then
            echo "‚ùå QUALITY GATES: √âCHEC - Certains crit√®res ne sont pas satisfaits"
            exit 1
          else
            echo "‚úÖ QUALITY GATES: SUCC√àS - Tous les crit√®res essentiels sont satisfaits"
          fi
          
      - name: Comment PR (if PR)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const securityScore = "${{ needs.security-analysis.outputs.security-score }}";
            const endpointsSecured = "${{ needs.security-analysis.outputs.endpoints-secured }}";
            const totalEndpoints = "${{ needs.security-analysis.outputs.total-endpoints }}";
            
            // D√©terminer les r√©sultats bas√©s sur les r√©sultats des jobs
            const buildResult = '${{ needs.build-and-lint.result }}' === 'success' ? '‚úÖ PASS' : '‚ùå FAIL';
            const validationResult = '${{ needs.validation-tests.result }}' === 'success' ? '‚úÖ PASS' : '‚ö†Ô∏è WARNING';
            
            const comment = `
            ## üõ°Ô∏è Rapport de S√©curit√© & Qualit√©
            
            ### üìä M√©triques de S√©curit√©
            - **Endpoints s√©curis√©s:** ${endpointsSecured}/${totalEndpoints} (${securityScore}%)
            - **Seuil minimum:** 35% ‚úÖ
            
            ### üéØ Quality Gates
            - **S√©curit√©:** ${securityScore >= 35 ? '‚úÖ PASS' : '‚ùå FAIL'}
            - **Build & Lint:** ${buildResult}
            - **Tests Validation:** ${validationResult}
            
            ### üìù Actions Recommand√©es
            ${securityScore < 50 ? '- ‚ö†Ô∏è Consid√©rer la s√©curisation d\'endpoints suppl√©mentaires' : ''}
            ${securityScore >= 80 ? '- üéâ Excellente couverture de s√©curit√© !' : ''}
            
            ---
            *Rapport g√©n√©r√© automatiquement par le pipeline de s√©curit√© LogistiX*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ALERTES S√âCURIT√â (scheduled uniquement)
  security-alerts:
    name: Security Alerts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [security-analysis]
    
    steps:
      - name: Security Monitoring
        run: |
          SECURITY_SCORE="${{ needs.security-analysis.outputs.security-score }}"
          
          echo "üö® MONITORING S√âCURIT√â QUOTIDIEN"
          echo "Score de s√©curit√© actuel: $SECURITY_SCORE%"
          
          # Alerte si la s√©curit√© chute
          if (( $(echo "$SECURITY_SCORE < 30" | bc -l) )); then
            echo "üö® ALERTE CRITIQUE: S√©curit√© en dessous de 30%"
            # Ici on pourrait envoyer une notification Slack/email
          elif (( $(echo "$SECURITY_SCORE < 40" | bc -l) )); then
            echo "‚ö†Ô∏è ALERTE: S√©curit√© en dessous de 40%"
          else
            echo "‚úÖ S√©curit√© dans les normes"
          fi