name: PR Security Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  pr-security-check:
    name: PR Security Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Analyze Changed Files
        id: analyze-changes
        run: |
          echo "üîç Analyse des fichiers modifi√©s..."
          
          # Obtenir la liste des fichiers modifi√©s
          git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD > changed-files.txt
          
          # V√©rifier si des endpoints API ont √©t√© modifi√©s
          API_CHANGES=$(grep -E "app/api/.*route\.(ts|js)$" changed-files.txt || echo "")
          
          if [ -n "$API_CHANGES" ]; then
            echo "api-changes=true" >> $GITHUB_OUTPUT
            echo "üìù Endpoints API modifi√©s d√©tect√©s:"
            echo "$API_CHANGES"
          else
            echo "api-changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Aucun endpoint API modifi√©"
          fi
          
      - name: Validate API Security (if API changes)
        if: steps.analyze-changes.outputs.api-changes == 'true'
        run: |
          echo "üîí Validation de la s√©curit√© des endpoints modifi√©s..."
          
          # Analyser la s√©curit√© actuelle
          node scripts/analyze-api-security.js > current-security.txt
          
          # V√©rifier que les nouveaux/modifi√©s endpoints sont s√©curis√©s
          CURRENT_SCORE=$(grep -oP "Pourcentage s√©curis√©: \K[\d.]+" current-security.txt)
          
          echo "üìä Score de s√©curit√© actuel: $CURRENT_SCORE%"
          
          # R√®gle: ne pas r√©gresser en dessous de 35%
          if (( $(echo "$CURRENT_SCORE < 35" | bc -l) )); then
            echo "‚ùå √âCHEC: Le PR fait r√©gresser la s√©curit√© en dessous de 35%"
            echo "üí° Veuillez s√©curiser les nouveaux endpoints avec validation Zod"
            exit 1
          fi
          
          echo "‚úÖ S√©curit√© maintenue ou am√©lior√©e"
          
      - name: Test Zod Schemas (if API changes)
        if: steps.analyze-changes.outputs.api-changes == 'true'
        run: |
          echo "üß™ Test des sch√©mas de validation..."
          
          # V√©rifier que les sch√©mas sont fonctionnels
          npx tsx scripts/test-validation-schemas.ts || {
            echo "‚ö†Ô∏è Certains tests de validation ont √©chou√©"
            echo "üí° Veuillez v√©rifier la compatibilit√© des sch√©mas Zod"
            # Ne pas faire √©chouer le build pour cela
          }
          
      - name: Security Summary Comment
        if: steps.analyze-changes.outputs.api-changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Lire le rapport de s√©curit√©
            let securityReport = '';
            try {
              securityReport = fs.readFileSync('current-security.txt', 'utf8');
            } catch (error) {
              securityReport = 'Rapport non disponible';
            }
            
            // Extraire les m√©triques
            const securedMatch = securityReport.match(/Endpoints s√©curis√©s: (\d+)/);
            const totalMatch = securityReport.match(/Total endpoints: (\d+)/);
            const percentageMatch = securityReport.match(/Pourcentage s√©curis√©: ([\d.]+)%/);
            
            const secured = securedMatch ? securedMatch[1] : 'N/A';
            const total = totalMatch ? totalMatch[1] : 'N/A';
            const percentage = percentageMatch ? percentageMatch[1] : 'N/A';
            
            const comment = `
            ## üîê Analyse de S√©curit√© du PR
            
            ### üìä √âtat Actuel de la S√©curisation
            - **Endpoints s√©curis√©s:** ${secured}/${total}
            - **Pourcentage:** ${percentage}%
            - **Seuil minimum:** 35% ${percentage >= 35 ? '‚úÖ' : '‚ùå'}
            
            ### üîç Fichiers API Modifi√©s
            Ce PR modifie des endpoints API. La s√©curit√© a √©t√© automatiquement v√©rifi√©e.
            
            ### üìù Checklist de S√©curit√©
            ${percentage >= 35 ? '- ‚úÖ Seuil de s√©curit√© respect√©' : '- ‚ùå Seuil de s√©curit√© non respect√©'}
            - ${percentage > 50 ? '‚úÖ' : '‚ö†Ô∏è'} Couverture de s√©curisation ${percentage > 50 ? 'satisfaisante' : '√† am√©liorer'}
            
            ### üí° Recommandations
            ${percentage < 40 ? '- ‚ö†Ô∏è Consid√©rer l\'ajout de validation Zod aux nouveaux endpoints\n- üìö Consulter \`lib/schemas/index.ts\` pour les sch√©mas existants\n- üîß Utiliser \`lib/middleware/validation.ts\` pour l\'int√©gration' : '- üéâ Bonne pratique de s√©curisation maintenue !'}
            
            ---
            *Analyse automatique par le syst√®me de s√©curit√© LogistiX*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: PR Security Status
        run: |
          echo "‚úÖ VALIDATION PR TERMIN√âE"
          echo "üîê Les crit√®res de s√©curit√© sont respect√©s"
          echo "üí° Le PR peut √™tre merg√© du point de vue s√©curit√©"