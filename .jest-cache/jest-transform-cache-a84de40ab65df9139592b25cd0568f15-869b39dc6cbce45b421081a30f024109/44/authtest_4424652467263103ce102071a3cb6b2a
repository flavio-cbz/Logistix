aea41ba230a70a13f38fdeb7fb19fea5
"use strict";
/**
 * Authentication API Integration Tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const server_1 = require("next/server");
// Mock the database and services
vitest_1.vi.mock('@/lib/services/database/db', () => ({
    db: {
        prepare: vitest_1.vi.fn(() => ({
            get: vitest_1.vi.fn(),
            all: vitest_1.vi.fn(),
            run: vitest_1.vi.fn()
        }))
    }
}));
vitest_1.vi.mock('bcrypt', () => ({
    hash: vitest_1.vi.fn(() => Promise.resolve('hashed-password')),
    compare: vitest_1.vi.fn(() => Promise.resolve(true))
}));
vitest_1.vi.mock('jsonwebtoken', () => ({
    sign: vitest_1.vi.fn(() => 'mock-jwt-token'),
    verify: vitest_1.vi.fn(() => ({ userId: 'user-123', email: 'test@example.com' }))
}));
// Import API handlers after mocks
const route_1 = require("@/app/api/v1/auth/login/route");
const route_2 = require("@/app/api/v1/auth/signup/route");
const route_3 = require("@/app/api/v1/auth/me/route");
const route_4 = require("@/app/api/v1/auth/logout/route");
(0, vitest_1.describe)('Authentication API Integration Tests', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.describe)('POST /api/v1/auth/login', () => {
        (0, vitest_1.it)('should login user with valid credentials', async () => {
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                password: 'hashed-password',
                name: 'Test User'
            };
            // Mock database response
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(mockUser)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.user).toEqual({
                id: mockUser.id,
                email: mockUser.email,
                name: mockUser.name
            });
            (0, vitest_1.expect)(data.data.token).toBe('mock-jwt-token');
        });
        (0, vitest_1.it)('should reject login with invalid email', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(null)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'nonexistent@example.com',
                    password: 'password123'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_CREDENTIALS');
        });
        (0, vitest_1.it)('should reject login with invalid password', async () => {
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                password: 'hashed-password',
                name: 'Test User'
            };
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(mockUser)
            });
            // Mock bcrypt to return false for password comparison
            const bcrypt = await Promise.resolve().then(() => __importStar(require('bcrypt')));
            bcrypt.compare.mockResolvedValue(false);
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'wrongpassword'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_CREDENTIALS');
        });
        (0, vitest_1.it)('should validate request body', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'invalid-email',
                    password: ''
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle database errors', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockImplementation(() => {
                    throw new Error('Database connection failed');
                })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(500);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INTERNAL_ERROR');
        });
    });
    (0, vitest_1.describe)('POST /api/v1/auth/signup', () => {
        (0, vitest_1.it)('should create new user with valid data', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(null), // User doesn't exist
                run: vitest_1.vi.fn().mockReturnValue({ lastInsertRowid: 1 })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'newuser@example.com',
                    password: 'password123',
                    name: 'New User'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(201);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.user.email).toBe('newuser@example.com');
            (0, vitest_1.expect)(data.data.user.name).toBe('New User');
            (0, vitest_1.expect)(data.data.token).toBe('mock-jwt-token');
        });
        (0, vitest_1.it)('should reject signup with existing email', async () => {
            const existingUser = {
                id: 'user-123',
                email: 'existing@example.com',
                name: 'Existing User'
            };
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(existingUser)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'existing@example.com',
                    password: 'password123',
                    name: 'New User'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(409);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('USER_EXISTS');
        });
        (0, vitest_1.it)('should validate signup data', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'invalid-email',
                    password: '123', // Too short
                    name: ''
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
            (0, vitest_1.expect)(data.error.details).toBeDefined();
        });
    });
    (0, vitest_1.describe)('GET /api/v1/auth/me', () => {
        (0, vitest_1.it)('should return user data with valid token', async () => {
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                name: 'Test User'
            };
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(mockUser)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/me', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.user).toEqual(mockUser);
        });
        (0, vitest_1.it)('should reject request without token', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/me', {
                method: 'GET'
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('UNAUTHORIZED');
        });
        (0, vitest_1.it)('should reject request with invalid token', async () => {
            const jwt = await Promise.resolve().then(() => __importStar(require('jsonwebtoken')));
            jwt.verify.mockImplementation(() => {
                throw new Error('Invalid token');
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/me', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer invalid-token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_TOKEN');
        });
        (0, vitest_1.it)('should handle user not found', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(null)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/me', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(404);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('USER_NOT_FOUND');
        });
    });
    (0, vitest_1.describe)('POST /api/v1/auth/logout', () => {
        (0, vitest_1.it)('should logout user successfully', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/logout', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_4.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.message).toBe('Logged out successfully');
        });
        (0, vitest_1.it)('should handle logout without token', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/logout', {
                method: 'POST'
            });
            const response = await (0, route_4.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.message).toBe('Logged out successfully');
        });
    });
    (0, vitest_1.describe)('Authentication Flow Integration', () => {
        (0, vitest_1.it)('should complete full authentication flow', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            // Step 1: Signup
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(null), // User doesn't exist
                run: vitest_1.vi.fn().mockReturnValue({ lastInsertRowid: 1 })
            });
            const signupRequest = new server_1.NextRequest('http://localhost:3000/api/v1/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'flowtest@example.com',
                    password: 'password123',
                    name: 'Flow Test User'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const signupResponse = await (0, route_2.POST)(signupRequest);
            const signupData = await signupResponse.json();
            (0, vitest_1.expect)(signupResponse.status).toBe(201);
            (0, vitest_1.expect)(signupData.success).toBe(true);
            // Step 2: Get user info
            const mockUser = {
                id: 'user-123',
                email: 'flowtest@example.com',
                name: 'Flow Test User'
            };
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(mockUser)
            });
            const meRequest = new server_1.NextRequest('http://localhost:3000/api/v1/auth/me', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${signupData.data.token}`
                }
            });
            const meResponse = await (0, route_3.GET)(meRequest);
            const meData = await meResponse.json();
            (0, vitest_1.expect)(meResponse.status).toBe(200);
            (0, vitest_1.expect)(meData.success).toBe(true);
            (0, vitest_1.expect)(meData.data.user.email).toBe('flowtest@example.com');
            // Step 3: Logout
            const logoutRequest = new server_1.NextRequest('http://localhost:3000/api/v1/auth/logout', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${signupData.data.token}`
                }
            });
            const logoutResponse = await (0, route_4.POST)(logoutRequest);
            const logoutData = await logoutResponse.json();
            (0, vitest_1.expect)(logoutResponse.status).toBe(200);
            (0, vitest_1.expect)(logoutData.success).toBe(true);
        });
    });
    (0, vitest_1.describe)('Error Handling', () => {
        (0, vitest_1.it)('should handle malformed JSON', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: 'invalid json',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_JSON');
        });
        (0, vitest_1.it)('should handle missing content-type header', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, route_1.POST)(request);
            // Should still work or return appropriate error
            (0, vitest_1.expect)(response.status).toBeOneOf([200, 400]);
        });
        (0, vitest_1.it)('should handle rate limiting', async () => {
            // This would require implementing rate limiting middleware
            // For now, we'll just test that the endpoint exists
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            (0, vitest_1.expect)(response).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,