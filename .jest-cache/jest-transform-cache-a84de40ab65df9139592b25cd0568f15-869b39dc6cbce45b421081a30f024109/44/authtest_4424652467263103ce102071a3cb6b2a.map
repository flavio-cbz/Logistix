{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\integration\\api\\auth.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\integration\\api\\auth.test.ts"],"sourcesContent":["/**\r\n * Authentication API Integration Tests\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\r\nimport { NextRequest } from 'next/server';\r\n\r\n// Mock the database and services\r\nvi.mock('@/lib/services/database/db', () => ({\r\n  db: {\r\n    prepare: vi.fn(() => ({\r\n      get: vi.fn(),\r\n      all: vi.fn(),\r\n      run: vi.fn()\r\n    }))\r\n  }\r\n}));\r\n\r\nvi.mock('bcrypt', () => ({\r\n  hash: vi.fn(() => Promise.resolve('hashed-password')),\r\n  compare: vi.fn(() => Promise.resolve(true))\r\n}));\r\n\r\nvi.mock('jsonwebtoken', () => ({\r\n  sign: vi.fn(() => 'mock-jwt-token'),\r\n  verify: vi.fn(() => ({ userId: 'user-123', email: 'test@example.com' }))\r\n}));\r\n\r\n// Import API handlers after mocks\r\nimport { POST as loginHandler } from '@/app/api/v1/auth/login/route';\r\nimport { POST as signupHandler } from '@/app/api/v1/auth/signup/route';\r\nimport { GET as meHandler } from '@/app/api/v1/auth/me/route';\r\nimport { POST as logoutHandler } from '@/app/api/v1/auth/logout/route';\r\n\r\ndescribe('Authentication API Integration Tests', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('POST /api/v1/auth/login', () => {\r\n    it('should login user with valid credentials', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        password: 'hashed-password',\r\n        name: 'Test User'\r\n      };\r\n\r\n      // Mock database response\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(mockUser)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'test@example.com',\r\n          password: 'password123'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data.user).toEqual({\r\n        id: mockUser.id,\r\n        email: mockUser.email,\r\n        name: mockUser.name\r\n      });\r\n      expect(data.data.token).toBe('mock-jwt-token');\r\n    });\r\n\r\n    it('should reject login with invalid email', async () => {\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(null)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'nonexistent@example.com',\r\n          password: 'password123'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('INVALID_CREDENTIALS');\r\n    });\r\n\r\n    it('should reject login with invalid password', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        password: 'hashed-password',\r\n        name: 'Test User'\r\n      };\r\n\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(mockUser)\r\n      });\r\n\r\n      // Mock bcrypt to return false for password comparison\r\n      const bcrypt = await import('bcrypt');\r\n      (bcrypt.compare as any).mockResolvedValue(false);\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'test@example.com',\r\n          password: 'wrongpassword'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('INVALID_CREDENTIALS');\r\n    });\r\n\r\n    it('should validate request body', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'invalid-email',\r\n          password: ''\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n    });\r\n\r\n    it('should handle database errors', async () => {\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockImplementation(() => {\r\n          throw new Error('Database connection failed');\r\n        })\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'test@example.com',\r\n          password: 'password123'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('INTERNAL_ERROR');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/auth/signup', () => {\r\n    it('should create new user with valid data', async () => {\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(null), // User doesn't exist\r\n        run: vi.fn().mockReturnValue({ lastInsertRowid: 1 })\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/signup', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'newuser@example.com',\r\n          password: 'password123',\r\n          name: 'New User'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await signupHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(201);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data.user.email).toBe('newuser@example.com');\r\n      expect(data.data.user.name).toBe('New User');\r\n      expect(data.data.token).toBe('mock-jwt-token');\r\n    });\r\n\r\n    it('should reject signup with existing email', async () => {\r\n      const existingUser = {\r\n        id: 'user-123',\r\n        email: 'existing@example.com',\r\n        name: 'Existing User'\r\n      };\r\n\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(existingUser)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/signup', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'existing@example.com',\r\n          password: 'password123',\r\n          name: 'New User'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await signupHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(409);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('USER_EXISTS');\r\n    });\r\n\r\n    it('should validate signup data', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/signup', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'invalid-email',\r\n          password: '123', // Too short\r\n          name: ''\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await signupHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.details).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('GET /api/v1/auth/me', () => {\r\n    it('should return user data with valid token', async () => {\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'test@example.com',\r\n        name: 'Test User'\r\n      };\r\n\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(mockUser)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/me', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer mock-jwt-token'\r\n        }\r\n      });\r\n\r\n      const response = await meHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data.user).toEqual(mockUser);\r\n    });\r\n\r\n    it('should reject request without token', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/me', {\r\n        method: 'GET'\r\n      });\r\n\r\n      const response = await meHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('UNAUTHORIZED');\r\n    });\r\n\r\n    it('should reject request with invalid token', async () => {\r\n      const jwt = await import('jsonwebtoken');\r\n      (jwt.verify as any).mockImplementation(() => {\r\n        throw new Error('Invalid token');\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/me', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer invalid-token'\r\n        }\r\n      });\r\n\r\n      const response = await meHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('INVALID_TOKEN');\r\n    });\r\n\r\n    it('should handle user not found', async () => {\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(null)\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/me', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer mock-jwt-token'\r\n        }\r\n      });\r\n\r\n      const response = await meHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('USER_NOT_FOUND');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/auth/logout', () => {\r\n    it('should logout user successfully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/logout', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer mock-jwt-token'\r\n        }\r\n      });\r\n\r\n      const response = await logoutHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.message).toBe('Logged out successfully');\r\n    });\r\n\r\n    it('should handle logout without token', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/logout', {\r\n        method: 'POST'\r\n      });\r\n\r\n      const response = await logoutHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.message).toBe('Logged out successfully');\r\n    });\r\n  });\r\n\r\n  describe('Authentication Flow Integration', () => {\r\n    it('should complete full authentication flow', async () => {\r\n      const mockDb = await import('@/lib/services/database/db');\r\n      \r\n      // Step 1: Signup\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(null), // User doesn't exist\r\n        run: vi.fn().mockReturnValue({ lastInsertRowid: 1 })\r\n      });\r\n\r\n      const signupRequest = new NextRequest('http://localhost:3000/api/v1/auth/signup', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'flowtest@example.com',\r\n          password: 'password123',\r\n          name: 'Flow Test User'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const signupResponse = await signupHandler(signupRequest);\r\n      const signupData = await signupResponse.json();\r\n\r\n      expect(signupResponse.status).toBe(201);\r\n      expect(signupData.success).toBe(true);\r\n\r\n      // Step 2: Get user info\r\n      const mockUser = {\r\n        id: 'user-123',\r\n        email: 'flowtest@example.com',\r\n        name: 'Flow Test User'\r\n      };\r\n\r\n      (mockDb.db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(mockUser)\r\n      });\r\n\r\n      const meRequest = new NextRequest('http://localhost:3000/api/v1/auth/me', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${signupData.data.token}`\r\n        }\r\n      });\r\n\r\n      const meResponse = await meHandler(meRequest);\r\n      const meData = await meResponse.json();\r\n\r\n      expect(meResponse.status).toBe(200);\r\n      expect(meData.success).toBe(true);\r\n      expect(meData.data.user.email).toBe('flowtest@example.com');\r\n\r\n      // Step 3: Logout\r\n      const logoutRequest = new NextRequest('http://localhost:3000/api/v1/auth/logout', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${signupData.data.token}`\r\n        }\r\n      });\r\n\r\n      const logoutResponse = await logoutHandler(logoutRequest);\r\n      const logoutData = await logoutResponse.json();\r\n\r\n      expect(logoutResponse.status).toBe(200);\r\n      expect(logoutData.success).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle malformed JSON', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: 'invalid json',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error.code).toBe('INVALID_JSON');\r\n    });\r\n\r\n    it('should handle missing content-type header', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'test@example.com',\r\n          password: 'password123'\r\n        })\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      \r\n      // Should still work or return appropriate error\r\n      expect(response.status).toBeOneOf([200, 400]);\r\n    });\r\n\r\n    it('should handle rate limiting', async () => {\r\n      // This would require implementing rate limiting middleware\r\n      // For now, we'll just test that the endpoint exists\r\n      const request = new NextRequest('http://localhost:3000/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: 'test@example.com',\r\n          password: 'password123'\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const response = await loginHandler(request);\r\n      expect(response).toBeDefined();\r\n    });\r\n  });\r\n});"],"version":3}