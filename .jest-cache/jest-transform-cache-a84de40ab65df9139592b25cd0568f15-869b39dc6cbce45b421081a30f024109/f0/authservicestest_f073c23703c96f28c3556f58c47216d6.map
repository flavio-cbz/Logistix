{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\auth-services.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\auth-services.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals'\r\nimport {\r\n  createMockDatabase,\r\n  createMockUser,\r\n  createMockSession,\r\n  ServiceTestUtils,\r\n  expectToThrow,\r\n  expectToResolve,\r\n  waitForPromises\r\n} from './setup'\r\n\r\n// Mock the auth service dependencies\r\nconst mockDatabase = createMockDatabase()\r\nconst mockLogger = ServiceTestUtils.createMockLogger()\r\n\r\n// Mock the actual auth service module\r\njest.mock('@/lib/services/auth/auth', () => ({\r\n  hashPassword: jest.fn(),\r\n  createUser: jest.fn(),\r\n  verifyCredentials: jest.fn(),\r\n  createSession: jest.fn(),\r\n  signOut: jest.fn(),\r\n  requireAuth: jest.fn(),\r\n  requireAdmin: jest.fn(),\r\n  getSessionUser: jest.fn()\r\n}))\r\n\r\n// Mock database service\r\njest.mock('@/lib/services/database/db', () => ({\r\n  databaseService: {\r\n    execute: jest.fn(),\r\n    queryOne: jest.fn(),\r\n    queryAll: jest.fn()\r\n  },\r\n  generateId: jest.fn().mockReturnValue('generated-id'),\r\n  getCurrentTimestamp: jest.fn().mockReturnValue('2024-01-01T00:00:00.000Z')\r\n}))\r\n\r\n// Mock admin service\r\njest.mock('@/lib/services/admin', () => ({\r\n  getAdminPassword: jest.fn().mockReturnValue('admin123'),\r\n  isAdminUsingDefaultPassword: jest.fn().mockReturnValue(true)\r\n}))\r\n\r\n// Mock crypto\r\njest.mock('crypto', () => ({\r\n  createHash: jest.fn().mockReturnValue({\r\n    update: jest.fn().mockReturnThis(),\r\n    digest: jest.fn().mockReturnValue('hashed-password')\r\n  })\r\n}))\r\n\r\n// Import the mocked modules\r\nimport * as authService from '@/lib/services/auth/auth'\r\nimport { databaseService, generateId, getCurrentTimestamp } from '@/lib/services/database/db'\r\nimport { getAdminPassword, isAdminUsingDefaultPassword } from '@/lib/services/admin'\r\nimport crypto from 'crypto'\r\n\r\ndescribe('Authentication Services - Direct Function Calls', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    jest.resetAllMocks()\r\n  })\r\n\r\n  describe('Password Hashing Functions', () => {\r\n    test('hashPassword should create SHA256 hash', () => {\r\n      const mockHash = {\r\n        update: jest.fn().mockReturnThis(),\r\n        digest: jest.fn().mockReturnValue('hashed-password-123')\r\n      }\r\n      \r\n      ;(crypto.createHash as jest.Mock).mockReturnValue(mockHash)\r\n      \r\n      // Test the actual implementation\r\n      const password = 'testpassword123'\r\n      const result = authService.hashPassword(password)\r\n      \r\n      expect(crypto.createHash).toHaveBeenCalledWith('sha256')\r\n      expect(mockHash.update).toHaveBeenCalledWith(password)\r\n      expect(mockHash.digest).toHaveBeenCalledWith('hex')\r\n      expect(result).toBe('hashed-password-123')\r\n    })\r\n\r\n    test('hashPassword should handle empty password', () => {\r\n      const mockHash = {\r\n        update: jest.fn().mockReturnThis(),\r\n        digest: jest.fn().mockReturnValue('empty-hash')\r\n      }\r\n      \r\n      ;(crypto.createHash as jest.Mock).mockReturnValue(mockHash)\r\n      \r\n      const result = authService.hashPassword('')\r\n      \r\n      expect(mockHash.update).toHaveBeenCalledWith('')\r\n      expect(result).toBe('empty-hash')\r\n    })\r\n\r\n    test('hashPassword should handle special characters', () => {\r\n      const mockHash = {\r\n        update: jest.fn().mockReturnThis(),\r\n        digest: jest.fn().mockReturnValue('special-hash')\r\n      }\r\n      \r\n      ;(crypto.createHash as jest.Mock).mockReturnValue(mockHash)\r\n      \r\n      const specialPassword = 'p@ssw0rd!@#$%^&*()'\r\n      const result = authService.hashPassword(specialPassword)\r\n      \r\n      expect(mockHash.update).toHaveBeenCalledWith(specialPassword)\r\n      expect(result).toBe('special-hash')\r\n    })\r\n\r\n    test('hashPassword should produce consistent results', () => {\r\n      const mockHash = {\r\n        update: jest.fn().mockReturnThis(),\r\n        digest: jest.fn().mockReturnValue('consistent-hash')\r\n      }\r\n      \r\n      ;(crypto.createHash as jest.Mock).mockReturnValue(mockHash)\r\n      \r\n      const password = 'samepassword'\r\n      const result1 = authService.hashPassword(password)\r\n      const result2 = authService.hashPassword(password)\r\n      \r\n      expect(result1).toBe(result2)\r\n      expect(result1).toBe('consistent-hash')\r\n    })\r\n  })\r\n\r\n  describe('User Creation Functions', () => {\r\n    test('createUser should create user with hashed password', async () => {\r\n      const mockUser = createMockUser({\r\n        id: 'generated-id',\r\n        username: 'newuser',\r\n        password_hash: 'hashed-password'\r\n      })\r\n\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n      ;(generateId as jest.Mock).mockReturnValue('generated-id')\r\n      ;(getCurrentTimestamp as jest.Mock).mockReturnValue('2024-01-01T00:00:00.000Z')\r\n      \r\n      // Mock hashPassword implementation\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-password')\r\n\r\n      const result = await authService.createUser('newuser', 'plainpassword')\r\n\r\n      expect(generateId).toHaveBeenCalled()\r\n      expect(authService.hashPassword).toHaveBeenCalledWith('plainpassword')\r\n      expect(getCurrentTimestamp).toHaveBeenCalled()\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        expect.stringContaining('INSERT INTO users'),\r\n        ['generated-id', 'newuser', 'hashed-password', '2024-01-01T00:00:00.000Z', '2024-01-01T00:00:00.000Z'],\r\n        'createUser'\r\n      )\r\n      expect(result).toEqual({\r\n        id: 'generated-id',\r\n        username: 'newuser'\r\n      })\r\n    })\r\n\r\n    test('createUser should handle database errors', async () => {\r\n      const dbError = new Error('Database connection failed')\r\n      ;(databaseService.execute as jest.Mock).mockRejectedValue(dbError)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-password')\r\n\r\n      await expectToThrow(\r\n        () => authService.createUser('testuser', 'password'),\r\n        'Database connection failed'\r\n      )\r\n    })\r\n\r\n    test('createUser should handle duplicate username', async () => {\r\n      const duplicateError = new Error('UNIQUE constraint failed: users.username')\r\n      ;(databaseService.execute as jest.Mock).mockRejectedValue(duplicateError)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-password')\r\n\r\n      await expectToThrow(\r\n        () => authService.createUser('existinguser', 'password'),\r\n        'UNIQUE constraint failed'\r\n      )\r\n    })\r\n\r\n    test('createUser should validate input parameters', async () => {\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-password')\r\n\r\n      // Test with empty username\r\n      await expectToThrow(\r\n        () => authService.createUser('', 'password')\r\n      )\r\n\r\n      // Test with empty password\r\n      await expectToThrow(\r\n        () => authService.createUser('username', '')\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Credential Verification Functions', () => {\r\n    test('verifyCredentials should validate admin with correct password', async () => {\r\n      const mockUser = createMockUser({\r\n        id: 'admin-id',\r\n        username: 'admin',\r\n        password_hash: 'hashed-admin-password'\r\n      })\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockUser)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-admin-password')\r\n      ;(isAdminUsingDefaultPassword as jest.Mock).mockReturnValue(false)\r\n\r\n      const result = await authService.verifyCredentials('admin-password')\r\n\r\n      expect(databaseService.queryOne).toHaveBeenCalledWith(\r\n        expect.stringContaining('SELECT id, username, password_hash FROM users WHERE username = \\'admin\\''),\r\n        [],\r\n        'verifyCredentials'\r\n      )\r\n      expect(authService.hashPassword).toHaveBeenCalledWith('admin-password')\r\n      expect(result).toEqual({\r\n        id: 'admin-id',\r\n        username: 'admin'\r\n      })\r\n    })\r\n\r\n    test('verifyCredentials should handle admin default password', async () => {\r\n      const mockUser = createMockUser({\r\n        id: 'admin-id',\r\n        username: 'admin',\r\n        password_hash: 'old-hash'\r\n      })\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockUser)\r\n      ;(isAdminUsingDefaultPassword as jest.Mock).mockReturnValue(true)\r\n      ;(getAdminPassword as jest.Mock).mockReturnValue('default-admin-password')\r\n\r\n      const result = await authService.verifyCredentials('default-admin-password')\r\n\r\n      expect(result).toEqual({\r\n        id: 'admin-id',\r\n        username: 'admin'\r\n      })\r\n    })\r\n\r\n    test('verifyCredentials should return null for invalid password', async () => {\r\n      const mockUser = createMockUser({\r\n        password_hash: 'correct-hash'\r\n      })\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockUser)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('wrong-hash')\r\n      ;(isAdminUsingDefaultPassword as jest.Mock).mockReturnValue(false)\r\n\r\n      const result = await authService.verifyCredentials('wrong-password')\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('verifyCredentials should return null for non-existent user', async () => {\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(null)\r\n\r\n      const result = await authService.verifyCredentials('any-password')\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('verifyCredentials should handle database errors gracefully', async () => {\r\n      ;(databaseService.queryOne as jest.Mock).mockRejectedValue(new Error('Database error'))\r\n\r\n      const result = await authService.verifyCredentials('password')\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n  })\r\n\r\n  describe('Session Management Functions', () => {\r\n    test('createSession should create new session with expiration', async () => {\r\n      const userId = 'test-user-id'\r\n      const sessionId = 'generated-session-id'\r\n      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\r\n\r\n      ;(generateId as jest.Mock).mockReturnValue(sessionId)\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      // Mock Date.now for consistent expiration time\r\n      const mockNow = 1640995200000 // 2022-01-01T00:00:00.000Z\r\n      jest.spyOn(Date, 'now').mockReturnValue(mockNow)\r\n\r\n      const result = await authService.createSession(userId)\r\n\r\n      expect(generateId).toHaveBeenCalled()\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        'INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)',\r\n        [sessionId, userId, expect.any(String)],\r\n        'createSession'\r\n      )\r\n      expect(result).toBe(sessionId)\r\n\r\n      // Restore Date.now\r\n      jest.restoreAllMocks()\r\n    })\r\n\r\n    test('createSession should handle database errors', async () => {\r\n      const dbError = new Error('Session creation failed')\r\n      ;(databaseService.execute as jest.Mock).mockRejectedValue(dbError)\r\n\r\n      await expectToThrow(\r\n        () => authService.createSession('user-id'),\r\n        'Session creation failed'\r\n      )\r\n    })\r\n\r\n    test('createSession should validate user ID', async () => {\r\n      await expectToThrow(\r\n        () => authService.createSession('')\r\n      )\r\n\r\n      await expectToThrow(\r\n        () => authService.createSession(null as any)\r\n      )\r\n    })\r\n\r\n    test('createSession should set correct expiration time', async () => {\r\n      const userId = 'test-user-id'\r\n      const mockNow = 1640995200000 // 2022-01-01T00:00:00.000Z\r\n      const expectedExpiration = new Date(mockNow + 7 * 24 * 60 * 60 * 1000).toISOString()\r\n\r\n      jest.spyOn(Date, 'now').mockReturnValue(mockNow)\r\n      ;(generateId as jest.Mock).mockReturnValue('session-id')\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      await authService.createSession(userId)\r\n\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        expect.arrayContaining([expect.any(String), userId, expectedExpiration]),\r\n        'createSession'\r\n      )\r\n\r\n      jest.restoreAllMocks()\r\n    })\r\n  })\r\n\r\n  describe('Session Validation Functions', () => {\r\n    test('requireAuth should return user session for valid session', async () => {\r\n      const mockSession = {\r\n        session_id: 'valid-session',\r\n        user_id: 'user-123',\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        username: 'testuser',\r\n        bio: 'Test bio',\r\n        language: 'en',\r\n        theme: 'dark',\r\n        avatar: 'avatar.jpg'\r\n      }\r\n\r\n      // Mock cookies\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'valid-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockSession)\r\n\r\n      const result = await authService.requireAuth()\r\n\r\n      expect(result).toEqual({\r\n        id: 'user-123',\r\n        username: 'testuser',\r\n        bio: 'Test bio',\r\n        language: 'en',\r\n        theme: 'dark',\r\n        avatar: 'avatar.jpg',\r\n        isAdmin: false\r\n      })\r\n    })\r\n\r\n    test('requireAuth should throw error for missing session', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue(undefined)\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAuth(),\r\n        'Non authentifié'\r\n      )\r\n    })\r\n\r\n    test('requireAuth should throw error for expired session', async () => {\r\n      const expiredSession = {\r\n        session_id: 'expired-session',\r\n        user_id: 'user-123',\r\n        expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // Expired\r\n        username: 'testuser'\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'expired-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(expiredSession)\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAuth(),\r\n        'Session expirée'\r\n      )\r\n\r\n      // Verify expired session is cleaned up\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        'DELETE FROM sessions WHERE id = ?',\r\n        ['expired-session'],\r\n        'requireAuth-cleanup'\r\n      )\r\n    })\r\n\r\n    test('requireAuth should handle invalid session', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'invalid-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(null)\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAuth(),\r\n        'Session invalide'\r\n      )\r\n    })\r\n\r\n    test('requireAuth should identify admin users', async () => {\r\n      const adminSession = {\r\n        session_id: 'admin-session',\r\n        user_id: 'admin-123',\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        username: 'admin',\r\n        bio: '',\r\n        language: 'fr',\r\n        theme: 'system',\r\n        avatar: ''\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'admin-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(adminSession)\r\n\r\n      const result = await authService.requireAuth()\r\n\r\n      expect(result.isAdmin).toBe(true)\r\n      expect(result.username).toBe('admin')\r\n    })\r\n  })\r\n\r\n  describe('Admin Authorization Functions', () => {\r\n    test('requireAdmin should succeed for admin user', async () => {\r\n      const adminUser = {\r\n        id: 'admin-123',\r\n        username: 'admin',\r\n        bio: '',\r\n        language: 'fr',\r\n        theme: 'system',\r\n        avatar: '',\r\n        isAdmin: true\r\n      }\r\n\r\n      ;(authService.requireAuth as jest.Mock).mockResolvedValue(adminUser)\r\n\r\n      await expectToResolve(() => authService.requireAdmin())\r\n    })\r\n\r\n    test('requireAdmin should throw error for non-admin user', async () => {\r\n      const regularUser = {\r\n        id: 'user-123',\r\n        username: 'user',\r\n        bio: '',\r\n        language: 'fr',\r\n        theme: 'system',\r\n        avatar: '',\r\n        isAdmin: false\r\n      }\r\n\r\n      ;(authService.requireAuth as jest.Mock).mockResolvedValue(regularUser)\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAdmin(),\r\n        'Non autorisé'\r\n      )\r\n    })\r\n\r\n    test('requireAdmin should handle authentication failure', async () => {\r\n      ;(authService.requireAuth as jest.Mock).mockRejectedValue(new Error('Non authentifié'))\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAdmin(),\r\n        'Non authentifié'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Session Cleanup Functions', () => {\r\n    test('signOut should delete session and clear cookie', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'session-to-delete' }),\r\n        delete: jest.fn()\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      await authService.signOut()\r\n\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        'DELETE FROM sessions WHERE id = ?',\r\n        ['session-to-delete'],\r\n        'signOut'\r\n      )\r\n      expect(mockCookies.delete).toHaveBeenCalledWith('session_id')\r\n    })\r\n\r\n    test('signOut should handle missing session gracefully', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue(undefined),\r\n        delete: jest.fn()\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      await expectToResolve(() => authService.signOut())\r\n\r\n      expect(databaseService.execute).not.toHaveBeenCalled()\r\n      expect(mockCookies.delete).not.toHaveBeenCalled()\r\n    })\r\n\r\n    test('signOut should handle database errors', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'session-id' }),\r\n        delete: jest.fn()\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.execute as jest.Mock).mockRejectedValue(new Error('Database error'))\r\n\r\n      // Should not throw, but handle gracefully\r\n      await expectToResolve(() => authService.signOut())\r\n    })\r\n  })\r\n\r\n  describe('User Session Retrieval Functions', () => {\r\n    test('getSessionUser should return user for valid session', async () => {\r\n      const mockSession = {\r\n        session_id: 'valid-session',\r\n        user_id: 'user-123',\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        username: 'testuser',\r\n        bio: 'Test bio',\r\n        language: 'en',\r\n        theme: 'dark',\r\n        avatar: 'avatar.jpg'\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'valid-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockSession)\r\n\r\n      const result = await authService.getSessionUser()\r\n\r\n      expect(result).toEqual({\r\n        id: 'user-123',\r\n        username: 'testuser',\r\n        bio: 'Test bio',\r\n        language: 'en',\r\n        theme: 'dark',\r\n        avatar: 'avatar.jpg',\r\n        isAdmin: false\r\n      })\r\n    })\r\n\r\n    test('getSessionUser should return null for missing session', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue(undefined)\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      const result = await authService.getSessionUser()\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('getSessionUser should return null for expired session', async () => {\r\n      const expiredSession = {\r\n        session_id: 'expired-session',\r\n        user_id: 'user-123',\r\n        expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\r\n        username: 'testuser'\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'expired-session' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(expiredSession)\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      const result = await authService.getSessionUser()\r\n\r\n      expect(result).toBeNull()\r\n      \r\n      // Verify cleanup\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        'DELETE FROM sessions WHERE id = ?',\r\n        ['expired-session'],\r\n        'getSessionUser-cleanup'\r\n      )\r\n    })\r\n\r\n    test('getSessionUser should handle database errors gracefully', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'session-id' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockRejectedValue(new Error('Database error'))\r\n\r\n      const result = await authService.getSessionUser()\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n  })\r\n\r\n  describe('Audit Logging and User Action Tracking', () => {\r\n    test('should log user creation events', async () => {\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue('hashed-password')\r\n\r\n      await authService.createUser('newuser', 'password')\r\n\r\n      // Verify logging calls were made (implementation depends on logging setup)\r\n      expect(mockLogger.info).toHaveBeenCalled()\r\n    })\r\n\r\n    test('should log authentication attempts', async () => {\r\n      const mockUser = createMockUser()\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockUser)\r\n      ;(authService.hashPassword as jest.Mock).mockReturnValue(mockUser.password_hash)\r\n\r\n      await authService.verifyCredentials('password')\r\n\r\n      // Verify authentication logging\r\n      expect(mockLogger.info).toHaveBeenCalled()\r\n    })\r\n\r\n    test('should log failed authentication attempts', async () => {\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(null)\r\n\r\n      await authService.verifyCredentials('wrong-password')\r\n\r\n      // Verify failed authentication logging\r\n      expect(mockLogger.warn).toHaveBeenCalled()\r\n    })\r\n\r\n    test('should log session creation and destruction', async () => {\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      await authService.createSession('user-id')\r\n\r\n      // Verify session creation logging\r\n      expect(mockLogger.info).toHaveBeenCalled()\r\n    })\r\n\r\n    test('should track user actions with context', async () => {\r\n      const mockSession = {\r\n        session_id: 'session-123',\r\n        user_id: 'user-123',\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        username: 'testuser'\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'session-123' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(mockSession)\r\n\r\n      await authService.requireAuth()\r\n\r\n      // Verify user action tracking includes context\r\n      expect(databaseService.queryOne).toHaveBeenCalledWith(\r\n        expect.stringContaining('sessions'),\r\n        ['session-123'],\r\n        'requireAuth'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Error Handling and Edge Cases', () => {\r\n    test('should handle malformed session data', async () => {\r\n      const malformedSession = {\r\n        session_id: 'session-123',\r\n        user_id: 'user-123',\r\n        expires_at: 'invalid-date',\r\n        username: 'testuser'\r\n      }\r\n\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: 'session-123' })\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      ;(databaseService.queryOne as jest.Mock).mockResolvedValue(malformedSession)\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAuth(),\r\n        'Session invalide'\r\n      )\r\n\r\n      // Verify cleanup of malformed session\r\n      expect(databaseService.execute).toHaveBeenCalledWith(\r\n        'DELETE FROM sessions WHERE id = ?',\r\n        ['session-123'],\r\n        'requireAuth-cleanup'\r\n      )\r\n    })\r\n\r\n    test('should handle concurrent session operations', async () => {\r\n      const userId = 'user-123'\r\n      ;(generateId as jest.Mock)\r\n        .mockReturnValueOnce('session-1')\r\n        .mockReturnValueOnce('session-2')\r\n        .mockReturnValueOnce('session-3')\r\n      ;(databaseService.execute as jest.Mock).mockResolvedValue(undefined)\r\n\r\n      // Create multiple sessions concurrently\r\n      const sessionPromises = [\r\n        authService.createSession(userId),\r\n        authService.createSession(userId),\r\n        authService.createSession(userId)\r\n      ]\r\n\r\n      const results = await Promise.all(sessionPromises)\r\n\r\n      expect(results).toEqual(['session-1', 'session-2', 'session-3'])\r\n      expect(databaseService.execute).toHaveBeenCalledTimes(3)\r\n    })\r\n\r\n    test('should handle database connection failures gracefully', async () => {\r\n      const connectionError = new Error('SQLITE_BUSY: database is locked')\r\n      ;(databaseService.queryOne as jest.Mock).mockRejectedValue(connectionError)\r\n\r\n      const result = await authService.verifyCredentials('password')\r\n\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('should validate session cookie format', async () => {\r\n      const mockCookies = {\r\n        get: jest.fn().mockReturnValue({ value: '   ' }) // Whitespace only\r\n      }\r\n      \r\n      jest.doMock('next/headers', () => ({\r\n        cookies: () => mockCookies\r\n      }))\r\n\r\n      await expectToThrow(\r\n        () => authService.requireAuth(),\r\n        'Non authentifié'\r\n      )\r\n    })\r\n\r\n    test('should handle null/undefined user data gracefully', async () => {\r\n      await expectToThrow(\r\n        () => authService.createUser(null as any, 'password')\r\n      )\r\n\r\n      await expectToThrow(\r\n        () => authService.createUser('username', null as any)\r\n      )\r\n\r\n      await expectToThrow(\r\n        () => authService.createSession(null as any)\r\n      )\r\n    })\r\n  })\r\n})"],"version":3}