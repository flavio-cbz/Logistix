b44c6176c8e4f2c605d51f55abb59cde
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const globals_1 = require("@jest/globals");
// Mock the actual auth service module
globals_1.jest.mock('@/lib/services/auth/auth', () => ({
    hashPassword: globals_1.jest.fn(),
    createUser: globals_1.jest.fn(),
    verifyCredentials: globals_1.jest.fn(),
    createSession: globals_1.jest.fn(),
    signOut: globals_1.jest.fn(),
    requireAuth: globals_1.jest.fn(),
    requireAdmin: globals_1.jest.fn(),
    getSessionUser: globals_1.jest.fn()
}));
// Mock database service
globals_1.jest.mock('@/lib/services/database/db', () => ({
    databaseService: {
        execute: globals_1.jest.fn(),
        queryOne: globals_1.jest.fn(),
        queryAll: globals_1.jest.fn()
    },
    generateId: globals_1.jest.fn().mockReturnValue('generated-id'),
    getCurrentTimestamp: globals_1.jest.fn().mockReturnValue('2024-01-01T00:00:00.000Z')
}));
// Mock admin service
globals_1.jest.mock('@/lib/services/admin', () => ({
    getAdminPassword: globals_1.jest.fn().mockReturnValue('admin123'),
    isAdminUsingDefaultPassword: globals_1.jest.fn().mockReturnValue(true)
}));
// Mock crypto
globals_1.jest.mock('crypto', () => ({
    createHash: globals_1.jest.fn().mockReturnValue({
        update: globals_1.jest.fn().mockReturnThis(),
        digest: globals_1.jest.fn().mockReturnValue('hashed-password')
    })
}));
const setup_1 = require("./setup");
// Mock the auth service dependencies
const mockDatabase = (0, setup_1.createMockDatabase)();
const mockLogger = setup_1.ServiceTestUtils.createMockLogger();
// Import the mocked modules
const authService = tslib_1.__importStar(require("@/lib/services/auth/auth"));
const db_1 = require("@/lib/services/database/db");
const admin_1 = require("@/lib/services/admin");
const crypto_1 = tslib_1.__importDefault(require("crypto"));
(0, globals_1.describe)('Authentication Services - Direct Function Calls', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Password Hashing Functions', () => {
        (0, globals_1.test)('hashPassword should create SHA256 hash', () => {
            const mockHash = {
                update: globals_1.jest.fn().mockReturnThis(),
                digest: globals_1.jest.fn().mockReturnValue('hashed-password-123')
            };
            crypto_1.default.createHash.mockReturnValue(mockHash);
            // Test the actual implementation
            const password = 'testpassword123';
            const result = authService.hashPassword(password);
            (0, globals_1.expect)(crypto_1.default.createHash).toHaveBeenCalledWith('sha256');
            (0, globals_1.expect)(mockHash.update).toHaveBeenCalledWith(password);
            (0, globals_1.expect)(mockHash.digest).toHaveBeenCalledWith('hex');
            (0, globals_1.expect)(result).toBe('hashed-password-123');
        });
        (0, globals_1.test)('hashPassword should handle empty password', () => {
            const mockHash = {
                update: globals_1.jest.fn().mockReturnThis(),
                digest: globals_1.jest.fn().mockReturnValue('empty-hash')
            };
            crypto_1.default.createHash.mockReturnValue(mockHash);
            const result = authService.hashPassword('');
            (0, globals_1.expect)(mockHash.update).toHaveBeenCalledWith('');
            (0, globals_1.expect)(result).toBe('empty-hash');
        });
        (0, globals_1.test)('hashPassword should handle special characters', () => {
            const mockHash = {
                update: globals_1.jest.fn().mockReturnThis(),
                digest: globals_1.jest.fn().mockReturnValue('special-hash')
            };
            crypto_1.default.createHash.mockReturnValue(mockHash);
            const specialPassword = 'p@ssw0rd!@#$%^&*()';
            const result = authService.hashPassword(specialPassword);
            (0, globals_1.expect)(mockHash.update).toHaveBeenCalledWith(specialPassword);
            (0, globals_1.expect)(result).toBe('special-hash');
        });
        (0, globals_1.test)('hashPassword should produce consistent results', () => {
            const mockHash = {
                update: globals_1.jest.fn().mockReturnThis(),
                digest: globals_1.jest.fn().mockReturnValue('consistent-hash')
            };
            crypto_1.default.createHash.mockReturnValue(mockHash);
            const password = 'samepassword';
            const result1 = authService.hashPassword(password);
            const result2 = authService.hashPassword(password);
            (0, globals_1.expect)(result1).toBe(result2);
            (0, globals_1.expect)(result1).toBe('consistent-hash');
        });
    });
    (0, globals_1.describe)('User Creation Functions', () => {
        (0, globals_1.test)('createUser should create user with hashed password', async () => {
            const mockUser = (0, setup_1.createMockUser)({
                id: 'generated-id',
                username: 'newuser',
                password_hash: 'hashed-password'
            });
            db_1.databaseService.execute.mockResolvedValue(undefined);
            db_1.generateId.mockReturnValue('generated-id');
            db_1.getCurrentTimestamp.mockReturnValue('2024-01-01T00:00:00.000Z');
            authService.hashPassword.mockReturnValue('hashed-password');
            const result = await authService.createUser('newuser', 'plainpassword');
            (0, globals_1.expect)(db_1.generateId).toHaveBeenCalled();
            (0, globals_1.expect)(authService.hashPassword).toHaveBeenCalledWith('plainpassword');
            (0, globals_1.expect)(db_1.getCurrentTimestamp).toHaveBeenCalled();
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith(globals_1.expect.stringContaining('INSERT INTO users'), ['generated-id', 'newuser', 'hashed-password', '2024-01-01T00:00:00.000Z', '2024-01-01T00:00:00.000Z'], 'createUser');
            (0, globals_1.expect)(result).toEqual({
                id: 'generated-id',
                username: 'newuser'
            });
        });
        (0, globals_1.test)('createUser should handle database errors', async () => {
            const dbError = new Error('Database connection failed');
            db_1.databaseService.execute.mockRejectedValue(dbError);
            authService.hashPassword.mockReturnValue('hashed-password');
            await (0, setup_1.expectToThrow)(() => authService.createUser('testuser', 'password'), 'Database connection failed');
        });
        (0, globals_1.test)('createUser should handle duplicate username', async () => {
            const duplicateError = new Error('UNIQUE constraint failed: users.username');
            db_1.databaseService.execute.mockRejectedValue(duplicateError);
            authService.hashPassword.mockReturnValue('hashed-password');
            await (0, setup_1.expectToThrow)(() => authService.createUser('existinguser', 'password'), 'UNIQUE constraint failed');
        });
        (0, globals_1.test)('createUser should validate input parameters', async () => {
            ;
            authService.hashPassword.mockReturnValue('hashed-password');
            // Test with empty username
            await (0, setup_1.expectToThrow)(() => authService.createUser('', 'password'));
            // Test with empty password
            await (0, setup_1.expectToThrow)(() => authService.createUser('username', ''));
        });
    });
    (0, globals_1.describe)('Credential Verification Functions', () => {
        (0, globals_1.test)('verifyCredentials should validate admin with correct password', async () => {
            const mockUser = (0, setup_1.createMockUser)({
                id: 'admin-id',
                username: 'admin',
                password_hash: 'hashed-admin-password'
            });
            db_1.databaseService.queryOne.mockResolvedValue(mockUser);
            authService.hashPassword.mockReturnValue('hashed-admin-password');
            admin_1.isAdminUsingDefaultPassword.mockReturnValue(false);
            const result = await authService.verifyCredentials('admin-password');
            (0, globals_1.expect)(db_1.databaseService.queryOne).toHaveBeenCalledWith(globals_1.expect.stringContaining('SELECT id, username, password_hash FROM users WHERE username = \'admin\''), [], 'verifyCredentials');
            (0, globals_1.expect)(authService.hashPassword).toHaveBeenCalledWith('admin-password');
            (0, globals_1.expect)(result).toEqual({
                id: 'admin-id',
                username: 'admin'
            });
        });
        (0, globals_1.test)('verifyCredentials should handle admin default password', async () => {
            const mockUser = (0, setup_1.createMockUser)({
                id: 'admin-id',
                username: 'admin',
                password_hash: 'old-hash'
            });
            db_1.databaseService.queryOne.mockResolvedValue(mockUser);
            admin_1.isAdminUsingDefaultPassword.mockReturnValue(true);
            admin_1.getAdminPassword.mockReturnValue('default-admin-password');
            const result = await authService.verifyCredentials('default-admin-password');
            (0, globals_1.expect)(result).toEqual({
                id: 'admin-id',
                username: 'admin'
            });
        });
        (0, globals_1.test)('verifyCredentials should return null for invalid password', async () => {
            const mockUser = (0, setup_1.createMockUser)({
                password_hash: 'correct-hash'
            });
            db_1.databaseService.queryOne.mockResolvedValue(mockUser);
            authService.hashPassword.mockReturnValue('wrong-hash');
            admin_1.isAdminUsingDefaultPassword.mockReturnValue(false);
            const result = await authService.verifyCredentials('wrong-password');
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.test)('verifyCredentials should return null for non-existent user', async () => {
            ;
            db_1.databaseService.queryOne.mockResolvedValue(null);
            const result = await authService.verifyCredentials('any-password');
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.test)('verifyCredentials should handle database errors gracefully', async () => {
            ;
            db_1.databaseService.queryOne.mockRejectedValue(new Error('Database error'));
            const result = await authService.verifyCredentials('password');
            (0, globals_1.expect)(result).toBeNull();
        });
    });
    (0, globals_1.describe)('Session Management Functions', () => {
        (0, globals_1.test)('createSession should create new session with expiration', async () => {
            const userId = 'test-user-id';
            const sessionId = 'generated-session-id';
            const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
            db_1.generateId.mockReturnValue(sessionId);
            db_1.databaseService.execute.mockResolvedValue(undefined);
            // Mock Date.now for consistent expiration time
            const mockNow = 1640995200000; // 2022-01-01T00:00:00.000Z
            globals_1.jest.spyOn(Date, 'now').mockReturnValue(mockNow);
            const result = await authService.createSession(userId);
            (0, globals_1.expect)(db_1.generateId).toHaveBeenCalled();
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith('INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)', [sessionId, userId, globals_1.expect.any(String)], 'createSession');
            (0, globals_1.expect)(result).toBe(sessionId);
            // Restore Date.now
            globals_1.jest.restoreAllMocks();
        });
        (0, globals_1.test)('createSession should handle database errors', async () => {
            const dbError = new Error('Session creation failed');
            db_1.databaseService.execute.mockRejectedValue(dbError);
            await (0, setup_1.expectToThrow)(() => authService.createSession('user-id'), 'Session creation failed');
        });
        (0, globals_1.test)('createSession should validate user ID', async () => {
            await (0, setup_1.expectToThrow)(() => authService.createSession(''));
            await (0, setup_1.expectToThrow)(() => authService.createSession(null));
        });
        (0, globals_1.test)('createSession should set correct expiration time', async () => {
            const userId = 'test-user-id';
            const mockNow = 1640995200000; // 2022-01-01T00:00:00.000Z
            const expectedExpiration = new Date(mockNow + 7 * 24 * 60 * 60 * 1000).toISOString();
            globals_1.jest.spyOn(Date, 'now').mockReturnValue(mockNow);
            db_1.generateId.mockReturnValue('session-id');
            db_1.databaseService.execute.mockResolvedValue(undefined);
            await authService.createSession(userId);
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith(globals_1.expect.any(String), globals_1.expect.arrayContaining([globals_1.expect.any(String), userId, expectedExpiration]), 'createSession');
            globals_1.jest.restoreAllMocks();
        });
    });
    (0, globals_1.describe)('Session Validation Functions', () => {
        (0, globals_1.test)('requireAuth should return user session for valid session', async () => {
            const mockSession = {
                session_id: 'valid-session',
                user_id: 'user-123',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                username: 'testuser',
                bio: 'Test bio',
                language: 'en',
                theme: 'dark',
                avatar: 'avatar.jpg'
            };
            // Mock cookies
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'valid-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(mockSession);
            const result = await authService.requireAuth();
            (0, globals_1.expect)(result).toEqual({
                id: 'user-123',
                username: 'testuser',
                bio: 'Test bio',
                language: 'en',
                theme: 'dark',
                avatar: 'avatar.jpg',
                isAdmin: false
            });
        });
        (0, globals_1.test)('requireAuth should throw error for missing session', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue(undefined)
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            await (0, setup_1.expectToThrow)(() => authService.requireAuth(), 'Non authentifié');
        });
        (0, globals_1.test)('requireAuth should throw error for expired session', async () => {
            const expiredSession = {
                session_id: 'expired-session',
                user_id: 'user-123',
                expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // Expired
                username: 'testuser'
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'expired-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(expiredSession);
            db_1.databaseService.execute.mockResolvedValue(undefined);
            await (0, setup_1.expectToThrow)(() => authService.requireAuth(), 'Session expirée');
            // Verify expired session is cleaned up
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith('DELETE FROM sessions WHERE id = ?', ['expired-session'], 'requireAuth-cleanup');
        });
        (0, globals_1.test)('requireAuth should handle invalid session', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'invalid-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(null);
            await (0, setup_1.expectToThrow)(() => authService.requireAuth(), 'Session invalide');
        });
        (0, globals_1.test)('requireAuth should identify admin users', async () => {
            const adminSession = {
                session_id: 'admin-session',
                user_id: 'admin-123',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                username: 'admin',
                bio: '',
                language: 'fr',
                theme: 'system',
                avatar: ''
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'admin-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(adminSession);
            const result = await authService.requireAuth();
            (0, globals_1.expect)(result.isAdmin).toBe(true);
            (0, globals_1.expect)(result.username).toBe('admin');
        });
    });
    (0, globals_1.describe)('Admin Authorization Functions', () => {
        (0, globals_1.test)('requireAdmin should succeed for admin user', async () => {
            const adminUser = {
                id: 'admin-123',
                username: 'admin',
                bio: '',
                language: 'fr',
                theme: 'system',
                avatar: '',
                isAdmin: true
            };
            authService.requireAuth.mockResolvedValue(adminUser);
            await (0, setup_1.expectToResolve)(() => authService.requireAdmin());
        });
        (0, globals_1.test)('requireAdmin should throw error for non-admin user', async () => {
            const regularUser = {
                id: 'user-123',
                username: 'user',
                bio: '',
                language: 'fr',
                theme: 'system',
                avatar: '',
                isAdmin: false
            };
            authService.requireAuth.mockResolvedValue(regularUser);
            await (0, setup_1.expectToThrow)(() => authService.requireAdmin(), 'Non autorisé');
        });
        (0, globals_1.test)('requireAdmin should handle authentication failure', async () => {
            ;
            authService.requireAuth.mockRejectedValue(new Error('Non authentifié'));
            await (0, setup_1.expectToThrow)(() => authService.requireAdmin(), 'Non authentifié');
        });
    });
    (0, globals_1.describe)('Session Cleanup Functions', () => {
        (0, globals_1.test)('signOut should delete session and clear cookie', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'session-to-delete' }),
                delete: globals_1.jest.fn()
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.execute.mockResolvedValue(undefined);
            await authService.signOut();
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith('DELETE FROM sessions WHERE id = ?', ['session-to-delete'], 'signOut');
            (0, globals_1.expect)(mockCookies.delete).toHaveBeenCalledWith('session_id');
        });
        (0, globals_1.test)('signOut should handle missing session gracefully', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue(undefined),
                delete: globals_1.jest.fn()
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            await (0, setup_1.expectToResolve)(() => authService.signOut());
            (0, globals_1.expect)(db_1.databaseService.execute).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockCookies.delete).not.toHaveBeenCalled();
        });
        (0, globals_1.test)('signOut should handle database errors', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'session-id' }),
                delete: globals_1.jest.fn()
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.execute.mockRejectedValue(new Error('Database error'));
            // Should not throw, but handle gracefully
            await (0, setup_1.expectToResolve)(() => authService.signOut());
        });
    });
    (0, globals_1.describe)('User Session Retrieval Functions', () => {
        (0, globals_1.test)('getSessionUser should return user for valid session', async () => {
            const mockSession = {
                session_id: 'valid-session',
                user_id: 'user-123',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                username: 'testuser',
                bio: 'Test bio',
                language: 'en',
                theme: 'dark',
                avatar: 'avatar.jpg'
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'valid-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(mockSession);
            const result = await authService.getSessionUser();
            (0, globals_1.expect)(result).toEqual({
                id: 'user-123',
                username: 'testuser',
                bio: 'Test bio',
                language: 'en',
                theme: 'dark',
                avatar: 'avatar.jpg',
                isAdmin: false
            });
        });
        (0, globals_1.test)('getSessionUser should return null for missing session', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue(undefined)
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            const result = await authService.getSessionUser();
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.test)('getSessionUser should return null for expired session', async () => {
            const expiredSession = {
                session_id: 'expired-session',
                user_id: 'user-123',
                expires_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
                username: 'testuser'
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'expired-session' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(expiredSession);
            db_1.databaseService.execute.mockResolvedValue(undefined);
            const result = await authService.getSessionUser();
            (0, globals_1.expect)(result).toBeNull();
            // Verify cleanup
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith('DELETE FROM sessions WHERE id = ?', ['expired-session'], 'getSessionUser-cleanup');
        });
        (0, globals_1.test)('getSessionUser should handle database errors gracefully', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'session-id' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockRejectedValue(new Error('Database error'));
            const result = await authService.getSessionUser();
            (0, globals_1.expect)(result).toBeNull();
        });
    });
    (0, globals_1.describe)('Audit Logging and User Action Tracking', () => {
        (0, globals_1.test)('should log user creation events', async () => {
            ;
            db_1.databaseService.execute.mockResolvedValue(undefined);
            authService.hashPassword.mockReturnValue('hashed-password');
            await authService.createUser('newuser', 'password');
            // Verify logging calls were made (implementation depends on logging setup)
            (0, globals_1.expect)(mockLogger.info).toHaveBeenCalled();
        });
        (0, globals_1.test)('should log authentication attempts', async () => {
            const mockUser = (0, setup_1.createMockUser)();
            db_1.databaseService.queryOne.mockResolvedValue(mockUser);
            authService.hashPassword.mockReturnValue(mockUser.password_hash);
            await authService.verifyCredentials('password');
            // Verify authentication logging
            (0, globals_1.expect)(mockLogger.info).toHaveBeenCalled();
        });
        (0, globals_1.test)('should log failed authentication attempts', async () => {
            ;
            db_1.databaseService.queryOne.mockResolvedValue(null);
            await authService.verifyCredentials('wrong-password');
            // Verify failed authentication logging
            (0, globals_1.expect)(mockLogger.warn).toHaveBeenCalled();
        });
        (0, globals_1.test)('should log session creation and destruction', async () => {
            ;
            db_1.databaseService.execute.mockResolvedValue(undefined);
            await authService.createSession('user-id');
            // Verify session creation logging
            (0, globals_1.expect)(mockLogger.info).toHaveBeenCalled();
        });
        (0, globals_1.test)('should track user actions with context', async () => {
            const mockSession = {
                session_id: 'session-123',
                user_id: 'user-123',
                expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                username: 'testuser'
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'session-123' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(mockSession);
            await authService.requireAuth();
            // Verify user action tracking includes context
            (0, globals_1.expect)(db_1.databaseService.queryOne).toHaveBeenCalledWith(globals_1.expect.stringContaining('sessions'), ['session-123'], 'requireAuth');
        });
    });
    (0, globals_1.describe)('Error Handling and Edge Cases', () => {
        (0, globals_1.test)('should handle malformed session data', async () => {
            const malformedSession = {
                session_id: 'session-123',
                user_id: 'user-123',
                expires_at: 'invalid-date',
                username: 'testuser'
            };
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: 'session-123' })
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            db_1.databaseService.queryOne.mockResolvedValue(malformedSession);
            db_1.databaseService.execute.mockResolvedValue(undefined);
            await (0, setup_1.expectToThrow)(() => authService.requireAuth(), 'Session invalide');
            // Verify cleanup of malformed session
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledWith('DELETE FROM sessions WHERE id = ?', ['session-123'], 'requireAuth-cleanup');
        });
        (0, globals_1.test)('should handle concurrent session operations', async () => {
            const userId = 'user-123';
            db_1.generateId
                .mockReturnValueOnce('session-1')
                .mockReturnValueOnce('session-2')
                .mockReturnValueOnce('session-3');
            db_1.databaseService.execute.mockResolvedValue(undefined);
            // Create multiple sessions concurrently
            const sessionPromises = [
                authService.createSession(userId),
                authService.createSession(userId),
                authService.createSession(userId)
            ];
            const results = await Promise.all(sessionPromises);
            (0, globals_1.expect)(results).toEqual(['session-1', 'session-2', 'session-3']);
            (0, globals_1.expect)(db_1.databaseService.execute).toHaveBeenCalledTimes(3);
        });
        (0, globals_1.test)('should handle database connection failures gracefully', async () => {
            const connectionError = new Error('SQLITE_BUSY: database is locked');
            db_1.databaseService.queryOne.mockRejectedValue(connectionError);
            const result = await authService.verifyCredentials('password');
            (0, globals_1.expect)(result).toBeNull();
        });
        (0, globals_1.test)('should validate session cookie format', async () => {
            const mockCookies = {
                get: globals_1.jest.fn().mockReturnValue({ value: '   ' }) // Whitespace only
            };
            globals_1.jest.doMock('next/headers', () => ({
                cookies: () => mockCookies
            }));
            await (0, setup_1.expectToThrow)(() => authService.requireAuth(), 'Non authentifié');
        });
        (0, globals_1.test)('should handle null/undefined user data gracefully', async () => {
            await (0, setup_1.expectToThrow)(() => authService.createUser(null, 'password'));
            await (0, setup_1.expectToThrow)(() => authService.createUser('username', null));
            await (0, setup_1.expectToThrow)(() => authService.createSession(null));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,