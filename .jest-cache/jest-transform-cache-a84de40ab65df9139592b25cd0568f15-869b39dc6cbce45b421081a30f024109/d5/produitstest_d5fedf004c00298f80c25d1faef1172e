69483c3ee708e9820a5385bef52d9d21
"use strict";
/**
 * Products API Integration Tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const server_1 = require("next/server");
// Mock the database and services
vitest_1.vi.mock('@/lib/services/database/db', () => ({
    db: {
        prepare: vitest_1.vi.fn(() => ({
            get: vitest_1.vi.fn(),
            all: vitest_1.vi.fn(),
            run: vitest_1.vi.fn()
        }))
    }
}));
vitest_1.vi.mock('jsonwebtoken', () => ({
    verify: vitest_1.vi.fn(() => ({ userId: 'user-123', email: 'test@example.com' }))
}));
// Import API handlers after mocks
const route_1 = require("@/app/api/v1/produits/route");
(0, vitest_1.describe)('Products API Integration Tests', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.describe)('GET /api/v1/produits', () => {
        (0, vitest_1.it)('should return all products for authenticated user', async () => {
            const mockProducts = [
                {
                    id: 'prod-1',
                    nom: 'Tomates',
                    prix: 2.50,
                    quantite: 100,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123',
                    createdAt: '2024-01-01T00:00:00Z'
                },
                {
                    id: 'prod-2',
                    nom: 'Carottes',
                    prix: 1.80,
                    quantite: 50,
                    parcelleId: 'parcelle-2',
                    userId: 'user-123',
                    createdAt: '2024-01-02T00:00:00Z'
                }
            ];
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(2);
            (0, vitest_1.expect)(data.data.produits[0].nom).toBe('Tomates');
            (0, vitest_1.expect)(data.data.produits[1].nom).toBe('Carottes');
        });
        (0, vitest_1.it)('should return empty array when no products exist', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue([])
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(0);
        });
        (0, vitest_1.it)('should filter products by parcelle', async () => {
            const mockProducts = [
                {
                    id: 'prod-1',
                    nom: 'Tomates',
                    prix: 2.50,
                    quantite: 100,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123'
                }
            ];
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits?parcelleId=parcelle-1', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(1);
            (0, vitest_1.expect)(data.data.produits[0].parcelleId).toBe('parcelle-1');
        });
        (0, vitest_1.it)('should support pagination', async () => {
            const mockProducts = Array.from({ length: 5 }, (_, i) => ({
                id: `prod-${i + 1}`,
                nom: `Produit ${i + 1}`,
                prix: 10 + i,
                quantite: 100,
                parcelleId: 'parcelle-1',
                userId: 'user-123'
            }));
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts.slice(0, 2)) // First 2 items
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits?page=1&limit=2', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(2);
            (0, vitest_1.expect)(data.data.pagination).toBeDefined();
        });
        (0, vitest_1.it)('should require authentication', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'GET'
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('UNAUTHORIZED');
        });
        (0, vitest_1.it)('should handle database errors', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockImplementation(() => {
                    throw new Error('Database connection failed');
                })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(500);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INTERNAL_ERROR');
        });
    });
    (0, vitest_1.describe)('POST /api/v1/produits', () => {
        (0, vitest_1.it)('should create new product with valid data', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                run: vitest_1.vi.fn().mockReturnValue({ lastInsertRowid: 1 }),
                get: vitest_1.vi.fn().mockReturnValue({
                    id: 'prod-1',
                    nom: 'Nouvelles Tomates',
                    prix: 3.00,
                    quantite: 200,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123',
                    createdAt: '2024-01-01T00:00:00Z'
                })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Nouvelles Tomates',
                    prix: 3.00,
                    quantite: 200,
                    parcelleId: 'parcelle-1',
                    description: 'Tomates fraîches du jardin'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(201);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produit.nom).toBe('Nouvelles Tomates');
            (0, vitest_1.expect)(data.data.produit.prix).toBe(3.00);
            (0, vitest_1.expect)(data.data.produit.quantite).toBe(200);
        });
        (0, vitest_1.it)('should validate required fields', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: '', // Empty name
                    prix: -1, // Negative price
                    quantite: 'invalid' // Invalid quantity type
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
            (0, vitest_1.expect)(data.error.details).toBeDefined();
        });
        (0, vitest_1.it)('should validate price is positive', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Test Product',
                    prix: -10,
                    quantite: 100,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should validate quantity is non-negative', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Test Product',
                    prix: 10,
                    quantite: -5,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should require authentication', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Test Product',
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('UNAUTHORIZED');
        });
        (0, vitest_1.it)('should handle database insertion errors', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                run: vitest_1.vi.fn().mockImplementation(() => {
                    throw new Error('Database insertion failed');
                })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Test Product',
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(500);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INTERNAL_ERROR');
        });
        (0, vitest_1.it)('should handle foreign key constraint violations', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                run: vitest_1.vi.fn().mockImplementation(() => {
                    const error = new Error('FOREIGN KEY constraint failed');
                    error.code = 'SQLITE_CONSTRAINT_FOREIGNKEY';
                    throw error;
                })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: 'Test Product',
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'non-existent-parcelle'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_REFERENCE');
        });
    });
    (0, vitest_1.describe)('Product Search and Filtering', () => {
        (0, vitest_1.it)('should search products by name', async () => {
            const mockProducts = [
                {
                    id: 'prod-1',
                    nom: 'Tomates cerises',
                    prix: 3.50,
                    quantite: 50,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123'
                }
            ];
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits?search=tomates', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(1);
            (0, vitest_1.expect)(data.data.produits[0].nom).toContain('Tomates');
        });
        (0, vitest_1.it)('should filter products by price range', async () => {
            const mockProducts = [
                {
                    id: 'prod-1',
                    nom: 'Produit cher',
                    prix: 15.00,
                    quantite: 10,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123'
                }
            ];
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits?minPrice=10&maxPrice=20', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(1);
            (0, vitest_1.expect)(data.data.produits[0].prix).toBeGreaterThanOrEqual(10);
            (0, vitest_1.expect)(data.data.produits[0].prix).toBeLessThanOrEqual(20);
        });
        (0, vitest_1.it)('should sort products by different fields', async () => {
            const mockProducts = [
                {
                    id: 'prod-1',
                    nom: 'A Product',
                    prix: 5.00,
                    quantite: 100,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123',
                    createdAt: '2024-01-01T00:00:00Z'
                },
                {
                    id: 'prod-2',
                    nom: 'B Product',
                    prix: 3.00,
                    quantite: 200,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123',
                    createdAt: '2024-01-02T00:00:00Z'
                }
            ];
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                all: vitest_1.vi.fn().mockReturnValue(mockProducts)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits?sortBy=prix&sortOrder=asc', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.success).toBe(true);
            (0, vitest_1.expect)(data.data.produits).toHaveLength(2);
            // Should be sorted by price ascending
            (0, vitest_1.expect)(data.data.produits[0].prix).toBeLessThanOrEqual(data.data.produits[1].prix);
        });
    });
    (0, vitest_1.describe)('Product Statistics', () => {
        (0, vitest_1.it)('should return product statistics', async () => {
            const mockStats = {
                totalProducts: 10,
                totalValue: 1500.00,
                averagePrice: 15.00,
                lowStockProducts: 2
            };
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                get: vitest_1.vi.fn().mockReturnValue(mockStats)
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits/stats', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            // This would require implementing the stats endpoint
            // For now, we'll test that the main endpoint works
            const response = await (0, route_1.GET)(request);
            (0, vitest_1.expect)(response).toBeDefined();
        });
    });
    (0, vitest_1.describe)('Error Handling and Edge Cases', () => {
        (0, vitest_1.it)('should handle malformed JSON in request body', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: 'invalid json',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('INVALID_JSON');
        });
        (0, vitest_1.it)('should handle very large product names', async () => {
            const longName = 'A'.repeat(1000);
            const request = new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: longName,
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.success).toBe(false);
            (0, vitest_1.expect)(data.error.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle concurrent product creation', async () => {
            const mockDb = await Promise.resolve().then(() => __importStar(require('@/lib/services/database/db')));
            mockDb.db.prepare.mockReturnValue({
                run: vitest_1.vi.fn().mockReturnValue({ lastInsertRowid: 1 }),
                get: vitest_1.vi.fn().mockReturnValue({
                    id: 'prod-1',
                    nom: 'Concurrent Product',
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'parcelle-1',
                    userId: 'user-123'
                })
            });
            const requests = Array.from({ length: 3 }, (_, i) => new server_1.NextRequest('http://localhost:3000/api/v1/produits', {
                method: 'POST',
                body: JSON.stringify({
                    nom: `Concurrent Product ${i}`,
                    prix: 10,
                    quantite: 100,
                    parcelleId: 'parcelle-1'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer mock-jwt-token'
                }
            }));
            const responses = await Promise.all(requests.map(request => (0, route_1.POST)(request)));
            responses.forEach(response => {
                (0, vitest_1.expect)(response.status).toBeOneOf([201, 500]); // Either success or handled error
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,