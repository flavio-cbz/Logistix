24c7b538c1ccf83f8700e84f3d9f47e0
"use strict";
/**
 * Validation Utilities Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const zod_1 = require("zod");
// Mock validation schemas (since we don't have the actual file yet)
const mockValidationSchemas = {
    // User validation
    userSchema: zod_1.z.object({
        id: zod_1.z.string().uuid(),
        email: zod_1.z.string().email(),
        name: zod_1.z.string().min(1).max(100),
        age: zod_1.z.number().min(0).max(150).optional(),
        createdAt: zod_1.z.date().optional()
    }),
    // Product validation
    productSchema: zod_1.z.object({
        id: zod_1.z.string().uuid(),
        name: zod_1.z.string().min(1).max(200),
        price: zod_1.z.number().positive(),
        category: zod_1.z.string().min(1),
        description: zod_1.z.string().optional(),
        inStock: zod_1.z.boolean().default(true)
    }),
    // Parcel validation
    parcelSchema: zod_1.z.object({
        id: zod_1.z.string().uuid(),
        name: zod_1.z.string().min(1).max(100),
        location: zod_1.z.string().min(1),
        size: zod_1.z.number().positive(),
        type: zod_1.z.enum(['agricultural', 'residential', 'commercial']),
        coordinates: zod_1.z.object({
            lat: zod_1.z.number().min(-90).max(90),
            lng: zod_1.z.number().min(-180).max(180)
        }).optional()
    }),
    // Market analysis validation
    marketAnalysisSchema: zod_1.z.object({
        id: zod_1.z.string().uuid(),
        productId: zod_1.z.string().uuid(),
        platform: zod_1.z.enum(['vinted', 'leboncoin', 'facebook']),
        query: zod_1.z.string().min(1),
        filters: zod_1.z.object({
            priceMin: zod_1.z.number().min(0).optional(),
            priceMax: zod_1.z.number().min(0).optional(),
            condition: zod_1.z.enum(['new', 'very_good', 'good', 'satisfactory']).optional(),
            brand: zod_1.z.string().optional()
        }).optional(),
        results: zod_1.z.array(zod_1.z.object({
            title: zod_1.z.string(),
            price: zod_1.z.number(),
            condition: zod_1.z.string(),
            url: zod_1.z.string().url(),
            imageUrl: zod_1.z.string().url().optional()
        })).optional()
    }),
    // API response validation
    apiResponseSchema: zod_1.z.object({
        success: zod_1.z.boolean(),
        data: zod_1.z.any().optional(),
        error: zod_1.z.object({
            code: zod_1.z.string(),
            message: zod_1.z.string(),
            details: zod_1.z.any().optional()
        }).optional(),
        meta: zod_1.z.object({
            timestamp: zod_1.z.string().datetime(),
            requestId: zod_1.z.string().uuid(),
            version: zod_1.z.string()
        }).optional()
    })
};
(0, vitest_1.describe)('Validation Schemas', () => {
    (0, vitest_1.describe)('userSchema', () => {
        (0, vitest_1.it)('should validate valid user data', () => {
            const validUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: 'test@example.com',
                name: 'John Doe',
                age: 30
            };
            const result = mockValidationSchemas.userSchema.safeParse(validUser);
            (0, vitest_1.expect)(result.success).toBe(true);
            if (result.success) {
                (0, vitest_1.expect)(result.data).toEqual(validUser);
            }
        });
        (0, vitest_1.it)('should reject invalid email', () => {
            const invalidUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: 'invalid-email',
                name: 'John Doe'
            };
            const result = mockValidationSchemas.userSchema.safeParse(invalidUser);
            (0, vitest_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, vitest_1.expect)(result.error.issues).toHaveLength(1);
                (0, vitest_1.expect)(result.error.issues[0].path).toEqual(['email']);
            }
        });
        (0, vitest_1.it)('should reject invalid UUID', () => {
            const invalidUser = {
                id: 'not-a-uuid',
                email: 'test@example.com',
                name: 'John Doe'
            };
            const result = mockValidationSchemas.userSchema.safeParse(invalidUser);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should reject empty name', () => {
            const invalidUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: 'test@example.com',
                name: ''
            };
            const result = mockValidationSchemas.userSchema.safeParse(invalidUser);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should reject negative age', () => {
            const invalidUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: 'test@example.com',
                name: 'John Doe',
                age: -5
            };
            const result = mockValidationSchemas.userSchema.safeParse(invalidUser);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should accept optional fields', () => {
            const minimalUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: 'test@example.com',
                name: 'John Doe'
            };
            const result = mockValidationSchemas.userSchema.safeParse(minimalUser);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
    });
    (0, vitest_1.describe)('productSchema', () => {
        (0, vitest_1.it)('should validate valid product data', () => {
            const validProduct = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Test Product',
                price: 29.99,
                category: 'Electronics',
                description: 'A great product',
                inStock: true
            };
            const result = mockValidationSchemas.productSchema.safeParse(validProduct);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
        (0, vitest_1.it)('should reject negative price', () => {
            const invalidProduct = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Test Product',
                price: -10,
                category: 'Electronics'
            };
            const result = mockValidationSchemas.productSchema.safeParse(invalidProduct);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should reject zero price', () => {
            const invalidProduct = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Test Product',
                price: 0,
                category: 'Electronics'
            };
            const result = mockValidationSchemas.productSchema.safeParse(invalidProduct);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should use default value for inStock', () => {
            const product = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Test Product',
                price: 29.99,
                category: 'Electronics'
            };
            const result = mockValidationSchemas.productSchema.safeParse(product);
            (0, vitest_1.expect)(result.success).toBe(true);
            if (result.success) {
                (0, vitest_1.expect)(result.data.inStock).toBe(true);
            }
        });
    });
    (0, vitest_1.describe)('parcelSchema', () => {
        (0, vitest_1.it)('should validate valid parcel data', () => {
            const validParcel = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Farm Plot A',
                location: 'Rural Area, County',
                size: 1000.5,
                type: 'agricultural',
                coordinates: {
                    lat: 45.5231,
                    lng: -122.6765
                }
            };
            const result = mockValidationSchemas.parcelSchema.safeParse(validParcel);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
        (0, vitest_1.it)('should reject invalid parcel type', () => {
            const invalidParcel = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Farm Plot A',
                location: 'Rural Area, County',
                size: 1000.5,
                type: 'invalid-type'
            };
            const result = mockValidationSchemas.parcelSchema.safeParse(invalidParcel);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should reject invalid coordinates', () => {
            const invalidParcel = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Farm Plot A',
                location: 'Rural Area, County',
                size: 1000.5,
                type: 'agricultural',
                coordinates: {
                    lat: 95, // Invalid latitude
                    lng: -122.6765
                }
            };
            const result = mockValidationSchemas.parcelSchema.safeParse(invalidParcel);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should accept parcel without coordinates', () => {
            const parcel = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                name: 'Farm Plot A',
                location: 'Rural Area, County',
                size: 1000.5,
                type: 'agricultural'
            };
            const result = mockValidationSchemas.parcelSchema.safeParse(parcel);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
    });
    (0, vitest_1.describe)('marketAnalysisSchema', () => {
        (0, vitest_1.it)('should validate valid market analysis data', () => {
            const validAnalysis = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                productId: '456e7890-e89b-12d3-a456-426614174000',
                platform: 'vinted',
                query: 'vintage jacket',
                filters: {
                    priceMin: 10,
                    priceMax: 100,
                    condition: 'good',
                    brand: 'Nike'
                },
                results: [
                    {
                        title: 'Vintage Nike Jacket',
                        price: 45.99,
                        condition: 'good',
                        url: 'https://example.com/item/1',
                        imageUrl: 'https://example.com/image/1.jpg'
                    }
                ]
            };
            const result = mockValidationSchemas.marketAnalysisSchema.safeParse(validAnalysis);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
        (0, vitest_1.it)('should reject invalid platform', () => {
            const invalidAnalysis = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                productId: '456e7890-e89b-12d3-a456-426614174000',
                platform: 'invalid-platform',
                query: 'vintage jacket'
            };
            const result = mockValidationSchemas.marketAnalysisSchema.safeParse(invalidAnalysis);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
        (0, vitest_1.it)('should reject invalid URL in results', () => {
            const invalidAnalysis = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                productId: '456e7890-e89b-12d3-a456-426614174000',
                platform: 'vinted',
                query: 'vintage jacket',
                results: [
                    {
                        title: 'Vintage Nike Jacket',
                        price: 45.99,
                        condition: 'good',
                        url: 'not-a-valid-url'
                    }
                ]
            };
            const result = mockValidationSchemas.marketAnalysisSchema.safeParse(invalidAnalysis);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
    });
    (0, vitest_1.describe)('apiResponseSchema', () => {
        (0, vitest_1.it)('should validate successful API response', () => {
            const successResponse = {
                success: true,
                data: { id: 1, name: 'Test' },
                meta: {
                    timestamp: '2024-01-01T12:00:00Z',
                    requestId: '123e4567-e89b-12d3-a456-426614174000',
                    version: '1.0.0'
                }
            };
            const result = mockValidationSchemas.apiResponseSchema.safeParse(successResponse);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
        (0, vitest_1.it)('should validate error API response', () => {
            const errorResponse = {
                success: false,
                error: {
                    code: 'VALIDATION_ERROR',
                    message: 'Invalid input data',
                    details: { field: 'email', reason: 'invalid format' }
                }
            };
            const result = mockValidationSchemas.apiResponseSchema.safeParse(errorResponse);
            (0, vitest_1.expect)(result.success).toBe(true);
        });
        (0, vitest_1.it)('should reject invalid datetime format', () => {
            const invalidResponse = {
                success: true,
                meta: {
                    timestamp: 'invalid-datetime',
                    requestId: '123e4567-e89b-12d3-a456-426614174000',
                    version: '1.0.0'
                }
            };
            const result = mockValidationSchemas.apiResponseSchema.safeParse(invalidResponse);
            (0, vitest_1.expect)(result.success).toBe(false);
        });
    });
});
(0, vitest_1.describe)('Validation Utilities', () => {
    (0, vitest_1.describe)('Custom validation functions', () => {
        (0, vitest_1.it)('should validate email format', () => {
            const emailSchema = zod_1.z.string().email();
            (0, vitest_1.expect)(emailSchema.safeParse('test@example.com').success).toBe(true);
            (0, vitest_1.expect)(emailSchema.safeParse('user+tag@domain.co.uk').success).toBe(true);
            (0, vitest_1.expect)(emailSchema.safeParse('invalid-email').success).toBe(false);
            (0, vitest_1.expect)(emailSchema.safeParse('').success).toBe(false);
        });
        (0, vitest_1.it)('should validate UUID format', () => {
            const uuidSchema = zod_1.z.string().uuid();
            (0, vitest_1.expect)(uuidSchema.safeParse('123e4567-e89b-12d3-a456-426614174000').success).toBe(true);
            (0, vitest_1.expect)(uuidSchema.safeParse('not-a-uuid').success).toBe(false);
            (0, vitest_1.expect)(uuidSchema.safeParse('').success).toBe(false);
        });
        (0, vitest_1.it)('should validate URL format', () => {
            const urlSchema = zod_1.z.string().url();
            (0, vitest_1.expect)(urlSchema.safeParse('https://example.com').success).toBe(true);
            (0, vitest_1.expect)(urlSchema.safeParse('http://localhost:3000/api').success).toBe(true);
            (0, vitest_1.expect)(urlSchema.safeParse('ftp://files.example.com').success).toBe(true);
            (0, vitest_1.expect)(urlSchema.safeParse('not-a-url').success).toBe(false);
            (0, vitest_1.expect)(urlSchema.safeParse('').success).toBe(false);
        });
        (0, vitest_1.it)('should validate datetime format', () => {
            const datetimeSchema = zod_1.z.string().datetime();
            (0, vitest_1.expect)(datetimeSchema.safeParse('2024-01-01T12:00:00Z').success).toBe(true);
            (0, vitest_1.expect)(datetimeSchema.safeParse('2024-01-01T12:00:00.000Z').success).toBe(true);
            (0, vitest_1.expect)(datetimeSchema.safeParse('2024-01-01T12:00:00+02:00').success).toBe(true);
            (0, vitest_1.expect)(datetimeSchema.safeParse('2024-01-01 12:00:00').success).toBe(false);
            (0, vitest_1.expect)(datetimeSchema.safeParse('invalid-datetime').success).toBe(false);
        });
    });
    (0, vitest_1.describe)('Schema composition', () => {
        (0, vitest_1.it)('should compose schemas correctly', () => {
            const baseSchema = zod_1.z.object({
                id: zod_1.z.string().uuid(),
                createdAt: zod_1.z.string().datetime()
            });
            const extendedSchema = baseSchema.extend({
                name: zod_1.z.string().min(1),
                email: zod_1.z.string().email()
            });
            const validData = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                createdAt: '2024-01-01T12:00:00Z',
                name: 'John Doe',
                email: 'john@example.com'
            };
            (0, vitest_1.expect)(extendedSchema.safeParse(validData).success).toBe(true);
        });
        (0, vitest_1.it)('should handle optional fields in composition', () => {
            const baseSchema = zod_1.z.object({
                id: zod_1.z.string().uuid()
            });
            const extendedSchema = baseSchema.extend({
                name: zod_1.z.string().optional(),
                email: zod_1.z.string().email().optional()
            });
            const minimalData = {
                id: '123e4567-e89b-12d3-a456-426614174000'
            };
            (0, vitest_1.expect)(extendedSchema.safeParse(minimalData).success).toBe(true);
        });
    });
    (0, vitest_1.describe)('Error handling', () => {
        (0, vitest_1.it)('should provide detailed error information', () => {
            const schema = zod_1.z.object({
                email: zod_1.z.string().email(),
                age: zod_1.z.number().min(0).max(150)
            });
            const invalidData = {
                email: 'invalid-email',
                age: -5
            };
            const result = schema.safeParse(invalidData);
            (0, vitest_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, vitest_1.expect)(result.error.issues).toHaveLength(2);
                (0, vitest_1.expect)(result.error.issues.some(issue => issue.path.includes('email'))).toBe(true);
                (0, vitest_1.expect)(result.error.issues.some(issue => issue.path.includes('age'))).toBe(true);
            }
        });
        (0, vitest_1.it)('should handle nested object validation errors', () => {
            const schema = zod_1.z.object({
                user: zod_1.z.object({
                    email: zod_1.z.string().email(),
                    profile: zod_1.z.object({
                        age: zod_1.z.number().min(0)
                    })
                })
            });
            const invalidData = {
                user: {
                    email: 'invalid-email',
                    profile: {
                        age: -5
                    }
                }
            };
            const result = schema.safeParse(invalidData);
            (0, vitest_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, vitest_1.expect)(result.error.issues).toHaveLength(2);
                (0, vitest_1.expect)(result.error.issues.some(issue => issue.path.includes('user') && issue.path.includes('email'))).toBe(true);
                (0, vitest_1.expect)(result.error.issues.some(issue => issue.path.includes('profile') && issue.path.includes('age'))).toBe(true);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,