159127341412d22b696f5a6c3bfe556a
"use strict";
/**
 * Specialized Loggers Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const specialized_loggers_1 = require("../specialized-loggers");
// Mock the logger module
vitest_1.vi.mock('../logger', () => ({
    getLogger: vitest_1.vi.fn((context) => ({
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        info: vitest_1.vi.fn(),
        http: vitest_1.vi.fn(),
        verbose: vitest_1.vi.fn(),
        debug: vitest_1.vi.fn(),
        silly: vitest_1.vi.fn(),
        performance: vitest_1.vi.fn(),
        request: vitest_1.vi.fn(),
        database: vitest_1.vi.fn(),
        userAction: vitest_1.vi.fn()
    }))
}));
(0, vitest_1.describe)('Specialized Loggers', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.describe)('Pre-configured loggers', () => {
        (0, vitest_1.it)('should provide database logger', () => {
            (0, vitest_1.expect)(specialized_loggers_1.databaseLogger).toBeDefined();
            (0, vitest_1.expect)(typeof specialized_loggers_1.databaseLogger.info).toBe('function');
        });
        (0, vitest_1.it)('should provide API logger', () => {
            (0, vitest_1.expect)(specialized_loggers_1.apiLogger).toBeDefined();
            (0, vitest_1.expect)(typeof specialized_loggers_1.apiLogger.info).toBe('function');
        });
        (0, vitest_1.it)('should provide auth logger', () => {
            (0, vitest_1.expect)(specialized_loggers_1.authLogger).toBeDefined();
            (0, vitest_1.expect)(typeof specialized_loggers_1.authLogger.info).toBe('function');
        });
    });
    (0, vitest_1.describe)('createRequestLogger', () => {
        (0, vitest_1.it)('should create logger with request context', () => {
            const requestLogger = (0, specialized_loggers_1.createRequestLogger)('req-123', 'user-456');
            (0, vitest_1.expect)(requestLogger).toBeDefined();
            (0, vitest_1.expect)(typeof requestLogger.info).toBe('function');
        });
        (0, vitest_1.it)('should include request context in log calls', () => {
            const requestLogger = (0, specialized_loggers_1.createRequestLogger)('req-123', 'user-456');
            requestLogger.info('Test message', { extra: 'data' });
            // The underlying logger should be called with context
            (0, vitest_1.expect)(requestLogger).toBeDefined();
        });
    });
    (0, vitest_1.describe)('PerformanceTimer', () => {
        (0, vitest_1.beforeEach)(() => {
            vitest_1.vi.useFakeTimers();
        });
        (0, vitest_1.afterEach)(() => {
            vitest_1.vi.useRealTimers();
        });
        (0, vitest_1.it)('should measure operation duration', () => {
            const mockLogger = {
                performance: vitest_1.vi.fn(),
                error: vitest_1.vi.fn()
            };
            const timer = new specialized_loggers_1.PerformanceTimer('TEST_OPERATION', mockLogger);
            // Advance time by 1000ms
            vitest_1.vi.advanceTimersByTime(1000);
            const duration = timer.end();
            (0, vitest_1.expect)(duration).toBe(1000);
            (0, vitest_1.expect)(mockLogger.performance).toHaveBeenCalledWith('TEST_OPERATION', 1000, {});
        });
        (0, vitest_1.it)('should end with result', () => {
            const mockLogger = {
                performance: vitest_1.vi.fn(),
                error: vitest_1.vi.fn()
            };
            const timer = new specialized_loggers_1.PerformanceTimer('TEST_OPERATION', mockLogger);
            vitest_1.vi.advanceTimersByTime(500);
            const result = timer.endWithResult('test-result', { extra: 'metadata' });
            (0, vitest_1.expect)(result).toBe('test-result');
            (0, vitest_1.expect)(mockLogger.performance).toHaveBeenCalledWith('TEST_OPERATION', 500, {
                success: true,
                resultType: 'string',
                extra: 'metadata'
            });
        });
        (0, vitest_1.it)('should end with error', () => {
            const mockLogger = {
                performance: vitest_1.vi.fn(),
                error: vitest_1.vi.fn()
            };
            const timer = new specialized_loggers_1.PerformanceTimer('TEST_OPERATION', mockLogger);
            const error = new Error('Test error');
            vitest_1.vi.advanceTimersByTime(750);
            (0, vitest_1.expect)(() => timer.endWithError(error)).toThrow('Test error');
            (0, vitest_1.expect)(mockLogger.error).toHaveBeenCalledWith('TEST_OPERATION failed', error, vitest_1.expect.objectContaining({
                duration: 750,
                success: false
            }));
        });
    });
    (0, vitest_1.describe)('DatabaseQueryLogger', () => {
        (0, vitest_1.it)('should log database queries', () => {
            const mockLogger = {
                database: vitest_1.vi.fn()
            };
            const dbLogger = new specialized_loggers_1.DatabaseQueryLogger(mockLogger);
            dbLogger.logQuery('SELECT * FROM users', ['param1'], 150, { table: 'users' });
            (0, vitest_1.expect)(mockLogger.database).toHaveBeenCalledWith('SELECT * FROM users', 150, {
                params: ['param1'],
                paramCount: 1,
                table: 'users'
            });
        });
        (0, vitest_1.it)('should limit parameters for security', () => {
            const mockLogger = {
                database: vitest_1.vi.fn()
            };
            const dbLogger = new specialized_loggers_1.DatabaseQueryLogger(mockLogger);
            const manyParams = Array.from({ length: 15 }, (_, i) => `param${i}`);
            dbLogger.logQuery('SELECT * FROM users WHERE id IN (?)', manyParams, 200);
            (0, vitest_1.expect)(mockLogger.database).toHaveBeenCalledWith('SELECT * FROM users WHERE id IN (?)', 200, {
                params: manyParams.slice(0, 10),
                paramCount: 15
            });
        });
        (0, vitest_1.it)('should log transactions', () => {
            const mockLogger = {
                performance: vitest_1.vi.fn()
            };
            const dbLogger = new specialized_loggers_1.DatabaseQueryLogger(mockLogger);
            dbLogger.logTransaction('USER_UPDATE', 300, { userId: '123' });
            (0, vitest_1.expect)(mockLogger.performance).toHaveBeenCalledWith('DB_TRANSACTION_USER_UPDATE', 300, {
                type: 'database_transaction',
                userId: '123'
            });
        });
        (0, vitest_1.it)('should log connection events', () => {
            const mockLogger = {
                info: vitest_1.vi.fn(),
                error: vitest_1.vi.fn()
            };
            const dbLogger = new specialized_loggers_1.DatabaseQueryLogger(mockLogger);
            dbLogger.logConnection('connect', { host: 'localhost' });
            (0, vitest_1.expect)(mockLogger.info).toHaveBeenCalledWith('Database connection connect', { host: 'localhost' });
            dbLogger.logConnection('error', { error: 'Connection failed' });
            (0, vitest_1.expect)(mockLogger.error).toHaveBeenCalledWith('Database connection error', undefined, { error: 'Connection failed' });
        });
    });
    (0, vitest_1.describe)('ApiRequestLogger', () => {
        (0, vitest_1.it)('should log API requests', () => {
            const mockLogger = {
                http: vitest_1.vi.fn()
            };
            const apiLogger = new specialized_loggers_1.ApiRequestLogger(mockLogger);
            apiLogger.logRequest('GET', '/api/users', { 'user-agent': 'test' }, { query: 'test' });
            (0, vitest_1.expect)(mockLogger.http).toHaveBeenCalledWith('GET /api/users', {
                method: 'GET',
                url: '/api/users',
                headers: { 'user-agent': 'test' },
                bodySize: vitest_1.expect.any(Number),
                type: 'api_request'
            });
        });
        (0, vitest_1.it)('should sanitize sensitive headers', () => {
            const mockLogger = {
                http: vitest_1.vi.fn()
            };
            const apiLogger = new specialized_loggers_1.ApiRequestLogger(mockLogger);
            apiLogger.logRequest('POST', '/api/login', {
                'authorization': 'Bearer secret-token',
                'cookie': 'session=secret',
                'content-type': 'application/json'
            });
            (0, vitest_1.expect)(mockLogger.http).toHaveBeenCalledWith('POST /api/login', {
                method: 'POST',
                url: '/api/login',
                headers: {
                    'authorization': '[REDACTED]',
                    'cookie': '[REDACTED]',
                    'content-type': 'application/json'
                },
                bodySize: 0,
                type: 'api_request'
            });
        });
        (0, vitest_1.it)('should log API responses', () => {
            const mockLogger = {
                request: vitest_1.vi.fn()
            };
            const apiLogger = new specialized_loggers_1.ApiRequestLogger(mockLogger);
            apiLogger.logResponse('GET', '/api/users', 200, 150, 1024);
            (0, vitest_1.expect)(mockLogger.request).toHaveBeenCalledWith('GET', '/api/users', 200, 150, {
                responseSize: 1024,
                type: 'api_response'
            });
        });
        (0, vitest_1.it)('should log API errors', () => {
            const mockLogger = {
                error: vitest_1.vi.fn()
            };
            const apiLogger = new specialized_loggers_1.ApiRequestLogger(mockLogger);
            const error = new Error('API Error');
            apiLogger.logError('POST', '/api/users', error, 500);
            (0, vitest_1.expect)(mockLogger.error).toHaveBeenCalledWith('POST /api/users failed', error, {
                method: 'POST',
                url: '/api/users',
                duration: 500,
                type: 'api_error'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,