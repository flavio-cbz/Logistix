{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\utils\\logging\\__tests__\\specialized-loggers.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\utils\\logging\\__tests__\\specialized-loggers.test.ts"],"sourcesContent":["/**\r\n * Specialized Loggers Tests\r\n */\r\n\r\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\r\nimport {\r\n  databaseLogger,\r\n  apiLogger,\r\n  authLogger,\r\n  createRequestLogger,\r\n  PerformanceTimer,\r\n  DatabaseQueryLogger,\r\n  ApiRequestLogger\r\n} from '../specialized-loggers';\r\n\r\n// Mock the logger module\r\nvi.mock('../logger', () => ({\r\n  getLogger: vi.fn((context: string) => ({\r\n    error: vi.fn(),\r\n    warn: vi.fn(),\r\n    info: vi.fn(),\r\n    http: vi.fn(),\r\n    verbose: vi.fn(),\r\n    debug: vi.fn(),\r\n    silly: vi.fn(),\r\n    performance: vi.fn(),\r\n    request: vi.fn(),\r\n    database: vi.fn(),\r\n    userAction: vi.fn()\r\n  }))\r\n}));\r\n\r\ndescribe('Specialized Loggers', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('Pre-configured loggers', () => {\r\n    it('should provide database logger', () => {\r\n      expect(databaseLogger).toBeDefined();\r\n      expect(typeof databaseLogger.info).toBe('function');\r\n    });\r\n\r\n    it('should provide API logger', () => {\r\n      expect(apiLogger).toBeDefined();\r\n      expect(typeof apiLogger.info).toBe('function');\r\n    });\r\n\r\n    it('should provide auth logger', () => {\r\n      expect(authLogger).toBeDefined();\r\n      expect(typeof authLogger.info).toBe('function');\r\n    });\r\n  });\r\n\r\n  describe('createRequestLogger', () => {\r\n    it('should create logger with request context', () => {\r\n      const requestLogger = createRequestLogger('req-123', 'user-456');\r\n      \r\n      expect(requestLogger).toBeDefined();\r\n      expect(typeof requestLogger.info).toBe('function');\r\n    });\r\n\r\n    it('should include request context in log calls', () => {\r\n      const requestLogger = createRequestLogger('req-123', 'user-456');\r\n      \r\n      requestLogger.info('Test message', { extra: 'data' });\r\n      \r\n      // The underlying logger should be called with context\r\n      expect(requestLogger).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('PerformanceTimer', () => {\r\n    beforeEach(() => {\r\n      vi.useFakeTimers();\r\n    });\r\n\r\n    afterEach(() => {\r\n      vi.useRealTimers();\r\n    });\r\n\r\n    it('should measure operation duration', () => {\r\n      const mockLogger = {\r\n        performance: vi.fn(),\r\n        error: vi.fn()\r\n      } as any;\r\n\r\n      const timer = new PerformanceTimer('TEST_OPERATION', mockLogger);\r\n      \r\n      // Advance time by 1000ms\r\n      vi.advanceTimersByTime(1000);\r\n      \r\n      const duration = timer.end();\r\n      \r\n      expect(duration).toBe(1000);\r\n      expect(mockLogger.performance).toHaveBeenCalledWith('TEST_OPERATION', 1000, {});\r\n    });\r\n\r\n    it('should end with result', () => {\r\n      const mockLogger = {\r\n        performance: vi.fn(),\r\n        error: vi.fn()\r\n      } as any;\r\n\r\n      const timer = new PerformanceTimer('TEST_OPERATION', mockLogger);\r\n      \r\n      vi.advanceTimersByTime(500);\r\n      \r\n      const result = timer.endWithResult('test-result', { extra: 'metadata' });\r\n      \r\n      expect(result).toBe('test-result');\r\n      expect(mockLogger.performance).toHaveBeenCalledWith('TEST_OPERATION', 500, {\r\n        success: true,\r\n        resultType: 'string',\r\n        extra: 'metadata'\r\n      });\r\n    });\r\n\r\n    it('should end with error', () => {\r\n      const mockLogger = {\r\n        performance: vi.fn(),\r\n        error: vi.fn()\r\n      } as any;\r\n\r\n      const timer = new PerformanceTimer('TEST_OPERATION', mockLogger);\r\n      const error = new Error('Test error');\r\n      \r\n      vi.advanceTimersByTime(750);\r\n      \r\n      expect(() => timer.endWithError(error)).toThrow('Test error');\r\n      expect(mockLogger.error).toHaveBeenCalledWith(\r\n        'TEST_OPERATION failed',\r\n        error,\r\n        expect.objectContaining({\r\n          duration: 750,\r\n          success: false\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('DatabaseQueryLogger', () => {\r\n    it('should log database queries', () => {\r\n      const mockLogger = {\r\n        database: vi.fn()\r\n      } as any;\r\n\r\n      const dbLogger = new DatabaseQueryLogger(mockLogger);\r\n      \r\n      dbLogger.logQuery('SELECT * FROM users', ['param1'], 150, { table: 'users' });\r\n      \r\n      expect(mockLogger.database).toHaveBeenCalledWith('SELECT * FROM users', 150, {\r\n        params: ['param1'],\r\n        paramCount: 1,\r\n        table: 'users'\r\n      });\r\n    });\r\n\r\n    it('should limit parameters for security', () => {\r\n      const mockLogger = {\r\n        database: vi.fn()\r\n      } as any;\r\n\r\n      const dbLogger = new DatabaseQueryLogger(mockLogger);\r\n      const manyParams = Array.from({ length: 15 }, (_, i) => `param${i}`);\r\n      \r\n      dbLogger.logQuery('SELECT * FROM users WHERE id IN (?)', manyParams, 200);\r\n      \r\n      expect(mockLogger.database).toHaveBeenCalledWith(\r\n        'SELECT * FROM users WHERE id IN (?)',\r\n        200,\r\n        {\r\n          params: manyParams.slice(0, 10),\r\n          paramCount: 15\r\n        }\r\n      );\r\n    });\r\n\r\n    it('should log transactions', () => {\r\n      const mockLogger = {\r\n        performance: vi.fn()\r\n      } as any;\r\n\r\n      const dbLogger = new DatabaseQueryLogger(mockLogger);\r\n      \r\n      dbLogger.logTransaction('USER_UPDATE', 300, { userId: '123' });\r\n      \r\n      expect(mockLogger.performance).toHaveBeenCalledWith('DB_TRANSACTION_USER_UPDATE', 300, {\r\n        type: 'database_transaction',\r\n        userId: '123'\r\n      });\r\n    });\r\n\r\n    it('should log connection events', () => {\r\n      const mockLogger = {\r\n        info: vi.fn(),\r\n        error: vi.fn()\r\n      } as any;\r\n\r\n      const dbLogger = new DatabaseQueryLogger(mockLogger);\r\n      \r\n      dbLogger.logConnection('connect', { host: 'localhost' });\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Database connection connect', { host: 'localhost' });\r\n      \r\n      dbLogger.logConnection('error', { error: 'Connection failed' });\r\n      expect(mockLogger.error).toHaveBeenCalledWith('Database connection error', undefined, { error: 'Connection failed' });\r\n    });\r\n  });\r\n\r\n  describe('ApiRequestLogger', () => {\r\n    it('should log API requests', () => {\r\n      const mockLogger = {\r\n        http: vi.fn()\r\n      } as any;\r\n\r\n      const apiLogger = new ApiRequestLogger(mockLogger);\r\n      \r\n      apiLogger.logRequest('GET', '/api/users', { 'user-agent': 'test' }, { query: 'test' });\r\n      \r\n      expect(mockLogger.http).toHaveBeenCalledWith('GET /api/users', {\r\n        method: 'GET',\r\n        url: '/api/users',\r\n        headers: { 'user-agent': 'test' },\r\n        bodySize: expect.any(Number),\r\n        type: 'api_request'\r\n      });\r\n    });\r\n\r\n    it('should sanitize sensitive headers', () => {\r\n      const mockLogger = {\r\n        http: vi.fn()\r\n      } as any;\r\n\r\n      const apiLogger = new ApiRequestLogger(mockLogger);\r\n      \r\n      apiLogger.logRequest('POST', '/api/login', {\r\n        'authorization': 'Bearer secret-token',\r\n        'cookie': 'session=secret',\r\n        'content-type': 'application/json'\r\n      });\r\n      \r\n      expect(mockLogger.http).toHaveBeenCalledWith('POST /api/login', {\r\n        method: 'POST',\r\n        url: '/api/login',\r\n        headers: {\r\n          'authorization': '[REDACTED]',\r\n          'cookie': '[REDACTED]',\r\n          'content-type': 'application/json'\r\n        },\r\n        bodySize: 0,\r\n        type: 'api_request'\r\n      });\r\n    });\r\n\r\n    it('should log API responses', () => {\r\n      const mockLogger = {\r\n        request: vi.fn()\r\n      } as any;\r\n\r\n      const apiLogger = new ApiRequestLogger(mockLogger);\r\n      \r\n      apiLogger.logResponse('GET', '/api/users', 200, 150, 1024);\r\n      \r\n      expect(mockLogger.request).toHaveBeenCalledWith('GET', '/api/users', 200, 150, {\r\n        responseSize: 1024,\r\n        type: 'api_response'\r\n      });\r\n    });\r\n\r\n    it('should log API errors', () => {\r\n      const mockLogger = {\r\n        error: vi.fn()\r\n      } as any;\r\n\r\n      const apiLogger = new ApiRequestLogger(mockLogger);\r\n      const error = new Error('API Error');\r\n      \r\n      apiLogger.logError('POST', '/api/users', error, 500);\r\n      \r\n      expect(mockLogger.error).toHaveBeenCalledWith('POST /api/users failed', error, {\r\n        method: 'POST',\r\n        url: '/api/users',\r\n        duration: 500,\r\n        type: 'api_error'\r\n      });\r\n    });\r\n  });\r\n});"],"version":3}