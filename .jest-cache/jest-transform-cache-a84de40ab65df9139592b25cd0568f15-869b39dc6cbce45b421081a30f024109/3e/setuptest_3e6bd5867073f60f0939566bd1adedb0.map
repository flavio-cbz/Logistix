{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\setup.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\setup.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, afterEach } from '@jest/globals'\r\nimport { \r\n  createMockRequest, \r\n  createMockResponse, \r\n  createMockDatabase,\r\n  DatabaseTestUtils,\r\n  ServiceTestUtils\r\n} from './setup'\r\n\r\ndescribe('Backend Test Setup', () => {\r\n  describe('Mock Utilities', () => {\r\n    test('should create mock request', () => {\r\n      const req = createMockRequest({ method: 'POST', url: '/api/test' })\r\n      \r\n      expect(req.method).toBe('POST')\r\n      expect(req.url).toBe('/api/test')\r\n      expect(req.headers).toBeDefined()\r\n      expect(req.query).toBeDefined()\r\n    })\r\n\r\n    test('should create mock response', () => {\r\n      const res = createMockResponse()\r\n      \r\n      expect(res.status).toBeDefined()\r\n      expect(res.json).toBeDefined()\r\n      expect(res.send).toBeDefined()\r\n      expect(res.setHeader).toBeDefined()\r\n    })\r\n\r\n    test('should create mock database', () => {\r\n      const db = createMockDatabase()\r\n      \r\n      expect(db.prepare).toBeDefined()\r\n      expect(db.exec).toBeDefined()\r\n      expect(db.close).toBeDefined()\r\n      expect(db.transaction).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('Database Test Utils', () => {\r\n    test('should create in-memory database', () => {\r\n      const db = DatabaseTestUtils.createInMemoryDatabase()\r\n      expect(db).toBeDefined()\r\n      db.close()\r\n    })\r\n\r\n    test('should initialize test schema', async () => {\r\n      const db = DatabaseTestUtils.createInMemoryDatabase()\r\n      \r\n      await DatabaseTestUtils.initializeTestSchema(db)\r\n      \r\n      // Verify tables exist\r\n      const tables = db.prepare(`\r\n        SELECT name FROM sqlite_master \r\n        WHERE type='table' AND name NOT LIKE 'sqlite_%'\r\n      `).all()\r\n      \r\n      const tableNames = tables.map((t: any) => t.name)\r\n      expect(tableNames).toContain('users')\r\n      expect(tableNames).toContain('parcelles')\r\n      expect(tableNames).toContain('products')\r\n      expect(tableNames).toContain('sessions')\r\n      \r\n      db.close()\r\n    })\r\n\r\n    test('should seed test data', async () => {\r\n      const db = DatabaseTestUtils.createInMemoryDatabase()\r\n      await DatabaseTestUtils.initializeTestSchema(db)\r\n      \r\n      const seededData = await DatabaseTestUtils.seedTestData(db)\r\n      \r\n      expect(seededData.user).toBeDefined()\r\n      expect(seededData.parcelle).toBeDefined()\r\n      expect(seededData.product).toBeDefined()\r\n      expect(seededData.session).toBeDefined()\r\n      \r\n      // Verify data was inserted\r\n      const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get()\r\n      expect(userCount.count).toBeGreaterThan(0)\r\n      \r\n      db.close()\r\n    })\r\n\r\n    test('should clean database', async () => {\r\n      const db = DatabaseTestUtils.createInMemoryDatabase()\r\n      await DatabaseTestUtils.initializeTestSchema(db)\r\n      await DatabaseTestUtils.seedTestData(db)\r\n      \r\n      await DatabaseTestUtils.cleanDatabase(db)\r\n      \r\n      // Verify all tables are empty\r\n      const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get()\r\n      const parcelleCount = db.prepare('SELECT COUNT(*) as count FROM parcelles').get()\r\n      \r\n      expect(userCount.count).toBe(0)\r\n      expect(parcelleCount.count).toBe(0)\r\n      \r\n      db.close()\r\n    })\r\n  })\r\n\r\n  describe('Service Test Utils', () => {\r\n    test('should create mock logger', () => {\r\n      const logger = ServiceTestUtils.createMockLogger()\r\n      \r\n      expect(logger.info).toBeDefined()\r\n      expect(logger.error).toBeDefined()\r\n      expect(logger.warn).toBeDefined()\r\n      expect(logger.debug).toBeDefined()\r\n    })\r\n\r\n    test('should create mock auth service', () => {\r\n      const authService = ServiceTestUtils.createMockAuthService()\r\n      \r\n      expect(authService.validateCredentials).toBeDefined()\r\n      expect(authService.hashPassword).toBeDefined()\r\n      expect(authService.comparePassword).toBeDefined()\r\n      expect(authService.generateToken).toBeDefined()\r\n    })\r\n\r\n    test('should create mock database service', () => {\r\n      const dbService = ServiceTestUtils.createMockDatabaseService()\r\n      \r\n      expect(dbService.users).toBeDefined()\r\n      expect(dbService.parcelles).toBeDefined()\r\n      expect(dbService.products).toBeDefined()\r\n      expect(dbService.users.findById).toBeDefined()\r\n      expect(dbService.users.create).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('Environment Setup', () => {\r\n    test('should have test environment variables', () => {\r\n      expect(process.env.NODE_ENV).toBe('test')\r\n      expect(process.env.DATABASE_URL).toBe(':memory:')\r\n      expect(process.env.JWT_SECRET).toBe('test-jwt-secret')\r\n    })\r\n\r\n    test('should have mocked global functions', () => {\r\n      expect(global.fetch).toBeDefined()\r\n      expect(typeof global.fetch).toBe('function')\r\n    })\r\n  })\r\n\r\n  describe('Jest Configuration', () => {\r\n    test('should clear mocks between tests', () => {\r\n      const mockFn = jest.fn()\r\n      mockFn('test')\r\n      \r\n      expect(mockFn).toHaveBeenCalledWith('test')\r\n      \r\n      // This should be cleared by beforeEach\r\n      jest.clearAllMocks()\r\n      \r\n      expect(mockFn).not.toHaveBeenCalled()\r\n    })\r\n\r\n    test('should use fake timers', () => {\r\n      const callback = jest.fn()\r\n      \r\n      setTimeout(callback, 1000)\r\n      \r\n      // Fast-forward time\r\n      jest.advanceTimersByTime(1000)\r\n      \r\n      expect(callback).toHaveBeenCalled()\r\n    })\r\n  })\r\n})"],"version":3}