1b594a12865def2ee0a1c39421c3953d
"use strict";
/**
 * Audit Logger Service Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const audit_logger_1 = require("../audit-logger");
// Mock the logging utilities
vitest_1.vi.mock('@/lib/utils/logging', () => ({
    getLogger: vitest_1.vi.fn(() => ({
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        info: vitest_1.vi.fn(),
        userAction: vitest_1.vi.fn()
    })),
    securityLogger: {
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        info: vitest_1.vi.fn()
    },
    performanceLogger: {
        warn: vitest_1.vi.fn(),
        performance: vitest_1.vi.fn()
    }
}));
// Mock uuid
vitest_1.vi.mock('uuid', () => ({
    v4: vitest_1.vi.fn(() => 'test-uuid-123')
}));
(0, vitest_1.describe)('Audit Logger Service', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
        vitest_1.vi.useFakeTimers();
        vitest_1.vi.setSystemTime(new Date('2024-01-01T12:00:00Z'));
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.useRealTimers();
    });
    (0, vitest_1.describe)('logUserAction', () => {
        (0, vitest_1.it)('should log user action with full context', async () => {
            const action = {
                action: 'CREATE_PRODUCT',
                resource: 'product',
                resourceId: 'prod-123',
                details: { name: 'Test Product', price: 100 }
            };
            const context = {
                sessionId: 'session-123',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0',
                requestId: 'req-123'
            };
            await audit_logger_1.auditLogger.logUserAction('user-123', action, context);
            // Verify that the logger was called with correct parameters
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
        (0, vitest_1.it)('should handle missing context gracefully', async () => {
            const action = {
                action: 'VIEW_DASHBOARD',
                resource: 'dashboard'
            };
            await (0, vitest_1.expect)(audit_logger_1.auditLogger.logUserAction('user-123', action)).resolves.not.toThrow();
        });
    });
    (0, vitest_1.describe)('logFailedUserAction', () => {
        (0, vitest_1.it)('should log failed user action with error details', async () => {
            const action = {
                action: 'DELETE_PRODUCT',
                resource: 'product',
                resourceId: 'prod-123'
            };
            const error = new Error('Permission denied');
            const context = {
                sessionId: 'session-123',
                ip: '192.168.1.1'
            };
            await audit_logger_1.auditLogger.logFailedUserAction('user-123', action, error, context);
            // Verify error logging
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
        (0, vitest_1.it)('should handle undefined userId', async () => {
            const action = {
                action: 'UNAUTHORIZED_ACCESS',
                resource: 'admin'
            };
            const error = new Error('Access denied');
            await (0, vitest_1.expect)(audit_logger_1.auditLogger.logFailedUserAction(undefined, action, error)).resolves.not.toThrow();
        });
    });
    (0, vitest_1.describe)('logSecurityEvent', () => {
        (0, vitest_1.it)('should log security event with appropriate severity', async () => {
            const event = {
                type: 'failed_login',
                severity: 'medium',
                details: {
                    username: 'test@example.com',
                    attempts: 3,
                    lastAttempt: new Date().toISOString()
                }
            };
            const context = {
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0'
            };
            await audit_logger_1.auditLogger.logSecurityEvent(event, context);
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
        (0, vitest_1.it)('should handle critical security events', async () => {
            const event = {
                type: 'suspicious_activity',
                severity: 'critical',
                details: {
                    description: 'Multiple failed login attempts from different IPs',
                    ips: ['192.168.1.1', '10.0.0.1', '172.16.0.1'],
                    timeframe: '5 minutes'
                }
            };
            await audit_logger_1.auditLogger.logSecurityEvent(event, { userId: 'user-123' });
            // Should trigger security alert for critical events
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
    });
    (0, vitest_1.describe)('logPerformanceEvent', () => {
        (0, vitest_1.it)('should log slow operations', async () => {
            const event = {
                operation: 'DATABASE_QUERY',
                duration: 5000,
                threshold: 1000,
                metadata: {
                    query: 'SELECT * FROM large_table',
                    rows: 10000
                }
            };
            const context = {
                userId: 'user-123',
                requestId: 'req-123'
            };
            await audit_logger_1.auditLogger.logPerformanceEvent(event, context);
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
        (0, vitest_1.it)('should not log fast operations as warnings', async () => {
            const event = {
                operation: 'CACHE_GET',
                duration: 50,
                threshold: 1000
            };
            await audit_logger_1.auditLogger.logPerformanceEvent(event);
            // Should only log as performance metric, not as warning
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
    });
    (0, vitest_1.describe)('logSystemEvent', () => {
        (0, vitest_1.it)('should log successful system events', async () => {
            await audit_logger_1.auditLogger.logSystemEvent('DATABASE_BACKUP', {
                size: '1.2GB',
                duration: '5 minutes',
                location: '/backups/db_20240101.sql'
            });
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
        (0, vitest_1.it)('should log failed system events with errors', async () => {
            const error = new Error('Disk space insufficient');
            await audit_logger_1.auditLogger.logSystemEvent('DATABASE_BACKUP', { attemptedLocation: '/backups/' }, false, error);
            (0, vitest_1.expect)(audit_logger_1.auditLogger).toBeDefined();
        });
    });
    (0, vitest_1.describe)('getUserAuditTrail', () => {
        (0, vitest_1.it)('should return empty array for now', async () => {
            const trail = await audit_logger_1.auditLogger.getUserAuditTrail('user-123', {
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-02'),
                limit: 100
            });
            (0, vitest_1.expect)(trail).toEqual([]);
        });
    });
    (0, vitest_1.describe)('getSecurityEvents', () => {
        (0, vitest_1.it)('should return empty array for now', async () => {
            const events = await audit_logger_1.auditLogger.getSecurityEvents({
                severity: 'high',
                limit: 50
            });
            (0, vitest_1.expect)(events).toEqual([]);
        });
    });
});
(0, vitest_1.describe)('Audit Logger Convenience Functions', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.it)('should provide convenience function for user actions', async () => {
        const action = {
            action: 'LOGIN',
            resource: 'auth'
        };
        await (0, vitest_1.expect)((0, audit_logger_1.auditUserAction)('user-123', action)).resolves.not.toThrow();
    });
    (0, vitest_1.it)('should provide convenience function for security events', async () => {
        const event = {
            type: 'login',
            severity: 'low',
            details: { success: true }
        };
        await (0, vitest_1.expect)((0, audit_logger_1.auditSecurityEvent)(event)).resolves.not.toThrow();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,