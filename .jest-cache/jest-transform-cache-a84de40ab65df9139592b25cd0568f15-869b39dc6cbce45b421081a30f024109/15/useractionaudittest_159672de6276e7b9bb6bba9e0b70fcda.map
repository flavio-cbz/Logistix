{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\services\\__tests__\\user-action-audit.test.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,mCAAyE;AACzE,8DAA6F;AAC7F,gEAAqF;AACrF,sDAA8D;AAC9D,kDAA8C;AAE9C,+BAA+B;AAC/B,WAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,SAAS,EAAE,WAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACtB,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,OAAO,EAAE,WAAE,CAAC,EAAE,EAAE;QAChB,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,WAAW,EAAE,WAAE,CAAC,EAAE,EAAE;QACpB,OAAO,EAAE,WAAE,CAAC,EAAE,EAAE;QAChB,QAAQ,EAAE,WAAE,CAAC,EAAE,EAAE;QACjB,UAAU,EAAE,WAAE,CAAC,EAAE,EAAE;KACpB,CAAC,CAAC;IACH,iBAAiB,EAAE;QACjB,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,WAAW,EAAE,WAAE,CAAC,EAAE,EAAE;QACpB,UAAU,EAAE,WAAE,CAAC,EAAE,EAAE;KACpB;IACD,cAAc,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,UAAU,EAAE,WAAE,CAAC,EAAE,EAAE;KACpB;CACF,CAAC,CAAC,CAAC;AAEJ,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAA,mBAAU,EAAC,GAAG,EAAE;QACd,WAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,mCAAmC;QACnC,wCAAkB,CAAC,2BAA2B,EAAE,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAA,WAAE,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,QAAQ;gBACnB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,UAAU;gBACpB,UAAU,EAAE,YAAY;gBACxB,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,kBAAkB;gBACvB,UAAU,EAAE,GAAG;gBACf,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE;oBACR,WAAW,EAAE,cAAc;iBAC5B;aACF,CAAC;YAEF,MAAM,IAAA,kCAAa,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAEtC,2FAA2F;YAC3F,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAwB;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,QAAQ;gBACnB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,kBAAkB;gBACvB,UAAU,EAAE,GAAG;gBACf,QAAQ,EAAE,EAAE;gBACZ,OAAO,EAAE,KAAK;aACf,CAAC;YAEF,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAE7C,MAAM,IAAA,wCAAmB,EAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAEnD,sCAAsC;YACtC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAwB;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,OAAO,GAAG,qCAAgB,CAAC,sBAAsB,CACrD,SAAS,EACT;gBACE,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,EAAE,aAAa;gBACpD,GAAG,EAAE,IAAI,IAAI,EAAE;aAChB,CACF,CAAC;YAEF,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;YACpD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;YAChD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;YAChD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAA,WAAE,EAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,IAAA,6CAAuB,EAAC,gBAAgB,EAAE,GAAG,EAAE;gBAC7C,MAAM,EAAE,SAAS;gBACjB,QAAQ,EAAE;oBACR,aAAa,EAAE,gBAAgB;iBAChC;aACF,CAAC,CAAC;YAEH,6BAA6B;YAC7B,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAwB;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,wCAAkB,CAAC,gBAAgB,CACjC,MAAM,EACN,kBAAkB,EAClB,GAAG,EACH,GAAG,EACH;gBACE,YAAY,EAAE,IAAI;gBAClB,WAAW,EAAE,GAAG;gBAChB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,QAAQ;aACpB,CACF,CAAC;YAEF,mCAAmC;YACnC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,wBAAwB;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,OAAO,GAAG,wCAAkB,CAAC,qBAAqB,CACtD,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,EAAE,aAAa;YAC7C,IAAI,IAAI,EAAE,CACX,CAAC;YAEF,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAClD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YACjD,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAC7C,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,WAAW,GAAG,wCAAkB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAE7D,IAAA,eAAM,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAEpD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACvC,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC3C,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzC,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,iBAAiB,GAAG,wCAAkB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAEzE,IAAA,eAAM,EAAC,OAAO,iBAAiB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,2DAA2D;YAC3D,IAAA,eAAM,EAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAA,WAAE,EAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;YACtC,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,QAAQ;gBACnB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;aACzB,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,IAAA,2BAAU,EAAC,KAAK,EAAE,OAAO,EAAE;gBAC/C,SAAS,EAAE,gBAAgB;gBAC3B,cAAc,EAAE,MAAM;aACvB,CAAC,CAAC;YAEH,IAAA,eAAM,EAAC,OAAO,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,iEAAiE,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,kBAAkB;gBACvB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;aACzB,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,IAAA,8BAAa,EAAC,KAAK,EAAE,OAAO,EAAE;gBAClD,UAAU,EAAE,GAAG;aAChB,CAAC,CAAC;YAEH,IAAA,eAAM,EAAC,OAAO,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,iEAAiE,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,EAAE,aAAa,EAAE,GAAG,wDAAa,mBAAmB,GAAC,CAAC;YAC5D,MAAM,KAAK,GAAG,aAAa,CAAC,kBAAkB,CAAC;gBAC7C,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,EAAE,aAAa;gBACpD,GAAG,EAAE,IAAI,IAAI,EAAE;aAChB,CAAC,CAAC;YAEH,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC5C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC7C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YACjD,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC1C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;YAC9C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,WAAE,EAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,MAAM,GAAG;gBACb,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,UAAU;gBACpB,UAAU,EAAE,YAAY;gBACxB,OAAO,EAAE;oBACP,WAAW,EAAE,cAAc;oBAC3B,KAAK,EAAE,KAAK;iBACb;aACF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,SAAS,EAAE,YAAY;gBACvB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE,QAAQ;aACpB,CAAC;YAEF,wBAAwB;YACxB,MAAM,IAAA,eAAM,EAAC,0BAAW,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,KAAK,GAAG;gBACZ,IAAI,EAAE,cAAuB;gBAC7B,QAAQ,EAAE,QAAiB;gBAC3B,OAAO,EAAE;oBACP,MAAM,EAAE,kBAAkB;oBAC1B,QAAQ,EAAE,CAAC;iBACZ;aACF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,aAAa;gBACxB,SAAS,EAAE,QAAQ;aACpB,CAAC;YAEF,wBAAwB;YACxB,MAAM,IAAA,eAAM,EAAC,0BAAW,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACpF,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,KAAK,GAAG;gBACZ,SAAS,EAAE,gBAAgB;gBAC3B,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE;oBACR,KAAK,EAAE,wBAAwB;oBAC/B,KAAK,EAAE,UAAU;iBAClB;aACF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,YAAY;gBACvB,SAAS,EAAE,QAAQ;aACpB,CAAC;YAEF,wBAAwB;YACxB,MAAM,IAAA,eAAM,EAAC,0BAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACvF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,WAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,SAAS,GAAG,YAAY,CAAC;YAC/B,MAAM,SAAS,GAAG,QAAQ,CAAC;YAE3B,mDAAmD;YACnD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC;gBACH,qBAAqB;gBACrB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBAEvD,wBAAwB;gBACxB,MAAM,IAAA,kCAAa,EACjB;oBACE,MAAM;oBACN,SAAS;oBACT,SAAS;oBACT,EAAE,EAAE,aAAa;oBACjB,SAAS,EAAE,aAAa;oBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,EACD;oBACE,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,UAAU;oBACpB,UAAU,EAAE,YAAY;oBACxB,MAAM,EAAE,MAAM;oBACd,GAAG,EAAE,kBAAkB;oBACvB,UAAU,EAAE,GAAG;oBACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;oBAChC,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE;wBACR,WAAW,EAAE,cAAc;qBAC5B;iBACF,CACF,CAAC;gBAEF,qBAAqB;gBACrB,IAAA,6CAAuB,EAAC,kBAAkB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,EAAE;oBAClE,MAAM;oBACN,SAAS;oBACT,SAAS;oBACT,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI;qBACd;iBACF,CAAC,CAAC;gBAEH,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,oCAAoC;YAC/D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,oBAAoB;gBACpB,MAAM,IAAA,wCAAmB,EACvB;oBACE,MAAM;oBACN,SAAS;oBACT,SAAS;oBACT,EAAE,EAAE,aAAa;oBACjB,SAAS,EAAE,aAAa;oBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,EACD;oBACE,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,UAAU;oBACpB,MAAM,EAAE,MAAM;oBACd,GAAG,EAAE,kBAAkB;oBACvB,UAAU,EAAE,GAAG;oBACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;oBAChC,OAAO,EAAE,KAAK;iBACf,EACD,KAAc,CACf,CAAC;gBAEF,kBAAkB;gBAClB,MAAM,IAAA,2BAAU,EAAC,KAAK,EAAE;oBACtB,MAAM;oBACN,SAAS;oBACT,SAAS;oBACT,EAAE,EAAE,aAAa;oBACjB,SAAS,EAAE,aAAa;iBACzB,CAAC,CAAC;gBAEH,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\services\\__tests__\\user-action-audit.test.ts"],"sourcesContent":["/**\r\n * User Action Audit System Tests\r\n * Tests for the comprehensive user action and audit logging system\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\r\nimport { userActionLogger, logUserAction, logFailedUserAction } from '../user-action-logger';\r\nimport { performanceMetrics, recordOperationDuration } from '../performance-metrics';\r\nimport { trackError, trackApiError } from '../error-tracking';\r\nimport { auditLogger } from '../audit-logger';\r\n\r\n// Mock the logger dependencies\r\nvi.mock('@/lib/utils/logging', () => ({\r\n  getLogger: vi.fn(() => ({\r\n    info: vi.fn(),\r\n    error: vi.fn(),\r\n    warn: vi.fn(),\r\n    debug: vi.fn(),\r\n    http: vi.fn(),\r\n    verbose: vi.fn(),\r\n    silly: vi.fn(),\r\n    performance: vi.fn(),\r\n    request: vi.fn(),\r\n    database: vi.fn(),\r\n    userAction: vi.fn()\r\n  })),\r\n  performanceLogger: {\r\n    info: vi.fn(),\r\n    error: vi.fn(),\r\n    warn: vi.fn(),\r\n    performance: vi.fn(),\r\n    userAction: vi.fn()\r\n  },\r\n  securityLogger: {\r\n    info: vi.fn(),\r\n    error: vi.fn(),\r\n    warn: vi.fn(),\r\n    userAction: vi.fn()\r\n  }\r\n}));\r\n\r\ndescribe('User Action Audit System', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up any intervals or timers\r\n    performanceMetrics.stopSystemMetricsCollection();\r\n  });\r\n\r\n  describe('User Action Logger', () => {\r\n    it('should log successful user action', async () => {\r\n      const context = {\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        requestId: 'req789',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const details = {\r\n        action: 'create',\r\n        resource: 'products',\r\n        resourceId: 'product123',\r\n        method: 'POST',\r\n        url: '/api/v1/products',\r\n        statusCode: 201,\r\n        duration: 150,\r\n        success: true,\r\n        metadata: {\r\n          productName: 'Test Product'\r\n        }\r\n      };\r\n\r\n      await logUserAction(context, details);\r\n\r\n      // Verify the action was logged (we can't easily test the internal logging without mocking)\r\n      expect(true).toBe(true); // Placeholder assertion\r\n    });\r\n\r\n    it('should log failed user action with error details', async () => {\r\n      const context = {\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        requestId: 'req789',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const details = {\r\n        action: 'create',\r\n        resource: 'products',\r\n        method: 'POST',\r\n        url: '/api/v1/products',\r\n        statusCode: 400,\r\n        duration: 50,\r\n        success: false\r\n      };\r\n\r\n      const error = new Error('Validation failed');\r\n\r\n      await logFailedUserAction(context, details, error);\r\n\r\n      // Verify the failed action was logged\r\n      expect(true).toBe(true); // Placeholder assertion\r\n    });\r\n\r\n    it('should track user activity summary', () => {\r\n      const summary = userActionLogger.getUserActivitySummary(\r\n        'user123',\r\n        {\r\n          start: new Date(Date.now() - 3600000), // 1 hour ago\r\n          end: new Date()\r\n        }\r\n      );\r\n\r\n      expect(summary).toHaveProperty('totalActions');\r\n      expect(summary).toHaveProperty('successfulActions');\r\n      expect(summary).toHaveProperty('failedActions');\r\n      expect(summary).toHaveProperty('actionsByType');\r\n      expect(summary).toHaveProperty('sessionCount');\r\n      expect(summary).toHaveProperty('lastActivity');\r\n      expect(summary).toHaveProperty('suspiciousActivity');\r\n    });\r\n  });\r\n\r\n  describe('Performance Metrics', () => {\r\n    it('should record operation duration', () => {\r\n      recordOperationDuration('test_operation', 250, {\r\n        userId: 'user123',\r\n        metadata: {\r\n          operationType: 'database_query'\r\n        }\r\n      });\r\n\r\n      // Verify metric was recorded\r\n      expect(true).toBe(true); // Placeholder assertion\r\n    });\r\n\r\n    it('should record API request metrics', () => {\r\n      performanceMetrics.recordApiRequest(\r\n        'POST',\r\n        '/api/v1/products',\r\n        201,\r\n        150,\r\n        {\r\n          responseSize: 1024,\r\n          requestSize: 512,\r\n          userId: 'user123',\r\n          requestId: 'req789'\r\n        }\r\n      );\r\n\r\n      // Verify API metrics were recorded\r\n      expect(true).toBe(true); // Placeholder assertion\r\n    });\r\n\r\n    it('should get performance summary', () => {\r\n      const summary = performanceMetrics.getPerformanceSummary(\r\n        new Date(Date.now() - 3600000), // 1 hour ago\r\n        new Date()\r\n      );\r\n\r\n      expect(summary).toHaveProperty('totalMetrics');\r\n      expect(summary).toHaveProperty('averageDuration');\r\n      expect(summary).toHaveProperty('slowOperations');\r\n      expect(summary).toHaveProperty('errorCount');\r\n      expect(summary).toHaveProperty('memoryPeaks');\r\n    });\r\n\r\n    it('should export metrics in JSON format', () => {\r\n      const jsonMetrics = performanceMetrics.exportMetrics('json');\r\n      \r\n      expect(() => JSON.parse(jsonMetrics)).not.toThrow();\r\n      \r\n      const parsed = JSON.parse(jsonMetrics);\r\n      expect(parsed).toHaveProperty('timestamp');\r\n      expect(parsed).toHaveProperty('metrics');\r\n      expect(parsed).toHaveProperty('summary');\r\n    });\r\n\r\n    it('should export metrics in Prometheus format', () => {\r\n      const prometheusMetrics = performanceMetrics.exportMetrics('prometheus');\r\n      \r\n      expect(typeof prometheusMetrics).toBe('string');\r\n      // Prometheus format should contain metric names and values\r\n      expect(prometheusMetrics).toMatch(/\\w+.*\\d+\\s+\\d+/);\r\n    });\r\n  });\r\n\r\n  describe('Error Tracking', () => {\r\n    it('should track basic error with context', async () => {\r\n      const error = new Error('Test error');\r\n      const context = {\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        requestId: 'req789',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0'\r\n      };\r\n\r\n      const errorId = await trackError(error, context, {\r\n        operation: 'test_operation',\r\n        additionalData: 'test'\r\n      });\r\n\r\n      expect(typeof errorId).toBe('string');\r\n      expect(errorId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);\r\n    });\r\n\r\n    it('should track API error with request context', async () => {\r\n      const error = new Error('API error');\r\n      const request = {\r\n        method: 'POST',\r\n        url: '/api/v1/products',\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0'\r\n      };\r\n\r\n      const errorId = await trackApiError(error, request, {\r\n        statusCode: 500\r\n      });\r\n\r\n      expect(typeof errorId).toBe('string');\r\n      expect(errorId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);\r\n    });\r\n\r\n    it('should get error statistics', async () => {\r\n      const { errorTracking } = await import('../error-tracking');\r\n      const stats = errorTracking.getErrorStatistics({\r\n        start: new Date(Date.now() - 3600000), // 1 hour ago\r\n        end: new Date()\r\n      });\r\n\r\n      expect(stats).toHaveProperty('totalErrors');\r\n      expect(stats).toHaveProperty('errorsByType');\r\n      expect(stats).toHaveProperty('errorsBySeverity');\r\n      expect(stats).toHaveProperty('topErrors');\r\n      expect(stats).toHaveProperty('affectedUsers');\r\n      expect(stats).toHaveProperty('criticalErrors');\r\n    });\r\n  });\r\n\r\n  describe('Audit Logger Integration', () => {\r\n    it('should log user action to audit trail', async () => {\r\n      const userId = 'user123';\r\n      const action = {\r\n        action: 'create',\r\n        resource: 'products',\r\n        resourceId: 'product123',\r\n        details: {\r\n          productName: 'Test Product',\r\n          price: 29.99\r\n        }\r\n      };\r\n      const context = {\r\n        sessionId: 'session456',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0',\r\n        requestId: 'req789'\r\n      };\r\n\r\n      // This should not throw\r\n      await expect(auditLogger.logUserAction(userId, action, context)).resolves.not.toThrow();\r\n    });\r\n\r\n    it('should log security event', async () => {\r\n      const event = {\r\n        type: 'failed_login' as const,\r\n        severity: 'medium' as const,\r\n        details: {\r\n          reason: 'Invalid password',\r\n          attempts: 3\r\n        }\r\n      };\r\n      const context = {\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        ip: '192.168.1.1',\r\n        userAgent: 'Mozilla/5.0',\r\n        requestId: 'req789'\r\n      };\r\n\r\n      // This should not throw\r\n      await expect(auditLogger.logSecurityEvent(event, context)).resolves.not.toThrow();\r\n    });\r\n\r\n    it('should log performance event', async () => {\r\n      const event = {\r\n        operation: 'database_query',\r\n        duration: 1500,\r\n        threshold: 1000,\r\n        metadata: {\r\n          query: 'SELECT * FROM products',\r\n          table: 'products'\r\n        }\r\n      };\r\n      const context = {\r\n        userId: 'user123',\r\n        sessionId: 'session456',\r\n        requestId: 'req789'\r\n      };\r\n\r\n      // This should not throw\r\n      await expect(auditLogger.logPerformanceEvent(event, context)).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Integration Tests', () => {\r\n    it('should handle complete user action flow', async () => {\r\n      const userId = 'user123';\r\n      const sessionId = 'session456';\r\n      const requestId = 'req789';\r\n      \r\n      // Simulate a complete user action with all logging\r\n      const startTime = Date.now();\r\n      \r\n      try {\r\n        // Simulate some work\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n        \r\n        // Log successful action\r\n        await logUserAction(\r\n          {\r\n            userId,\r\n            sessionId,\r\n            requestId,\r\n            ip: '192.168.1.1',\r\n            userAgent: 'Mozilla/5.0',\r\n            timestamp: new Date()\r\n          },\r\n          {\r\n            action: 'create',\r\n            resource: 'products',\r\n            resourceId: 'product123',\r\n            method: 'POST',\r\n            url: '/api/v1/products',\r\n            statusCode: 201,\r\n            duration: Date.now() - startTime,\r\n            success: true,\r\n            metadata: {\r\n              productName: 'Test Product'\r\n            }\r\n          }\r\n        );\r\n\r\n        // Record performance\r\n        recordOperationDuration('product_creation', Date.now() - startTime, {\r\n          userId,\r\n          sessionId,\r\n          requestId,\r\n          metadata: {\r\n            success: true\r\n          }\r\n        });\r\n\r\n        expect(true).toBe(true); // If we get here, everything worked\r\n      } catch (error) {\r\n        // Log failed action\r\n        await logFailedUserAction(\r\n          {\r\n            userId,\r\n            sessionId,\r\n            requestId,\r\n            ip: '192.168.1.1',\r\n            userAgent: 'Mozilla/5.0',\r\n            timestamp: new Date()\r\n          },\r\n          {\r\n            action: 'create',\r\n            resource: 'products',\r\n            method: 'POST',\r\n            url: '/api/v1/products',\r\n            statusCode: 500,\r\n            duration: Date.now() - startTime,\r\n            success: false\r\n          },\r\n          error as Error\r\n        );\r\n\r\n        // Track the error\r\n        await trackError(error, {\r\n          userId,\r\n          sessionId,\r\n          requestId,\r\n          ip: '192.168.1.1',\r\n          userAgent: 'Mozilla/5.0'\r\n        });\r\n\r\n        throw error;\r\n      }\r\n    });\r\n  });\r\n});"],"version":3}