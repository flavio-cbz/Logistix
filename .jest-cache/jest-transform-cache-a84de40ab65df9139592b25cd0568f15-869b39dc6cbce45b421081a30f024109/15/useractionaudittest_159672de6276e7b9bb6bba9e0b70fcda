689759c0cd998f832b03342a93876f5e
"use strict";
/**
 * User Action Audit System Tests
 * Tests for the comprehensive user action and audit logging system
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const user_action_logger_1 = require("../user-action-logger");
const performance_metrics_1 = require("../performance-metrics");
const error_tracking_1 = require("../error-tracking");
const audit_logger_1 = require("../audit-logger");
// Mock the logger dependencies
vitest_1.vi.mock('@/lib/utils/logging', () => ({
    getLogger: vitest_1.vi.fn(() => ({
        info: vitest_1.vi.fn(),
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        debug: vitest_1.vi.fn(),
        http: vitest_1.vi.fn(),
        verbose: vitest_1.vi.fn(),
        silly: vitest_1.vi.fn(),
        performance: vitest_1.vi.fn(),
        request: vitest_1.vi.fn(),
        database: vitest_1.vi.fn(),
        userAction: vitest_1.vi.fn()
    })),
    performanceLogger: {
        info: vitest_1.vi.fn(),
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        performance: vitest_1.vi.fn(),
        userAction: vitest_1.vi.fn()
    },
    securityLogger: {
        info: vitest_1.vi.fn(),
        error: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn(),
        userAction: vitest_1.vi.fn()
    }
}));
(0, vitest_1.describe)('User Action Audit System', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.afterEach)(() => {
        // Clean up any intervals or timers
        performance_metrics_1.performanceMetrics.stopSystemMetricsCollection();
    });
    (0, vitest_1.describe)('User Action Logger', () => {
        (0, vitest_1.it)('should log successful user action', async () => {
            const context = {
                userId: 'user123',
                sessionId: 'session456',
                requestId: 'req789',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0',
                timestamp: new Date()
            };
            const details = {
                action: 'create',
                resource: 'products',
                resourceId: 'product123',
                method: 'POST',
                url: '/api/v1/products',
                statusCode: 201,
                duration: 150,
                success: true,
                metadata: {
                    productName: 'Test Product'
                }
            };
            await (0, user_action_logger_1.logUserAction)(context, details);
            // Verify the action was logged (we can't easily test the internal logging without mocking)
            (0, vitest_1.expect)(true).toBe(true); // Placeholder assertion
        });
        (0, vitest_1.it)('should log failed user action with error details', async () => {
            const context = {
                userId: 'user123',
                sessionId: 'session456',
                requestId: 'req789',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0',
                timestamp: new Date()
            };
            const details = {
                action: 'create',
                resource: 'products',
                method: 'POST',
                url: '/api/v1/products',
                statusCode: 400,
                duration: 50,
                success: false
            };
            const error = new Error('Validation failed');
            await (0, user_action_logger_1.logFailedUserAction)(context, details, error);
            // Verify the failed action was logged
            (0, vitest_1.expect)(true).toBe(true); // Placeholder assertion
        });
        (0, vitest_1.it)('should track user activity summary', () => {
            const summary = user_action_logger_1.userActionLogger.getUserActivitySummary('user123', {
                start: new Date(Date.now() - 3600000), // 1 hour ago
                end: new Date()
            });
            (0, vitest_1.expect)(summary).toHaveProperty('totalActions');
            (0, vitest_1.expect)(summary).toHaveProperty('successfulActions');
            (0, vitest_1.expect)(summary).toHaveProperty('failedActions');
            (0, vitest_1.expect)(summary).toHaveProperty('actionsByType');
            (0, vitest_1.expect)(summary).toHaveProperty('sessionCount');
            (0, vitest_1.expect)(summary).toHaveProperty('lastActivity');
            (0, vitest_1.expect)(summary).toHaveProperty('suspiciousActivity');
        });
    });
    (0, vitest_1.describe)('Performance Metrics', () => {
        (0, vitest_1.it)('should record operation duration', () => {
            (0, performance_metrics_1.recordOperationDuration)('test_operation', 250, {
                userId: 'user123',
                metadata: {
                    operationType: 'database_query'
                }
            });
            // Verify metric was recorded
            (0, vitest_1.expect)(true).toBe(true); // Placeholder assertion
        });
        (0, vitest_1.it)('should record API request metrics', () => {
            performance_metrics_1.performanceMetrics.recordApiRequest('POST', '/api/v1/products', 201, 150, {
                responseSize: 1024,
                requestSize: 512,
                userId: 'user123',
                requestId: 'req789'
            });
            // Verify API metrics were recorded
            (0, vitest_1.expect)(true).toBe(true); // Placeholder assertion
        });
        (0, vitest_1.it)('should get performance summary', () => {
            const summary = performance_metrics_1.performanceMetrics.getPerformanceSummary(new Date(Date.now() - 3600000), // 1 hour ago
            new Date());
            (0, vitest_1.expect)(summary).toHaveProperty('totalMetrics');
            (0, vitest_1.expect)(summary).toHaveProperty('averageDuration');
            (0, vitest_1.expect)(summary).toHaveProperty('slowOperations');
            (0, vitest_1.expect)(summary).toHaveProperty('errorCount');
            (0, vitest_1.expect)(summary).toHaveProperty('memoryPeaks');
        });
        (0, vitest_1.it)('should export metrics in JSON format', () => {
            const jsonMetrics = performance_metrics_1.performanceMetrics.exportMetrics('json');
            (0, vitest_1.expect)(() => JSON.parse(jsonMetrics)).not.toThrow();
            const parsed = JSON.parse(jsonMetrics);
            (0, vitest_1.expect)(parsed).toHaveProperty('timestamp');
            (0, vitest_1.expect)(parsed).toHaveProperty('metrics');
            (0, vitest_1.expect)(parsed).toHaveProperty('summary');
        });
        (0, vitest_1.it)('should export metrics in Prometheus format', () => {
            const prometheusMetrics = performance_metrics_1.performanceMetrics.exportMetrics('prometheus');
            (0, vitest_1.expect)(typeof prometheusMetrics).toBe('string');
            // Prometheus format should contain metric names and values
            (0, vitest_1.expect)(prometheusMetrics).toMatch(/\w+.*\d+\s+\d+/);
        });
    });
    (0, vitest_1.describe)('Error Tracking', () => {
        (0, vitest_1.it)('should track basic error with context', async () => {
            const error = new Error('Test error');
            const context = {
                userId: 'user123',
                sessionId: 'session456',
                requestId: 'req789',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0'
            };
            const errorId = await (0, error_tracking_1.trackError)(error, context, {
                operation: 'test_operation',
                additionalData: 'test'
            });
            (0, vitest_1.expect)(typeof errorId).toBe('string');
            (0, vitest_1.expect)(errorId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
        });
        (0, vitest_1.it)('should track API error with request context', async () => {
            const error = new Error('API error');
            const request = {
                method: 'POST',
                url: '/api/v1/products',
                userId: 'user123',
                sessionId: 'session456',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0'
            };
            const errorId = await (0, error_tracking_1.trackApiError)(error, request, {
                statusCode: 500
            });
            (0, vitest_1.expect)(typeof errorId).toBe('string');
            (0, vitest_1.expect)(errorId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
        });
        (0, vitest_1.it)('should get error statistics', async () => {
            const { errorTracking } = await Promise.resolve().then(() => __importStar(require('../error-tracking')));
            const stats = errorTracking.getErrorStatistics({
                start: new Date(Date.now() - 3600000), // 1 hour ago
                end: new Date()
            });
            (0, vitest_1.expect)(stats).toHaveProperty('totalErrors');
            (0, vitest_1.expect)(stats).toHaveProperty('errorsByType');
            (0, vitest_1.expect)(stats).toHaveProperty('errorsBySeverity');
            (0, vitest_1.expect)(stats).toHaveProperty('topErrors');
            (0, vitest_1.expect)(stats).toHaveProperty('affectedUsers');
            (0, vitest_1.expect)(stats).toHaveProperty('criticalErrors');
        });
    });
    (0, vitest_1.describe)('Audit Logger Integration', () => {
        (0, vitest_1.it)('should log user action to audit trail', async () => {
            const userId = 'user123';
            const action = {
                action: 'create',
                resource: 'products',
                resourceId: 'product123',
                details: {
                    productName: 'Test Product',
                    price: 29.99
                }
            };
            const context = {
                sessionId: 'session456',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0',
                requestId: 'req789'
            };
            // This should not throw
            await (0, vitest_1.expect)(audit_logger_1.auditLogger.logUserAction(userId, action, context)).resolves.not.toThrow();
        });
        (0, vitest_1.it)('should log security event', async () => {
            const event = {
                type: 'failed_login',
                severity: 'medium',
                details: {
                    reason: 'Invalid password',
                    attempts: 3
                }
            };
            const context = {
                userId: 'user123',
                sessionId: 'session456',
                ip: '192.168.1.1',
                userAgent: 'Mozilla/5.0',
                requestId: 'req789'
            };
            // This should not throw
            await (0, vitest_1.expect)(audit_logger_1.auditLogger.logSecurityEvent(event, context)).resolves.not.toThrow();
        });
        (0, vitest_1.it)('should log performance event', async () => {
            const event = {
                operation: 'database_query',
                duration: 1500,
                threshold: 1000,
                metadata: {
                    query: 'SELECT * FROM products',
                    table: 'products'
                }
            };
            const context = {
                userId: 'user123',
                sessionId: 'session456',
                requestId: 'req789'
            };
            // This should not throw
            await (0, vitest_1.expect)(audit_logger_1.auditLogger.logPerformanceEvent(event, context)).resolves.not.toThrow();
        });
    });
    (0, vitest_1.describe)('Integration Tests', () => {
        (0, vitest_1.it)('should handle complete user action flow', async () => {
            const userId = 'user123';
            const sessionId = 'session456';
            const requestId = 'req789';
            // Simulate a complete user action with all logging
            const startTime = Date.now();
            try {
                // Simulate some work
                await new Promise(resolve => setTimeout(resolve, 100));
                // Log successful action
                await (0, user_action_logger_1.logUserAction)({
                    userId,
                    sessionId,
                    requestId,
                    ip: '192.168.1.1',
                    userAgent: 'Mozilla/5.0',
                    timestamp: new Date()
                }, {
                    action: 'create',
                    resource: 'products',
                    resourceId: 'product123',
                    method: 'POST',
                    url: '/api/v1/products',
                    statusCode: 201,
                    duration: Date.now() - startTime,
                    success: true,
                    metadata: {
                        productName: 'Test Product'
                    }
                });
                // Record performance
                (0, performance_metrics_1.recordOperationDuration)('product_creation', Date.now() - startTime, {
                    userId,
                    sessionId,
                    requestId,
                    metadata: {
                        success: true
                    }
                });
                (0, vitest_1.expect)(true).toBe(true); // If we get here, everything worked
            }
            catch (error) {
                // Log failed action
                await (0, user_action_logger_1.logFailedUserAction)({
                    userId,
                    sessionId,
                    requestId,
                    ip: '192.168.1.1',
                    userAgent: 'Mozilla/5.0',
                    timestamp: new Date()
                }, {
                    action: 'create',
                    resource: 'products',
                    method: 'POST',
                    url: '/api/v1/products',
                    statusCode: 500,
                    duration: Date.now() - startTime,
                    success: false
                }, error);
                // Track the error
                await (0, error_tracking_1.trackError)(error, {
                    userId,
                    sessionId,
                    requestId,
                    ip: '192.168.1.1',
                    userAgent: 'Mozilla/5.0'
                });
                throw error;
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,