{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\utils\\logging\\__tests__\\logger.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\lib\\utils\\logging\\__tests__\\logger.test.ts"],"sourcesContent":["/**\r\n * Logger Service Tests\r\n */\r\n\r\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\r\nimport { getLogger, logger } from '../logger';\r\nimport winston from 'winston';\r\n\r\n// Mock winston\r\nvi.mock('winston', () => ({\r\n  default: {\r\n    createLogger: vi.fn(() => ({\r\n      child: vi.fn(() => ({\r\n        error: vi.fn(),\r\n        warn: vi.fn(),\r\n        info: vi.fn(),\r\n        http: vi.fn(),\r\n        verbose: vi.fn(),\r\n        debug: vi.fn(),\r\n        silly: vi.fn()\r\n      })),\r\n      error: vi.fn(),\r\n      warn: vi.fn(),\r\n      info: vi.fn(),\r\n      http: vi.fn(),\r\n      verbose: vi.fn(),\r\n      debug: vi.fn(),\r\n      silly: vi.fn()\r\n    })),\r\n    addColors: vi.fn(),\r\n    transports: {\r\n      Console: vi.fn(),\r\n      DailyRotateFile: vi.fn()\r\n    }\r\n  },\r\n  format: {\r\n    combine: vi.fn(() => ({})),\r\n    colorize: vi.fn(() => ({})),\r\n    timestamp: vi.fn(() => ({})),\r\n    printf: vi.fn(() => ({})),\r\n    errors: vi.fn(() => ({})),\r\n    splat: vi.fn(() => ({})),\r\n    json: vi.fn(() => ({}))\r\n  }\r\n}));\r\n\r\n// Mock winston-daily-rotate-file\r\nvi.mock('winston-daily-rotate-file', () => ({}));\r\n\r\n// Mock fs\r\nvi.mock('fs', () => ({\r\n  existsSync: vi.fn(() => true),\r\n  mkdirSync: vi.fn()\r\n}));\r\n\r\ndescribe('Logger Service', () => {\r\n  let mockWinstonLogger: any;\r\n\r\n  beforeEach(() => {\r\n    mockWinstonLogger = {\r\n      child: vi.fn(() => ({\r\n        error: vi.fn(),\r\n        warn: vi.fn(),\r\n        info: vi.fn(),\r\n        http: vi.fn(),\r\n        verbose: vi.fn(),\r\n        debug: vi.fn(),\r\n        silly: vi.fn()\r\n      })),\r\n      error: vi.fn(),\r\n      warn: vi.fn(),\r\n      info: vi.fn(),\r\n      http: vi.fn(),\r\n      verbose: vi.fn(),\r\n      debug: vi.fn(),\r\n      silly: vi.fn()\r\n    };\r\n\r\n    (winston.createLogger as any).mockReturnValue(mockWinstonLogger);\r\n  });\r\n\r\n  afterEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('getLogger', () => {\r\n    it('should create a logger with context', () => {\r\n      const contextLogger = getLogger('TEST_CONTEXT');\r\n      \r\n      expect(winston.createLogger).toHaveBeenCalled();\r\n      expect(mockWinstonLogger.child).toHaveBeenCalledWith({ context: 'TEST_CONTEXT' });\r\n      expect(contextLogger).toBeDefined();\r\n    });\r\n\r\n    it('should provide all logging methods', () => {\r\n      const contextLogger = getLogger('TEST');\r\n      \r\n      expect(typeof contextLogger.error).toBe('function');\r\n      expect(typeof contextLogger.warn).toBe('function');\r\n      expect(typeof contextLogger.info).toBe('function');\r\n      expect(typeof contextLogger.http).toBe('function');\r\n      expect(typeof contextLogger.verbose).toBe('function');\r\n      expect(typeof contextLogger.debug).toBe('function');\r\n      expect(typeof contextLogger.silly).toBe('function');\r\n      expect(typeof contextLogger.performance).toBe('function');\r\n      expect(typeof contextLogger.request).toBe('function');\r\n      expect(typeof contextLogger.database).toBe('function');\r\n      expect(typeof contextLogger.userAction).toBe('function');\r\n    });\r\n  });\r\n\r\n  describe('logger methods', () => {\r\n    let testLogger: any;\r\n\r\n    beforeEach(() => {\r\n      testLogger = getLogger('TEST');\r\n    });\r\n\r\n    it('should log error messages', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      testLogger.error('Test error message');\r\n      \r\n      expect(childLogger.error).toHaveBeenCalledWith('Test error message', {});\r\n    });\r\n\r\n    it('should log error with Error object', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      const error = new Error('Test error');\r\n      testLogger.error('Test error message', error);\r\n      \r\n      expect(childLogger.error).toHaveBeenCalledWith('Test error message', {\r\n        error,\r\n        stack: error.stack\r\n      });\r\n    });\r\n\r\n    it('should log info messages with metadata', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      const metadata = { userId: '123', action: 'test' };\r\n      testLogger.info('Test info message', metadata);\r\n      \r\n      expect(childLogger.info).toHaveBeenCalledWith('Test info message', metadata);\r\n    });\r\n\r\n    it('should log performance metrics', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      testLogger.performance('TEST_OPERATION', 1500, { userId: '123' });\r\n      \r\n      expect(childLogger.info).toHaveBeenCalledWith('Performance metric', {\r\n        operation: 'TEST_OPERATION',\r\n        duration: 1500,\r\n        type: 'performance',\r\n        userId: '123'\r\n      });\r\n    });\r\n\r\n    it('should log HTTP requests', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      testLogger.request('GET', '/api/test', 200, 250, { userId: '123' });\r\n      \r\n      expect(childLogger.http).toHaveBeenCalledWith('HTTP Request', {\r\n        method: 'GET',\r\n        url: '/api/test',\r\n        statusCode: 200,\r\n        duration: 250,\r\n        type: 'http_request',\r\n        userId: '123'\r\n      });\r\n    });\r\n\r\n    it('should log database queries with truncation', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      const longQuery = 'SELECT * FROM users WHERE ' + 'x'.repeat(300);\r\n      testLogger.database(longQuery, 100);\r\n      \r\n      expect(childLogger.debug).toHaveBeenCalledWith('Database Query', {\r\n        query: longQuery.substring(0, 200) + '...',\r\n        duration: 100,\r\n        type: 'database'\r\n      });\r\n    });\r\n\r\n    it('should log user actions', () => {\r\n      const childLogger = mockWinstonLogger.child();\r\n      mockWinstonLogger.child.mockReturnValue(childLogger);\r\n      \r\n      testLogger.userAction('LOGIN', 'user123', { ip: '127.0.0.1' });\r\n      \r\n      expect(childLogger.info).toHaveBeenCalledWith('User Action', {\r\n        action: 'LOGIN',\r\n        userId: 'user123',\r\n        type: 'user_action',\r\n        timestamp: expect.any(String),\r\n        ip: '127.0.0.1'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('global logger', () => {\r\n    it('should provide a global logger instance', () => {\r\n      expect(logger).toBeDefined();\r\n      expect(typeof logger.info).toBe('function');\r\n      expect(typeof logger.error).toBe('function');\r\n    });\r\n\r\n    it('should log messages through global logger', () => {\r\n      logger.info('Global test message');\r\n      \r\n      expect(mockWinstonLogger.info).toHaveBeenCalledWith('Global test message', {});\r\n    });\r\n  });\r\n});"],"version":3}