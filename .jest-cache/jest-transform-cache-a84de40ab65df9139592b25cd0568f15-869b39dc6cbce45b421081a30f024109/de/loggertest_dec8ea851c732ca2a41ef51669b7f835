93935f87ad76f259f46c64246908a485
"use strict";
/**
 * Logger Service Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vitest_1 = require("vitest");
const logger_1 = require("../logger");
const winston_1 = tslib_1.__importDefault(require("winston"));
// Mock winston
vitest_1.vi.mock('winston', () => ({
    default: {
        createLogger: vitest_1.vi.fn(() => ({
            child: vitest_1.vi.fn(() => ({
                error: vitest_1.vi.fn(),
                warn: vitest_1.vi.fn(),
                info: vitest_1.vi.fn(),
                http: vitest_1.vi.fn(),
                verbose: vitest_1.vi.fn(),
                debug: vitest_1.vi.fn(),
                silly: vitest_1.vi.fn()
            })),
            error: vitest_1.vi.fn(),
            warn: vitest_1.vi.fn(),
            info: vitest_1.vi.fn(),
            http: vitest_1.vi.fn(),
            verbose: vitest_1.vi.fn(),
            debug: vitest_1.vi.fn(),
            silly: vitest_1.vi.fn()
        })),
        addColors: vitest_1.vi.fn(),
        transports: {
            Console: vitest_1.vi.fn(),
            DailyRotateFile: vitest_1.vi.fn()
        }
    },
    format: {
        combine: vitest_1.vi.fn(() => ({})),
        colorize: vitest_1.vi.fn(() => ({})),
        timestamp: vitest_1.vi.fn(() => ({})),
        printf: vitest_1.vi.fn(() => ({})),
        errors: vitest_1.vi.fn(() => ({})),
        splat: vitest_1.vi.fn(() => ({})),
        json: vitest_1.vi.fn(() => ({}))
    }
}));
// Mock winston-daily-rotate-file
vitest_1.vi.mock('winston-daily-rotate-file', () => ({}));
// Mock fs
vitest_1.vi.mock('fs', () => ({
    existsSync: vitest_1.vi.fn(() => true),
    mkdirSync: vitest_1.vi.fn()
}));
(0, vitest_1.describe)('Logger Service', () => {
    let mockWinstonLogger;
    (0, vitest_1.beforeEach)(() => {
        mockWinstonLogger = {
            child: vitest_1.vi.fn(() => ({
                error: vitest_1.vi.fn(),
                warn: vitest_1.vi.fn(),
                info: vitest_1.vi.fn(),
                http: vitest_1.vi.fn(),
                verbose: vitest_1.vi.fn(),
                debug: vitest_1.vi.fn(),
                silly: vitest_1.vi.fn()
            })),
            error: vitest_1.vi.fn(),
            warn: vitest_1.vi.fn(),
            info: vitest_1.vi.fn(),
            http: vitest_1.vi.fn(),
            verbose: vitest_1.vi.fn(),
            debug: vitest_1.vi.fn(),
            silly: vitest_1.vi.fn()
        };
        winston_1.default.createLogger.mockReturnValue(mockWinstonLogger);
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.describe)('getLogger', () => {
        (0, vitest_1.it)('should create a logger with context', () => {
            const contextLogger = (0, logger_1.getLogger)('TEST_CONTEXT');
            (0, vitest_1.expect)(winston_1.default.createLogger).toHaveBeenCalled();
            (0, vitest_1.expect)(mockWinstonLogger.child).toHaveBeenCalledWith({ context: 'TEST_CONTEXT' });
            (0, vitest_1.expect)(contextLogger).toBeDefined();
        });
        (0, vitest_1.it)('should provide all logging methods', () => {
            const contextLogger = (0, logger_1.getLogger)('TEST');
            (0, vitest_1.expect)(typeof contextLogger.error).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.warn).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.info).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.http).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.verbose).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.debug).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.silly).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.performance).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.request).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.database).toBe('function');
            (0, vitest_1.expect)(typeof contextLogger.userAction).toBe('function');
        });
    });
    (0, vitest_1.describe)('logger methods', () => {
        let testLogger;
        (0, vitest_1.beforeEach)(() => {
            testLogger = (0, logger_1.getLogger)('TEST');
        });
        (0, vitest_1.it)('should log error messages', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            testLogger.error('Test error message');
            (0, vitest_1.expect)(childLogger.error).toHaveBeenCalledWith('Test error message', {});
        });
        (0, vitest_1.it)('should log error with Error object', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            const error = new Error('Test error');
            testLogger.error('Test error message', error);
            (0, vitest_1.expect)(childLogger.error).toHaveBeenCalledWith('Test error message', {
                error,
                stack: error.stack
            });
        });
        (0, vitest_1.it)('should log info messages with metadata', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            const metadata = { userId: '123', action: 'test' };
            testLogger.info('Test info message', metadata);
            (0, vitest_1.expect)(childLogger.info).toHaveBeenCalledWith('Test info message', metadata);
        });
        (0, vitest_1.it)('should log performance metrics', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            testLogger.performance('TEST_OPERATION', 1500, { userId: '123' });
            (0, vitest_1.expect)(childLogger.info).toHaveBeenCalledWith('Performance metric', {
                operation: 'TEST_OPERATION',
                duration: 1500,
                type: 'performance',
                userId: '123'
            });
        });
        (0, vitest_1.it)('should log HTTP requests', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            testLogger.request('GET', '/api/test', 200, 250, { userId: '123' });
            (0, vitest_1.expect)(childLogger.http).toHaveBeenCalledWith('HTTP Request', {
                method: 'GET',
                url: '/api/test',
                statusCode: 200,
                duration: 250,
                type: 'http_request',
                userId: '123'
            });
        });
        (0, vitest_1.it)('should log database queries with truncation', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            const longQuery = 'SELECT * FROM users WHERE ' + 'x'.repeat(300);
            testLogger.database(longQuery, 100);
            (0, vitest_1.expect)(childLogger.debug).toHaveBeenCalledWith('Database Query', {
                query: longQuery.substring(0, 200) + '...',
                duration: 100,
                type: 'database'
            });
        });
        (0, vitest_1.it)('should log user actions', () => {
            const childLogger = mockWinstonLogger.child();
            mockWinstonLogger.child.mockReturnValue(childLogger);
            testLogger.userAction('LOGIN', 'user123', { ip: '127.0.0.1' });
            (0, vitest_1.expect)(childLogger.info).toHaveBeenCalledWith('User Action', {
                action: 'LOGIN',
                userId: 'user123',
                type: 'user_action',
                timestamp: vitest_1.expect.any(String),
                ip: '127.0.0.1'
            });
        });
    });
    (0, vitest_1.describe)('global logger', () => {
        (0, vitest_1.it)('should provide a global logger instance', () => {
            (0, vitest_1.expect)(logger_1.logger).toBeDefined();
            (0, vitest_1.expect)(typeof logger_1.logger.info).toBe('function');
            (0, vitest_1.expect)(typeof logger_1.logger.error).toBe('function');
        });
        (0, vitest_1.it)('should log messages through global logger', () => {
            logger_1.logger.info('Global test message');
            (0, vitest_1.expect)(mockWinstonLogger.info).toHaveBeenCalledWith('Global test message', {});
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRjpcXFlvdWNsb3VkXFxEb2N1bWVudHNcXFByb2pldHNcXExvZ2lzdGl4XFxsaWJcXHV0aWxzXFxsb2dnaW5nXFxfX3Rlc3RzX19cXGxvZ2dlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7O0FBRUgsbUNBQXlFO0FBQ3pFLHNDQUE4QztBQUM5Qyw4REFBOEI7QUFFOUIsZUFBZTtBQUNmLFdBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEIsT0FBTyxFQUFFO1FBQ1AsWUFBWSxFQUFFLFdBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixLQUFLLEVBQUUsV0FBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNsQixLQUFLLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtnQkFDZCxJQUFJLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtnQkFDYixJQUFJLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtnQkFDYixJQUFJLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtnQkFDYixPQUFPLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLFdBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2QsS0FBSyxFQUFFLFdBQUUsQ0FBQyxFQUFFLEVBQUU7YUFDZixDQUFDLENBQUM7WUFDSCxLQUFLLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxFQUFFLFdBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDYixJQUFJLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtZQUNiLE9BQU8sRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hCLEtBQUssRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2QsS0FBSyxFQUFFLFdBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDZixDQUFDLENBQUM7UUFDSCxTQUFTLEVB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QU0sRUFBQyxlQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixJQUFBLGVBQU0sRUFBQyxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUMsSUFBQSxlQUFNLEVBQUMsT0FBTyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxXQUFFLEVBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO1lBQ25ELGVBQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUVuQyxJQUFBLGVBQU0sRUFBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRjpcXFlvdWNsb3VkXFxEb2N1bWVudHNcXFByb2pldHNcXExvZ2lzdGl4XFxsaWJcXHV0aWxzXFxsb2dnaW5nXFxfX3Rlc3RzX19cXGxvZ2dlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMb2dnZXIgU2VydmljZSBUZXN0c1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCB2aSwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoIH0gZnJvbSAndml0ZXN0JztcclxuaW1wb3J0IHsgZ2V0TG9nZ2VyLCBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5pbXBvcnQgd2luc3RvbiBmcm9tICd3aW5zdG9uJztcclxuXHJcbi8vIE1vY2sgd2luc3RvblxyXG52aS5tb2NrKCd3aW5zdG9uJywgKCkgPT4gKHtcclxuICBkZWZhdWx0OiB7XHJcbiAgICBjcmVhdGVMb2dnZXI6IHZpLmZuKCgpID0+ICh7XHJcbiAgICAgIGNoaWxkOiB2aS5mbigoKSA9PiAoe1xyXG4gICAgICAgIGVycm9yOiB2aS5mbigpLFxyXG4gICAgICAgIHdhcm46IHZpLmZuKCksXHJcbiAgICAgICAgaW5mbzogdmkuZm4oKSxcclxuICAgICAgICBodHRwOiB2aS5mbigpLFxyXG4gICAgICAgIHZlcmJvc2U6IHZpLmZuKCksXHJcbiAgICAgICAgZGVidWc6IHZpLmZuKCksXHJcbiAgICAgICAgc2lsbHk6IHZpLmZuKClcclxuICAgICAgfSkpLFxyXG4gICAgICBlcnJvcjogdmkuZm4oKSxcclxuICAgICAgd2FybjogdmkuZm4oKSxcclxuICAgICAgaW5mbzogdmkuZm4oKSxcclxuICAgICAgaHR0cDogdmkuZm4oKSxcclxuICAgICAgdmVyYm9zZTogdmkuZm4oKSxcclxuICAgICAgZGVidWc6IHZpLmZuKCksXHJcbiAgICAgIHNpbGx5OiB2aS5mbigpXHJcbiAgICB9KSksXHJcbiAgICBhZGRDb2xvcnM6IHZpLmZuKCksXHJcbiAgICB0cmFuc3BvcnRzOiB7XHJcbiAgICAgIENvbnNvbGU6IHZpLmZuKCksXHJcbiAgICAgIERhaWx5Um90YXRlRmlsZTogdmkuZm4oKVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgZm9ybWF0OiB7XHJcbiAgICBjb21iaW5lOiB2aS5mbigoKSA9PiAoe30pKSxcclxuICAgIGNvbG9yaXplOiB2aS5mbigoKSA9PiAoe30pKSxcclxuICAgIHRpbWVzdGFtcDogdmkuZm4oKCkgPT4gKHt9KSksXHJcbiAgICBwcmludGY6IHZpLmZuKCgpID0+ICh7fSkpLFxyXG4gICAgZXJyb3JzOiB2aS5mbigoKSA9PiAoe30pKSxcclxuICAgIHNwbGF0OiB2aS5mbigoKSA9PiAoe30pKSxcclxuICAgIGpzb246IHZpLmZuKCgpID0+ICh7fSkpXHJcbiAgfVxyXG59KSk7XHJcblxyXG4vLyBNb2NrIHdpbnN0b24tZGFpbHktcm90YXRlLWZpbGVcclxudmkubW9jaygnd2luc3Rvbi1kYWlseS1yb3RhdGUtZmlsZScsICgpID0+ICh7fSkpO1xyXG5cclxuLy8gTW9jayBmc1xyXG52aS5tb2NrKCdmcycsICgpID0+ICh7XHJcbiAgZXhpc3RzU3luYzogdmkuZm4oKCkgPT4gdHJ1ZSksXHJcbiAgbWtkaXJTeW5jOiB2aS5mbigpXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdMb2dnZXIgU2VydmljZScsICgpID0+IHtcclxuICBsZXQgbW9ja1dpbnN0b25Mb2dnZXI6IGFueTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBtb2NrV2luc3RvbkxvZ2dlciA9IHtcclxuICAgICAgY2hpbGQ6IHZpLmZuKCgpID0+ICh7XHJcbiAgICAgICAgZXJyb3I6IHZpLmZuKCksXHJcbiAgICAgICAgd2FybjogdmkuZm4oKSxcclxuICAgICAgICBpbmZvOiB2aS5mbigpLFxyXG4gICAgICAgIGh0dHA6IHZpLmZuKCksXHJcbiAgICAgICAgdmVyYm9zZTogdmkuZm4oKSxcclxuICAgICAgICBkZWJ1ZzogdmkuZm4oKSxcclxuICAgICAgICBzaWxseTogdmkuZm4oKVxyXG4gICAgICB9KSksXHJcbiAgICAgIGVycm9yOiB2aS5mbigpLFxyXG4gICAgICB3YXJuOiB2aS5mbigpLFxyXG4gICAgICBpbmZvOiB2aS5mbigpLFxyXG4gICAgICBodHRwOiB2aS5mbigpLFxyXG4gICAgICB2ZXJib3NlOiB2aS5mbigpLFxyXG4gICAgICBkZWJ1ZzogdmkuZm4oKSxcclxuICAgICAgc2lsbHk6IHZpLmZuKClcclxuICAgIH07XHJcblxyXG4gICAgKHdpbnN0b24uY3JlYXRlTG9nZ2VyIGFzIGFueSkubW9ja1JldHVyblZhbHVlKG1vY2tXaW5zdG9uTG9nZ2VyKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIHZpLmNsZWFyQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2dldExvZ2dlcicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgbG9nZ2VyIHdpdGggY29udGV4dCcsICgpID0+IHtcclxuICAgICAgY29uc3QgY29udGV4dExvZ2dlciA9IGdldExvZ2dlcignVEVTVF9DT05URVhUJyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3Qod2luc3Rvbi5jcmVhdGVMb2dnZXIpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgZXhwZWN0KG1vY2tXaW5zdG9uTG9nZ2VyLmNoaWxkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IGNvbnRleHQ6ICdURVNUX0NPTlRFWFQnIH0pO1xyXG4gICAgICBleHBlY3QoY29udGV4dExvZ2dlcikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBhbGwgbG9nZ2luZyBtZXRob2RzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250ZXh0TG9nZ2VyID0gZ2V0TG9nZ2VyKCdURVNUJyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QodHlwZW9mIGNvbnRleHRMb2dnZXIuZXJyb3IpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY29udGV4dExvZ2dlci53YXJuKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNvbnRleHRMb2dnZXIuaW5mbykudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBjb250ZXh0TG9nZ2VyLmh0dHApLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY29udGV4dExvZ2dlci52ZXJib3NlKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNvbnRleHRMb2dnZXIuZGVidWcpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY29udGV4dExvZ2dlci5zaWxseSkudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBjb250ZXh0TG9nZ2VyLnBlcmZvcm1hbmNlKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNvbnRleHRMb2dnZXIucmVxdWVzdCkudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBjb250ZXh0TG9nZ2VyLmRhdGFiYXNlKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNvbnRleHRMb2dnZXIudXNlckFjdGlvbikudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnbG9nZ2VyIG1ldGhvZHMnLCAoKSA9PiB7XHJcbiAgICBsZXQgdGVzdExvZ2dlcjogYW55O1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICB0ZXN0TG9nZ2VyID0gZ2V0TG9nZ2VyKCdURVNUJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGxvZyBlcnJvciBtZXNzYWdlcycsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgdGVzdExvZ2dlci5lcnJvcignVGVzdCBlcnJvciBtZXNzYWdlJyk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoY2hpbGRMb2dnZXIuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdUZXN0IGVycm9yIG1lc3NhZ2UnLCB7fSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGxvZyBlcnJvciB3aXRoIEVycm9yIG9iamVjdCcsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKTtcclxuICAgICAgdGVzdExvZ2dlci5lcnJvcignVGVzdCBlcnJvciBtZXNzYWdlJywgZXJyb3IpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGNoaWxkTG9nZ2VyLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVGVzdCBlcnJvciBtZXNzYWdlJywge1xyXG4gICAgICAgIGVycm9yLFxyXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9nIGluZm8gbWVzc2FnZXMgd2l0aCBtZXRhZGF0YScsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgbWV0YWRhdGEgPSB7IHVzZXJJZDogJzEyMycsIGFjdGlvbjogJ3Rlc3QnIH07XHJcbiAgICAgIHRlc3RMb2dnZXIuaW5mbygnVGVzdCBpbmZvIG1lc3NhZ2UnLCBtZXRhZGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoY2hpbGRMb2dnZXIuaW5mbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rlc3QgaW5mbyBtZXNzYWdlJywgbWV0YWRhdGEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBsb2cgcGVyZm9ybWFuY2UgbWV0cmljcycsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgdGVzdExvZ2dlci5wZXJmb3JtYW5jZSgnVEVTVF9PUEVSQVRJT04nLCAxNTAwLCB7IHVzZXJJZDogJzEyMycgfSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoY2hpbGRMb2dnZXIuaW5mbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1BlcmZvcm1hbmNlIG1ldHJpYycsIHtcclxuICAgICAgICBvcGVyYXRpb246ICdURVNUX09QRVJBVElPTicsXHJcbiAgICAgICAgZHVyYXRpb246IDE1MDAsXHJcbiAgICAgICAgdHlwZTogJ3BlcmZvcm1hbmNlJyxcclxuICAgICAgICB1c2VySWQ6ICcxMjMnXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBsb2cgSFRUUCByZXF1ZXN0cycsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgdGVzdExvZ2dlci5yZXF1ZXN0KCdHRVQnLCAnL2FwaS90ZXN0JywgMjAwLCAyNTAsIHsgdXNlcklkOiAnMTIzJyB9KTtcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChjaGlsZExvZ2dlci5odHRwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnSFRUUCBSZXF1ZXN0Jywge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgdXJsOiAnL2FwaS90ZXN0JyxcclxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgZHVyYXRpb246IDI1MCxcclxuICAgICAgICB0eXBlOiAnaHR0cF9yZXF1ZXN0JyxcclxuICAgICAgICB1c2VySWQ6ICcxMjMnXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBsb2cgZGF0YWJhc2UgcXVlcmllcyB3aXRoIHRydW5jYXRpb24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaWxkTG9nZ2VyID0gbW9ja1dpbnN0b25Mb2dnZXIuY2hpbGQoKTtcclxuICAgICAgbW9ja1dpbnN0b25Mb2dnZXIuY2hpbGQubW9ja1JldHVyblZhbHVlKGNoaWxkTG9nZ2VyKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGxvbmdRdWVyeSA9ICdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFICcgKyAneCcucmVwZWF0KDMwMCk7XHJcbiAgICAgIHRlc3RMb2dnZXIuZGF0YWJhc2UobG9uZ1F1ZXJ5LCAxMDApO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KGNoaWxkTG9nZ2VyLmRlYnVnKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGF0YWJhc2UgUXVlcnknLCB7XHJcbiAgICAgICAgcXVlcnk6IGxvbmdRdWVyeS5zdWJzdHJpbmcoMCwgMjAwKSArICcuLi4nLFxyXG4gICAgICAgIGR1cmF0aW9uOiAxMDAsXHJcbiAgICAgICAgdHlwZTogJ2RhdGFiYXNlJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9nIHVzZXIgYWN0aW9ucycsICgpID0+IHtcclxuICAgICAgY29uc3QgY2hpbGRMb2dnZXIgPSBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZCgpO1xyXG4gICAgICBtb2NrV2luc3RvbkxvZ2dlci5jaGlsZC5tb2NrUmV0dXJuVmFsdWUoY2hpbGRMb2dnZXIpO1xyXG4gICAgICBcclxuICAgICAgdGVzdExvZ2dlci51c2VyQWN0aW9uKCdMT0dJTicsICd1c2VyMTIzJywgeyBpcDogJzEyNy4wLjAuMScgfSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoY2hpbGRMb2dnZXIuaW5mbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1VzZXIgQWN0aW9uJywge1xyXG4gICAgICAgIGFjdGlvbjogJ0xPR0lOJyxcclxuICAgICAgICB1c2VySWQ6ICd1c2VyMTIzJyxcclxuICAgICAgICB0eXBlOiAndXNlcl9hY3Rpb24nLFxyXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxyXG4gICAgICAgIGlwOiAnMTI3LjAuMC4xJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnZ2xvYmFsIGxvZ2dlcicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBhIGdsb2JhbCBsb2dnZXIgaW5zdGFuY2UnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChsb2dnZXIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgbG9nZ2VyLmluZm8pLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgbG9nZ2VyLmVycm9yKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBsb2cgbWVzc2FnZXMgdGhyb3VnaCBnbG9iYWwgbG9nZ2VyJywgKCkgPT4ge1xyXG4gICAgICBsb2dnZXIuaW5mbygnR2xvYmFsIHRlc3QgbWVzc2FnZScpO1xyXG4gICAgICBcclxuICAgICAgZXhwZWN0KG1vY2tXaW5zdG9uTG9nZ2VyLmluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdHbG9iYWwgdGVzdCBtZXNzYWdlJywge30pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==