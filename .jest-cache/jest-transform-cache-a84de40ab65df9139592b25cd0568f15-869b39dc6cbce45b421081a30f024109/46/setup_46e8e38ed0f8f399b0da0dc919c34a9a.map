{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\setup.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\backend\\setup.ts"],"sourcesContent":["import { jest } from '@jest/globals'\r\nimport Database from 'better-sqlite3'\r\n\r\n// Global test setup for backend tests\r\nbeforeAll(async () => {\r\n  // Set test environment variables\r\n  process.env.NODE_ENV = 'test'\r\n  process.env.DATABASE_URL = ':memory:'\r\n  process.env.JWT_SECRET = 'test-jwt-secret'\r\n  process.env.BCRYPT_ROUNDS = '4' // Faster hashing for tests\r\n  \r\n  // Suppress console output in tests unless debugging\r\n  if (!process.env.DEBUG_TESTS) {\r\n    console.log = jest.fn()\r\n    console.info = jest.fn()\r\n    console.warn = jest.fn()\r\n    console.error = jest.fn()\r\n  }\r\n})\r\n\r\nbeforeEach(() => {\r\n  // Clear all mocks before each test\r\n  jest.clearAllMocks()\r\n  jest.clearAllTimers()\r\n  \r\n  // Use fake timers for consistent testing\r\n  jest.useFakeTimers()\r\n})\r\n\r\nafterEach(() => {\r\n  // Restore real timers\r\n  jest.useRealTimers()\r\n  \r\n  // Reset modules to ensure clean state\r\n  jest.resetModules()\r\n})\r\n\r\nafterAll(async () => {\r\n  // Cleanup any global resources\r\n  await new Promise(resolve => setTimeout(resolve, 100))\r\n})\r\n\r\n// Global mocks\r\nglobal.fetch = jest.fn()\r\n\r\n// Mock Next.js modules\r\njest.mock('next/headers', () => ({\r\n  cookies: jest.fn(() => ({\r\n    get: jest.fn(),\r\n    set: jest.fn(),\r\n    delete: jest.fn(),\r\n    has: jest.fn()\r\n  })),\r\n  headers: jest.fn(() => ({\r\n    get: jest.fn(),\r\n    set: jest.fn(),\r\n    has: jest.fn(),\r\n    delete: jest.fn()\r\n  }))\r\n}))\r\n\r\njest.mock('next/navigation', () => ({\r\n  redirect: jest.fn(),\r\n  notFound: jest.fn()\r\n}))\r\n\r\n// Mock database\r\njest.mock('better-sqlite3', () => {\r\n  return jest.fn().mockImplementation(() => ({\r\n    prepare: jest.fn().mockReturnValue({\r\n      run: jest.fn(),\r\n      get: jest.fn(),\r\n      all: jest.fn()\r\n    }),\r\n    exec: jest.fn(),\r\n    close: jest.fn(),\r\n    pragma: jest.fn(),\r\n    transaction: jest.fn().mockImplementation((fn) => fn)\r\n  }))\r\n})\r\n\r\n// Mock bcrypt\r\njest.mock('bcrypt', () => ({\r\n  hash: jest.fn().mockResolvedValue('hashed-password'),\r\n  compare: jest.fn().mockResolvedValue(true),\r\n  genSalt: jest.fn().mockResolvedValue('salt')\r\n}))\r\n\r\n// Mock jsonwebtoken\r\njest.mock('jsonwebtoken', () => ({\r\n  sign: jest.fn().mockReturnValue('mock-jwt-token'),\r\n  verify: jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' }),\r\n  decode: jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' })\r\n}))\r\n\r\n// Mock winston logger\r\njest.mock('winston', () => ({\r\n  createLogger: jest.fn().mockReturnValue({\r\n    info: jest.fn(),\r\n    error: jest.fn(),\r\n    warn: jest.fn(),\r\n    debug: jest.fn()\r\n  }),\r\n  format: {\r\n    combine: jest.fn(),\r\n    timestamp: jest.fn(),\r\n    errors: jest.fn(),\r\n    json: jest.fn(),\r\n    printf: jest.fn()\r\n  },\r\n  transports: {\r\n    Console: jest.fn(),\r\n    File: jest.fn()\r\n  }\r\n}))\r\n\r\n// Mock winston-daily-rotate-file\r\njest.mock('winston-daily-rotate-file', () => jest.fn())\r\n\r\n// Test utilities\r\nexport const createMockRequest = (overrides = {}) => ({\r\n  method: 'GET',\r\n  url: '/test',\r\n  headers: {},\r\n  body: null,\r\n  query: {},\r\n  params: {},\r\n  ...overrides\r\n})\r\n\r\nexport const createMockResponse = () => {\r\n  const res = {\r\n    status: jest.fn().mockReturnThis(),\r\n    json: jest.fn().mockReturnThis(),\r\n    send: jest.fn().mockReturnThis(),\r\n    end: jest.fn().mockReturnThis(),\r\n    setHeader: jest.fn().mockReturnThis(),\r\n    getHeader: jest.fn(),\r\n    headers: {},\r\n    statusCode: 200\r\n  }\r\n  return res\r\n}\r\n\r\nexport const createMockDatabase = () => {\r\n  const mockDb = {\r\n    prepare: jest.fn().mockReturnValue({\r\n      run: jest.fn().mockReturnValue({ changes: 1, lastInsertRowid: 1 }),\r\n      get: jest.fn().mockReturnValue(null),\r\n      all: jest.fn().mockReturnValue([])\r\n    }),\r\n    exec: jest.fn(),\r\n    close: jest.fn(),\r\n    pragma: jest.fn(),\r\n    transaction: jest.fn().mockImplementation((fn) => fn)\r\n  }\r\n  \r\n  return mockDb\r\n}\r\n\r\nexport const createMockUser = (overrides = {}) => ({\r\n  id: 'test-user-id',\r\n  username: 'testuser',\r\n  email: 'test@example.com',\r\n  password: 'hashed-password',\r\n  role: 'user',\r\n  profile: JSON.stringify({\r\n    firstName: 'Test',\r\n    lastName: 'User',\r\n    theme: 'system'\r\n  }),\r\n  created_at: new Date().toISOString(),\r\n  updated_at: new Date().toISOString(),\r\n  ...overrides\r\n})\r\n\r\nexport const createMockParcelle = (overrides = {}) => ({\r\n  id: 'test-parcelle-id',\r\n  numero: 'P001',\r\n  transporteur: 'DHL',\r\n  poids: 1.5,\r\n  prix_achat: 25.50,\r\n  date_creation: new Date().toISOString(),\r\n  user_id: 'test-user-id',\r\n  notes: 'Test parcelle',\r\n  status: 'active',\r\n  ...overrides\r\n})\r\n\r\nexport const createMockProduct = (overrides = {}) => ({\r\n  id: 'test-product-id',\r\n  nom: 'Test Product',\r\n  prix: 15.99,\r\n  quantite: 1,\r\n  parcelle_id: 'test-parcelle-id',\r\n  description: 'Test product description',\r\n  status: 'available',\r\n  date_creation: new Date().toISOString(),\r\n  date_vente: null,\r\n  prix_vente: null,\r\n  plateforme: null,\r\n  frais_vente: 0,\r\n  benefice: null,\r\n  images: null,\r\n  tags: null,\r\n  ...overrides\r\n})\r\n\r\nexport const createMockSession = (overrides = {}) => ({\r\n  id: 'test-session-id',\r\n  user_id: 'test-user-id',\r\n  token: 'mock-jwt-token',\r\n  expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n  created_at: new Date().toISOString(),\r\n  ...overrides\r\n})\r\n\r\n// Database test utilities\r\nexport class DatabaseTestUtils {\r\n  static createInMemoryDatabase() {\r\n    return new Database(':memory:')\r\n  }\r\n\r\n  static async initializeTestSchema(db: any) {\r\n    const schema = `\r\n      CREATE TABLE IF NOT EXISTS users (\r\n        id TEXT PRIMARY KEY,\r\n        username TEXT UNIQUE NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        role TEXT DEFAULT 'user',\r\n        profile TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      );\r\n\r\n      CREATE TABLE IF NOT EXISTS parcelles (\r\n        id TEXT PRIMARY KEY,\r\n        numero TEXT UNIQUE NOT NULL,\r\n        transporteur TEXT NOT NULL,\r\n        poids REAL NOT NULL,\r\n        prix_achat REAL NOT NULL,\r\n        date_creation DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        user_id TEXT NOT NULL,\r\n        notes TEXT,\r\n        status TEXT DEFAULT 'active',\r\n        FOREIGN KEY (user_id) REFERENCES users (id)\r\n      );\r\n\r\n      CREATE TABLE IF NOT EXISTS products (\r\n        id TEXT PRIMARY KEY,\r\n        nom TEXT NOT NULL,\r\n        prix REAL NOT NULL,\r\n        quantite INTEGER NOT NULL,\r\n        parcelle_id TEXT NOT NULL,\r\n        description TEXT,\r\n        status TEXT DEFAULT 'available',\r\n        date_creation DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        date_vente DATETIME,\r\n        prix_vente REAL,\r\n        plateforme TEXT,\r\n        frais_vente REAL DEFAULT 0,\r\n        benefice REAL,\r\n        images TEXT,\r\n        tags TEXT,\r\n        FOREIGN KEY (parcelle_id) REFERENCES parcelles (id)\r\n      );\r\n\r\n      CREATE TABLE IF NOT EXISTS sessions (\r\n        id TEXT PRIMARY KEY,\r\n        user_id TEXT NOT NULL,\r\n        token TEXT UNIQUE NOT NULL,\r\n        expires_at DATETIME NOT NULL,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        FOREIGN KEY (user_id) REFERENCES users (id)\r\n      );\r\n    `\r\n    \r\n    db.exec(schema)\r\n  }\r\n\r\n  static async seedTestData(db: any) {\r\n    const user = createMockUser()\r\n    const parcelle = createMockParcelle()\r\n    const product = createMockProduct()\r\n    const session = createMockSession()\r\n\r\n    // Insert test data\r\n    db.prepare(`\r\n      INSERT INTO users (id, username, email, password, role, profile)\r\n      VALUES (?, ?, ?, ?, ?, ?)\r\n    `).run(user.id, user.username, user.email, user.password, user.role, user.profile)\r\n\r\n    db.prepare(`\r\n      INSERT INTO parcelles (id, numero, transporteur, poids, prix_achat, user_id, notes, status)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).run(parcelle.id, parcelle.numero, parcelle.transporteur, parcelle.poids, \r\n           parcelle.prix_achat, parcelle.user_id, parcelle.notes, parcelle.status)\r\n\r\n    db.prepare(`\r\n      INSERT INTO products (id, nom, prix, quantite, parcelle_id, description, status)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?)\r\n    `).run(product.id, product.nom, product.prix, product.quantite, \r\n           product.parcelle_id, product.description, product.status)\r\n\r\n    db.prepare(`\r\n      INSERT INTO sessions (id, user_id, token, expires_at)\r\n      VALUES (?, ?, ?, ?)\r\n    `).run(session.id, session.user_id, session.token, session.expires_at)\r\n\r\n    return { user, parcelle, product, session }\r\n  }\r\n\r\n  static async cleanDatabase(db: any) {\r\n    const tables = ['sessions', 'products', 'parcelles', 'users']\r\n    \r\n    for (const table of tables) {\r\n      db.exec(`DELETE FROM ${table}`)\r\n    }\r\n  }\r\n}\r\n\r\n// Service test utilities\r\nexport class ServiceTestUtils {\r\n  static createMockLogger() {\r\n    return {\r\n      info: jest.fn(),\r\n      error: jest.fn(),\r\n      warn: jest.fn(),\r\n      debug: jest.fn()\r\n    }\r\n  }\r\n\r\n  static createMockAuthService() {\r\n    return {\r\n      validateCredentials: jest.fn().mockResolvedValue(true),\r\n      hashPassword: jest.fn().mockResolvedValue('hashed-password'),\r\n      comparePassword: jest.fn().mockResolvedValue(true),\r\n      generateToken: jest.fn().mockReturnValue('mock-token'),\r\n      validateToken: jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' }),\r\n      createSession: jest.fn().mockResolvedValue(createMockSession()),\r\n      validateSession: jest.fn().mockResolvedValue(createMockSession()),\r\n      destroySession: jest.fn().mockResolvedValue(true)\r\n    }\r\n  }\r\n\r\n  static createMockDatabaseService() {\r\n    return {\r\n      users: {\r\n        findById: jest.fn().mockResolvedValue(createMockUser()),\r\n        findByEmail: jest.fn().mockResolvedValue(createMockUser()),\r\n        create: jest.fn().mockResolvedValue(createMockUser()),\r\n        update: jest.fn().mockResolvedValue(createMockUser()),\r\n        delete: jest.fn().mockResolvedValue(true)\r\n      },\r\n      parcelles: {\r\n        findById: jest.fn().mockResolvedValue(createMockParcelle()),\r\n        findByUserId: jest.fn().mockResolvedValue([createMockParcelle()]),\r\n        create: jest.fn().mockResolvedValue(createMockParcelle()),\r\n        update: jest.fn().mockResolvedValue(createMockParcelle()),\r\n        delete: jest.fn().mockResolvedValue(true)\r\n      },\r\n      products: {\r\n        findById: jest.fn().mockResolvedValue(createMockProduct()),\r\n        findByParcelleId: jest.fn().mockResolvedValue([createMockProduct()]),\r\n        create: jest.fn().mockResolvedValue(createMockProduct()),\r\n        update: jest.fn().mockResolvedValue(createMockProduct()),\r\n        delete: jest.fn().mockResolvedValue(true)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Async test utilities\r\nexport const waitForPromises = () => new Promise(resolve => setImmediate(resolve))\r\n\r\nexport const flushPromises = () => new Promise(resolve => setTimeout(resolve, 0))\r\n\r\n// Error testing utilities\r\nexport const expectToThrow = async (fn: () => Promise<any>, expectedError?: string) => {\r\n  try {\r\n    await fn()\r\n    throw new Error('Expected function to throw')\r\n  } catch (error) {\r\n    if (expectedError && !error.message.includes(expectedError)) {\r\n      throw new Error(`Expected error to contain \"${expectedError}\", got \"${error.message}\"`)\r\n    }\r\n  }\r\n}\r\n\r\nexport const expectToResolve = async (fn: () => Promise<any>) => {\r\n  try {\r\n    return await fn()\r\n  } catch (error) {\r\n    throw new Error(`Expected function to resolve, but it threw: ${error.message}`)\r\n  }\r\n}"],"version":3}