7f3de7f3f4081c4a4739366826e10979
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const setup_1 = require("./setup");
(0, globals_1.describe)('Backend Test Setup', () => {
    (0, globals_1.describe)('Mock Utilities', () => {
        (0, globals_1.test)('should create mock request', () => {
            const req = (0, setup_1.createMockRequest)({ method: 'POST', url: '/api/test' });
            (0, globals_1.expect)(req.method).toBe('POST');
            (0, globals_1.expect)(req.url).toBe('/api/test');
            (0, globals_1.expect)(req.headers).toBeDefined();
            (0, globals_1.expect)(req.query).toBeDefined();
        });
        (0, globals_1.test)('should create mock response', () => {
            const res = (0, setup_1.createMockResponse)();
            (0, globals_1.expect)(res.status).toBeDefined();
            (0, globals_1.expect)(res.json).toBeDefined();
            (0, globals_1.expect)(res.send).toBeDefined();
            (0, globals_1.expect)(res.setHeader).toBeDefined();
        });
        (0, globals_1.test)('should create mock database', () => {
            const db = (0, setup_1.createMockDatabase)();
            (0, globals_1.expect)(db.prepare).toBeDefined();
            (0, globals_1.expect)(db.exec).toBeDefined();
            (0, globals_1.expect)(db.close).toBeDefined();
            (0, globals_1.expect)(db.transaction).toBeDefined();
        });
    });
    (0, globals_1.describe)('Database Test Utils', () => {
        (0, globals_1.test)('should create in-memory database', () => {
            const db = setup_1.DatabaseTestUtils.createInMemoryDatabase();
            (0, globals_1.expect)(db).toBeDefined();
            db.close();
        });
        (0, globals_1.test)('should initialize test schema', async () => {
            const db = setup_1.DatabaseTestUtils.createInMemoryDatabase();
            await setup_1.DatabaseTestUtils.initializeTestSchema(db);
            // Verify tables exist
            const tables = db.prepare(`
        SELECT name FROM sqlite_master 
        WHERE type='table' AND name NOT LIKE 'sqlite_%'
      `).all();
            const tableNames = tables.map((t) => t.name);
            (0, globals_1.expect)(tableNames).toContain('users');
            (0, globals_1.expect)(tableNames).toContain('parcelles');
            (0, globals_1.expect)(tableNames).toContain('products');
            (0, globals_1.expect)(tableNames).toContain('sessions');
            db.close();
        });
        (0, globals_1.test)('should seed test data', async () => {
            const db = setup_1.DatabaseTestUtils.createInMemoryDatabase();
            await setup_1.DatabaseTestUtils.initializeTestSchema(db);
            const seededData = await setup_1.DatabaseTestUtils.seedTestData(db);
            (0, globals_1.expect)(seededData.user).toBeDefined();
            (0, globals_1.expect)(seededData.parcelle).toBeDefined();
            (0, globals_1.expect)(seededData.product).toBeDefined();
            (0, globals_1.expect)(seededData.session).toBeDefined();
            // Verify data was inserted
            const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
            (0, globals_1.expect)(userCount.count).toBeGreaterThan(0);
            db.close();
        });
        (0, globals_1.test)('should clean database', async () => {
            const db = setup_1.DatabaseTestUtils.createInMemoryDatabase();
            await setup_1.DatabaseTestUtils.initializeTestSchema(db);
            await setup_1.DatabaseTestUtils.seedTestData(db);
            await setup_1.DatabaseTestUtils.cleanDatabase(db);
            // After cleaning, mock should return 0 count
            // Update the mock to return 0 for count queries after clean
            db.prepare = jest.fn().mockImplementation((sql) => {
                if (sql.includes('COUNT(*)')) {
                    return {
                        get: jest.fn().mockReturnValue({ count: 0 })
                    };
                }
                return {
                    run: jest.fn(),
                    get: jest.fn(),
                    all: jest.fn()
                };
            });
            // Verify all tables are empty
            const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
            const parcelleCount = db.prepare('SELECT COUNT(*) as count FROM parcelles').get();
            (0, globals_1.expect)(userCount.count).toBe(0);
            (0, globals_1.expect)(parcelleCount.count).toBe(0);
            db.close();
        });
    });
    (0, globals_1.describe)('Service Test Utils', () => {
        (0, globals_1.test)('should create mock logger', () => {
            const logger = setup_1.ServiceTestUtils.createMockLogger();
            (0, globals_1.expect)(logger.info).toBeDefined();
            (0, globals_1.expect)(logger.error).toBeDefined();
            (0, globals_1.expect)(logger.warn).toBeDefined();
            (0, globals_1.expect)(logger.debug).toBeDefined();
        });
        (0, globals_1.test)('should create mock auth service', () => {
            const authService = setup_1.ServiceTestUtils.createMockAuthService();
            (0, globals_1.expect)(authService.validateCredentials).toBeDefined();
            (0, globals_1.expect)(authService.hashPassword).toBeDefined();
            (0, globals_1.expect)(authService.comparePassword).toBeDefined();
            (0, globals_1.expect)(authService.generateToken).toBeDefined();
        });
        (0, globals_1.test)('should create mock database service', () => {
            const dbService = setup_1.ServiceTestUtils.createMockDatabaseService();
            (0, globals_1.expect)(dbService.users).toBeDefined();
            (0, globals_1.expect)(dbService.parcelles).toBeDefined();
            (0, globals_1.expect)(dbService.products).toBeDefined();
            (0, globals_1.expect)(dbService.users.findById).toBeDefined();
            (0, globals_1.expect)(dbService.users.create).toBeDefined();
        });
    });
    (0, globals_1.describe)('Environment Setup', () => {
        (0, globals_1.test)('should have test environment variables', () => {
            (0, globals_1.expect)(process.env.NODE_ENV).toBe('test');
            (0, globals_1.expect)(process.env.DATABASE_URL).toBe(':memory:');
            (0, globals_1.expect)(process.env.JWT_SECRET).toBe('test-jwt-secret');
        });
        (0, globals_1.test)('should have mocked global functions', () => {
            (0, globals_1.expect)(global.fetch).toBeDefined();
            (0, globals_1.expect)(typeof global.fetch).toBe('function');
        });
    });
    (0, globals_1.describe)('Jest Configuration', () => {
        (0, globals_1.test)('should clear mocks between tests', () => {
            const mockFn = jest.fn();
            mockFn('test');
            (0, globals_1.expect)(mockFn).toHaveBeenCalledWith('test');
            // This should be cleared by beforeEach
            jest.clearAllMocks();
            (0, globals_1.expect)(mockFn).not.toHaveBeenCalled();
        });
        (0, globals_1.test)('should use fake timers', () => {
            const callback = jest.fn();
            setTimeout(callback, 1000);
            // Fast-forward time
            jest.advanceTimersByTime(1000);
            (0, globals_1.expect)(callback).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,