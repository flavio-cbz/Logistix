4a5979f99243a64d02d7d68d62081a02
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectToResolve = exports.expectToThrow = exports.flushPromises = exports.waitForPromises = exports.ServiceTestUtils = exports.DatabaseTestUtils = exports.createMockSession = exports.createMockProduct = exports.createMockParcelle = exports.createMockUser = exports.createMockDatabase = exports.createMockResponse = exports.createMockRequest = void 0;
const globals_1 = require("@jest/globals");
// Mock Next.js modules
globals_1.jest.mock('next/headers', () => ({
    cookies: globals_1.jest.fn(() => ({
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        has: globals_1.jest.fn()
    })),
    headers: globals_1.jest.fn(() => ({
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        has: globals_1.jest.fn(),
        delete: globals_1.jest.fn()
    }))
}));
globals_1.jest.mock('next/navigation', () => ({
    redirect: globals_1.jest.fn(),
    notFound: globals_1.jest.fn()
}));
// Mock database
globals_1.jest.mock('better-sqlite3', () => {
    return globals_1.jest.fn().mockImplementation(() => ({
        prepare: globals_1.jest.fn().mockReturnValue({
            run: globals_1.jest.fn(),
            get: globals_1.jest.fn(),
            all: globals_1.jest.fn()
        }),
        exec: globals_1.jest.fn(),
        close: globals_1.jest.fn(),
        pragma: globals_1.jest.fn(),
        transaction: globals_1.jest.fn().mockImplementation((fn) => fn)
    }));
});
// Mock bcrypt
globals_1.jest.mock('bcrypt', () => ({
    hash: globals_1.jest.fn().mockResolvedValue('hashed-password'),
    compare: globals_1.jest.fn().mockResolvedValue(true),
    genSalt: globals_1.jest.fn().mockResolvedValue('salt')
}));
// Mock jsonwebtoken
globals_1.jest.mock('jsonwebtoken', () => ({
    sign: globals_1.jest.fn().mockReturnValue('mock-jwt-token'),
    verify: globals_1.jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' }),
    decode: globals_1.jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' })
}));
// Mock winston logger
globals_1.jest.mock('winston', () => ({
    createLogger: globals_1.jest.fn().mockReturnValue({
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn()
    }),
    format: {
        combine: globals_1.jest.fn(),
        timestamp: globals_1.jest.fn(),
        errors: globals_1.jest.fn(),
        json: globals_1.jest.fn(),
        printf: globals_1.jest.fn()
    },
    transports: {
        Console: globals_1.jest.fn(),
        File: globals_1.jest.fn()
    }
}));
// Mock winston-daily-rotate-file
globals_1.jest.mock('winston-daily-rotate-file', () => globals_1.jest.fn());
// Global test setup for backend tests
beforeAll(async () => {
    // Set test environment variables
    process.env.NODE_ENV = 'test';
    process.env.DATABASE_URL = ':memory:';
    process.env.JWT_SECRET = 'test-jwt-secret';
    process.env.BCRYPT_ROUNDS = '4'; // Faster hashing for tests
    // Suppress console output in tests unless debugging
    if (!process.env.DEBUG_TESTS) {
        console.log = globals_1.jest.fn();
        console.info = globals_1.jest.fn();
        console.warn = globals_1.jest.fn();
        console.error = globals_1.jest.fn();
    }
});
beforeEach(() => {
    // Clear all mocks before each test
    globals_1.jest.clearAllMocks();
    globals_1.jest.clearAllTimers();
    // Use fake timers for consistent testing
    globals_1.jest.useFakeTimers();
});
afterEach(() => {
    // Restore real timers
    globals_1.jest.useRealTimers();
    // Reset modules to ensure clean state
    globals_1.jest.resetModules();
});
afterAll(async () => {
    // Cleanup any global resources
    await new Promise(resolve => setTimeout(resolve, 100));
});
// Global mocks
global.fetch = globals_1.jest.fn();
// Test utilities
const createMockRequest = (overrides = {}) => ({
    method: 'GET',
    url: '/test',
    headers: {},
    body: null,
    query: {},
    params: {},
    ...overrides
});
exports.createMockRequest = createMockRequest;
const createMockResponse = () => {
    const res = {
        status: globals_1.jest.fn().mockReturnThis(),
        json: globals_1.jest.fn().mockReturnThis(),
        send: globals_1.jest.fn().mockReturnThis(),
        end: globals_1.jest.fn().mockReturnThis(),
        setHeader: globals_1.jest.fn().mockReturnThis(),
        getHeader: globals_1.jest.fn(),
        headers: {},
        statusCode: 200
    };
    return res;
};
exports.createMockResponse = createMockResponse;
const createMockDatabase = () => {
    const mockDb = {
        prepare: globals_1.jest.fn().mockReturnValue({
            run: globals_1.jest.fn().mockReturnValue({ changes: 1, lastInsertRowid: 1 }),
            get: globals_1.jest.fn().mockReturnValue(null),
            all: globals_1.jest.fn().mockReturnValue([])
        }),
        exec: globals_1.jest.fn(),
        close: globals_1.jest.fn(),
        pragma: globals_1.jest.fn(),
        transaction: globals_1.jest.fn().mockImplementation((fn) => fn)
    };
    return mockDb;
};
exports.createMockDatabase = createMockDatabase;
const createMockUser = (overrides = {}) => ({
    id: 'test-user-id',
    username: 'testuser',
    email: 'test@example.com',
    password: 'hashed-password',
    role: 'user',
    profile: JSON.stringify({
        firstName: 'Test',
        lastName: 'User',
        theme: 'system'
    }),
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    ...overrides
});
exports.createMockUser = createMockUser;
const createMockParcelle = (overrides = {}) => ({
    id: 'test-parcelle-id',
    numero: 'P001',
    transporteur: 'DHL',
    poids: 1.5,
    prix_achat: 25.50,
    date_creation: new Date().toISOString(),
    user_id: 'test-user-id',
    notes: 'Test parcelle',
    status: 'active',
    ...overrides
});
exports.createMockParcelle = createMockParcelle;
const createMockProduct = (overrides = {}) => ({
    id: 'test-product-id',
    nom: 'Test Product',
    prix: 15.99,
    quantite: 1,
    parcelle_id: 'test-parcelle-id',
    description: 'Test product description',
    status: 'available',
    date_creation: new Date().toISOString(),
    date_vente: null,
    prix_vente: null,
    plateforme: null,
    frais_vente: 0,
    benefice: null,
    images: null,
    tags: null,
    ...overrides
});
exports.createMockProduct = createMockProduct;
const createMockSession = (overrides = {}) => ({
    id: 'test-session-id',
    user_id: 'test-user-id',
    token: 'mock-jwt-token',
    expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    created_at: new Date().toISOString(),
    ...overrides
});
exports.createMockSession = createMockSession;
// Database test utilities
class DatabaseTestUtils {
    static createInMemoryDatabase() {
        // In test environment, return a mock database
        return (0, exports.createMockDatabase)();
    }
    static async initializeTestSchema(db) {
        const schema = `
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        role TEXT DEFAULT 'user',
        profile TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS parcelles (
        id TEXT PRIMARY KEY,
        numero TEXT UNIQUE NOT NULL,
        transporteur TEXT NOT NULL,
        poids REAL NOT NULL,
        prix_achat REAL NOT NULL,
        date_creation DATETIME DEFAULT CURRENT_TIMESTAMP,
        user_id TEXT NOT NULL,
        notes TEXT,
        status TEXT DEFAULT 'active',
        FOREIGN KEY (user_id) REFERENCES users (id)
      );

      CREATE TABLE IF NOT EXISTS products (
        id TEXT PRIMARY KEY,
        nom TEXT NOT NULL,
        prix REAL NOT NULL,
        quantite INTEGER NOT NULL,
        parcelle_id TEXT NOT NULL,
        description TEXT,
        status TEXT DEFAULT 'available',
        date_creation DATETIME DEFAULT CURRENT_TIMESTAMP,
        date_vente DATETIME,
        prix_vente REAL,
        plateforme TEXT,
        frais_vente REAL DEFAULT 0,
        benefice REAL,
        images TEXT,
        tags TEXT,
        FOREIGN KEY (parcelle_id) REFERENCES parcelles (id)
      );

      CREATE TABLE IF NOT EXISTS sessions (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        token TEXT UNIQUE NOT NULL,
        expires_at DATETIME NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
      );
    `;
        db.exec(schema);
    }
    static async seedTestData(db) {
        const user = (0, exports.createMockUser)();
        const parcelle = (0, exports.createMockParcelle)();
        const product = (0, exports.createMockProduct)();
        const session = (0, exports.createMockSession)();
        // Insert test data
        db.prepare(`
      INSERT INTO users (id, username, email, password, role, profile)
      VALUES (?, ?, ?, ?, ?, ?)
    `).run(user.id, user.username, user.email, user.password, user.role, user.profile);
        db.prepare(`
      INSERT INTO parcelles (id, numero, transporteur, poids, prix_achat, user_id, notes, status)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `).run(parcelle.id, parcelle.numero, parcelle.transporteur, parcelle.poids, parcelle.prix_achat, parcelle.user_id, parcelle.notes, parcelle.status);
        db.prepare(`
      INSERT INTO products (id, nom, prix, quantite, parcelle_id, description, status)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `).run(product.id, product.nom, product.prix, product.quantite, product.parcelle_id, product.description, product.status);
        db.prepare(`
      INSERT INTO sessions (id, user_id, token, expires_at)
      VALUES (?, ?, ?, ?)
    `).run(session.id, session.user_id, session.token, session.expires_at);
        return { user, parcelle, product, session };
    }
    static async cleanDatabase(db) {
        const tables = ['sessions', 'products', 'parcelles', 'users'];
        for (const table of tables) {
            db.exec(`DELETE FROM ${table}`);
        }
    }
}
exports.DatabaseTestUtils = DatabaseTestUtils;
// Service test utilities
class ServiceTestUtils {
    static createMockLogger() {
        return {
            info: globals_1.jest.fn(),
            error: globals_1.jest.fn(),
            warn: globals_1.jest.fn(),
            debug: globals_1.jest.fn()
        };
    }
    static createMockAuthService() {
        return {
            validateCredentials: globals_1.jest.fn().mockResolvedValue(true),
            hashPassword: globals_1.jest.fn().mockResolvedValue('hashed-password'),
            comparePassword: globals_1.jest.fn().mockResolvedValue(true),
            generateToken: globals_1.jest.fn().mockReturnValue('mock-token'),
            validateToken: globals_1.jest.fn().mockReturnValue({ userId: 'test-user-id', role: 'user' }),
            createSession: globals_1.jest.fn().mockResolvedValue((0, exports.createMockSession)()),
            validateSession: globals_1.jest.fn().mockResolvedValue((0, exports.createMockSession)()),
            destroySession: globals_1.jest.fn().mockResolvedValue(true)
        };
    }
    static createMockDatabaseService() {
        return {
            users: {
                findById: globals_1.jest.fn().mockResolvedValue((0, exports.createMockUser)()),
                findByEmail: globals_1.jest.fn().mockResolvedValue((0, exports.createMockUser)()),
                create: globals_1.jest.fn().mockResolvedValue((0, exports.createMockUser)()),
                update: globals_1.jest.fn().mockResolvedValue((0, exports.createMockUser)()),
                delete: globals_1.jest.fn().mockResolvedValue(true)
            },
            parcelles: {
                findById: globals_1.jest.fn().mockResolvedValue((0, exports.createMockParcelle)()),
                findByUserId: globals_1.jest.fn().mockResolvedValue([(0, exports.createMockParcelle)()]),
                create: globals_1.jest.fn().mockResolvedValue((0, exports.createMockParcelle)()),
                update: globals_1.jest.fn().mockResolvedValue((0, exports.createMockParcelle)()),
                delete: globals_1.jest.fn().mockResolvedValue(true)
            },
            products: {
                findById: globals_1.jest.fn().mockResolvedValue((0, exports.createMockProduct)()),
                findByParcelleId: globals_1.jest.fn().mockResolvedValue([(0, exports.createMockProduct)()]),
                create: globals_1.jest.fn().mockResolvedValue((0, exports.createMockProduct)()),
                update: globals_1.jest.fn().mockResolvedValue((0, exports.createMockProduct)()),
                delete: globals_1.jest.fn().mockResolvedValue(true)
            }
        };
    }
}
exports.ServiceTestUtils = ServiceTestUtils;
// Async test utilities
const waitForPromises = () => new Promise(resolve => setImmediate(resolve));
exports.waitForPromises = waitForPromises;
const flushPromises = () => new Promise(resolve => setTimeout(resolve, 0));
exports.flushPromises = flushPromises;
// Error testing utilities
const expectToThrow = async (fn, expectedError) => {
    try {
        await fn();
        throw new Error('Expected function to throw');
    }
    catch (error) {
        if (expectedError && !error.message.includes(expectedError)) {
            throw new Error(`Expected error to contain "${expectedError}", got "${error.message}"`);
        }
    }
};
exports.expectToThrow = expectToThrow;
const expectToResolve = async (fn) => {
    try {
        return await fn();
    }
    catch (error) {
        throw new Error(`Expected function to resolve, but it threw: ${error.message}`);
    }
};
exports.expectToResolve = expectToResolve;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,