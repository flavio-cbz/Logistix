dfa1724d2addca7165969ae3ef799bd3
"use strict";
/**
 * Request Logging Middleware Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const server_1 = require("next/server");
const request_logging_1 = require("../request-logging");
// Mock the logging utilities
vitest_1.vi.mock('@/lib/utils/logging', () => ({
    createRequestLogger: vitest_1.vi.fn(() => ({
        http: vitest_1.vi.fn(),
        info: vitest_1.vi.fn(),
        error: vitest_1.vi.fn(),
        debug: vitest_1.vi.fn(),
        performance: vitest_1.vi.fn()
    })),
    apiRequestLogger: {
        logResponse: vitest_1.vi.fn(),
        logError: vitest_1.vi.fn()
    }
}));
// Mock uuid
vitest_1.vi.mock('uuid', () => ({
    v4: vitest_1.vi.fn(() => 'test-request-id-123')
}));
(0, vitest_1.describe)('Request Logging Middleware', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
        vitest_1.vi.useFakeTimers();
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.useRealTimers();
    });
    (0, vitest_1.describe)('withRequestLogging', () => {
        (0, vitest_1.it)('should log successful requests', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                return server_1.NextResponse.json({ success: true });
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test', {
                method: 'GET',
                headers: {
                    'user-agent': 'test-agent',
                    'x-forwarded-for': '192.168.1.1'
                }
            });
            vitest_1.vi.advanceTimersByTime(100);
            const response = await wrappedHandler(request);
            (0, vitest_1.expect)(response).toBeDefined();
            (0, vitest_1.expect)(response.headers.get('x-request-id')).toBe('test-request-id-123');
            (0, vitest_1.expect)(mockHandler).toHaveBeenCalled();
        });
        (0, vitest_1.it)('should log failed requests', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                throw new Error('Handler error');
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test', {
                method: 'POST'
            });
            vitest_1.vi.advanceTimersByTime(200);
            await (0, vitest_1.expect)(wrappedHandler(request)).rejects.toThrow('Handler error');
        });
        (0, vitest_1.it)('should handle requests without optional headers', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                return server_1.NextResponse.json({ success: true });
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test', {
                method: 'GET'
            });
            const response = await wrappedHandler(request);
            (0, vitest_1.expect)(response).toBeDefined();
            (0, vitest_1.expect)(mockHandler).toHaveBeenCalled();
        });
    });
    (0, vitest_1.describe)('withDatabaseLogging', () => {
        (0, vitest_1.it)('should log successful database operations', async () => {
            const mockOperation = vitest_1.vi.fn(async (param1, param2) => {
                return { id: 1, name: param1, count: param2 };
            });
            const wrappedOperation = (0, request_logging_1.withDatabaseLogging)('GET_USER', mockOperation);
            vitest_1.vi.advanceTimersByTime(150);
            const result = await wrappedOperation('test-user', 42);
            (0, vitest_1.expect)(result).toEqual({ id: 1, name: 'test-user', count: 42 });
            (0, vitest_1.expect)(mockOperation).toHaveBeenCalledWith('test-user', 42);
        });
        (0, vitest_1.it)('should log failed database operations', async () => {
            const mockOperation = vitest_1.vi.fn(async () => {
                throw new Error('Database connection failed');
            });
            const wrappedOperation = (0, request_logging_1.withDatabaseLogging)('CREATE_USER', mockOperation);
            vitest_1.vi.advanceTimersByTime(300);
            await (0, vitest_1.expect)(wrappedOperation()).rejects.toThrow('Database connection failed');
        });
    });
    (0, vitest_1.describe)('withServiceLogging', () => {
        (0, vitest_1.it)('should log successful service operations', async () => {
            const mockService = vitest_1.vi.fn(async (data) => {
                return { processed: true, data };
            });
            const wrappedService = (0, request_logging_1.withServiceLogging)('UserService', 'processUser', mockService);
            vitest_1.vi.advanceTimersByTime(250);
            const result = await wrappedService({ name: 'John' });
            (0, vitest_1.expect)(result).toEqual({ processed: true, data: { name: 'John' } });
            (0, vitest_1.expect)(mockService).toHaveBeenCalledWith({ name: 'John' });
        });
        (0, vitest_1.it)('should log failed service operations', async () => {
            const mockService = vitest_1.vi.fn(async () => {
                throw new Error('Service unavailable');
            });
            const wrappedService = (0, request_logging_1.withServiceLogging)('EmailService', 'sendEmail', mockService);
            vitest_1.vi.advanceTimersByTime(100);
            await (0, vitest_1.expect)(wrappedService()).rejects.toThrow('Service unavailable');
        });
    });
    (0, vitest_1.describe)('withPerformanceLogging', () => {
        (0, vitest_1.it)('should log slow operations', async () => {
            const slowOperation = vitest_1.vi.fn(async () => {
                return 'completed';
            });
            const wrappedOperation = (0, request_logging_1.withPerformanceLogging)('SLOW_OPERATION', slowOperation, 500);
            vitest_1.vi.advanceTimersByTime(1000); // Exceed threshold
            const result = await wrappedOperation();
            (0, vitest_1.expect)(result).toBe('completed');
            (0, vitest_1.expect)(slowOperation).toHaveBeenCalled();
        });
        (0, vitest_1.it)('should log fast operations without warnings', async () => {
            const fastOperation = vitest_1.vi.fn(async () => {
                return 'completed';
            });
            const wrappedOperation = (0, request_logging_1.withPerformanceLogging)('FAST_OPERATION', fastOperation, 1000);
            vitest_1.vi.advanceTimersByTime(100); // Under threshold
            const result = await wrappedOperation();
            (0, vitest_1.expect)(result).toBe('completed');
            (0, vitest_1.expect)(fastOperation).toHaveBeenCalled();
        });
        (0, vitest_1.it)('should handle synchronous functions', async () => {
            const syncOperation = vitest_1.vi.fn(() => {
                return 'sync result';
            });
            const wrappedOperation = (0, request_logging_1.withPerformanceLogging)('SYNC_OPERATION', syncOperation);
            vitest_1.vi.advanceTimersByTime(50);
            const result = await wrappedOperation();
            (0, vitest_1.expect)(result).toBe('sync result');
            (0, vitest_1.expect)(syncOperation).toHaveBeenCalled();
        });
        (0, vitest_1.it)('should log failed operations', async () => {
            const failingOperation = vitest_1.vi.fn(async () => {
                throw new Error('Operation failed');
            });
            const wrappedOperation = (0, request_logging_1.withPerformanceLogging)('FAILING_OPERATION', failingOperation);
            vitest_1.vi.advanceTimersByTime(200);
            await (0, vitest_1.expect)(wrappedOperation()).rejects.toThrow('Operation failed');
        });
    });
    (0, vitest_1.describe)('Header sanitization', () => {
        (0, vitest_1.it)('should sanitize sensitive headers in logs', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                return server_1.NextResponse.json({ success: true });
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test', {
                method: 'POST',
                headers: {
                    'authorization': 'Bearer secret-token',
                    'cookie': 'session=secret-session',
                    'x-api-key': 'secret-api-key',
                    'content-type': 'application/json'
                }
            });
            const response = await wrappedHandler(request);
            (0, vitest_1.expect)(response).toBeDefined();
            (0, vitest_1.expect)(mockHandler).toHaveBeenCalled();
            // Verify that the request was processed with sanitized headers
            const processedRequest = mockHandler.mock.calls[0][0];
            (0, vitest_1.expect)(processedRequest.headers.get('x-request-id')).toBe('test-request-id-123');
        });
    });
    (0, vitest_1.describe)('Response size calculation', () => {
        (0, vitest_1.it)('should handle responses with content-length header', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                const response = server_1.NextResponse.json({ data: 'test' });
                response.headers.set('content-length', '1024');
                return response;
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test');
            const response = await wrappedHandler(request);
            (0, vitest_1.expect)(response).toBeDefined();
            (0, vitest_1.expect)(response.headers.get('content-length')).toBe('1024');
        });
        (0, vitest_1.it)('should handle responses without content-length header', async () => {
            const mockHandler = vitest_1.vi.fn(async (req) => {
                return server_1.NextResponse.json({ data: 'test' });
            });
            const wrappedHandler = (0, request_logging_1.withRequestLogging)(mockHandler);
            const request = new server_1.NextRequest('http://localhost:3000/api/test');
            const response = await wrappedHandler(request);
            (0, vitest_1.expect)(response).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRjpcXFlvdWNsb3VkXFxEb2N1bWVudHNcXFByb2pldHNcXExvZ2lzdGl4XFxsaWJcXG1pZGRsZXdhcmVzXFxfX3Rlc3RzX19cXHJlcXVlc3QtbG9nZ2luZy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCxtQ0FBeUU7QUFDekUsd0NBQXdEO0FBQ3hELHdEQUs0QjtBQUU1Qiw2QkFBNkI7QUFDN0IsV0FBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLG1CQUFtQixFQUFFLFdBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtRQUNiLElBQUksRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2IsS0FBSyxFQUFFLFdBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDZCxLQUFLLEVBQUUsV0FBRSxDQUFDLEVBQUUsRUFBRTtRQUNkLFdBQVcsRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO0tBQ3JCLENBQUMsQ0FBQztJQUNILGdCQUFnQixFQUFFO1FBQ2hCLFdBQVcsRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BCLFFBQVEsRUFBRSxXQUFFLENBQUMsRUFBRSxFQUFFO0tBQ2xCO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixZQUFZO0FBQ1osV0FBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNyQixFQUFFLEVBQUUsV0FBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztDQUN2QyxDQUFDLENBQUMsQ0FBQztBQUVKLElBQUEsaUJBQVEsRUFBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsSUFBQSxtQkFBVSxFQUFDLEdBQUcsRUFBRTtRQUNkLFdBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNuQixXQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDckIsQ0FB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LENBQUM7WUFDL0IsSUFBQSxlQUFNLEVBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsV0FBRSxFQUFDLHVEQUF1RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JFLE1BQU0sV0FBVyxHQUFHLFdBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQWdCLEVBQUUsRUFBRTtnQkFDbkQsT0FBTyxxQkFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxjQUFjLEdBQUcsSUFBQSxvQ0FBa0IsRUFBQyxXQUFXLENBQUMsQ0FBQztZQUV2RCxNQUFNLE9BQU8sR0FBRyxJQUFJLG9CQUFXLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztZQUVsRSxNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUvQyxJQUFBLGVBQU0sRUFBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRjpcXFlvdWNsb3VkXFxEb2N1bWVudHNcXFByb2pldHNcXExvZ2lzdGl4XFxsaWJcXG1pZGRsZXdhcmVzXFxfX3Rlc3RzX19cXHJlcXVlc3QtbG9nZ2luZy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBSZXF1ZXN0IExvZ2dpbmcgTWlkZGxld2FyZSBUZXN0c1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCB2aSwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoIH0gZnJvbSAndml0ZXN0JztcclxuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IHtcclxuICB3aXRoUmVxdWVzdExvZ2dpbmcsXHJcbiAgd2l0aERhdGFiYXNlTG9nZ2luZyxcclxuICB3aXRoU2VydmljZUxvZ2dpbmcsXHJcbiAgd2l0aFBlcmZvcm1hbmNlTG9nZ2luZ1xyXG59IGZyb20gJy4uL3JlcXVlc3QtbG9nZ2luZyc7XHJcblxyXG4vLyBNb2NrIHRoZSBsb2dnaW5nIHV0aWxpdGllc1xyXG52aS5tb2NrKCdAL2xpYi91dGlscy9sb2dnaW5nJywgKCkgPT4gKHtcclxuICBjcmVhdGVSZXF1ZXN0TG9nZ2VyOiB2aS5mbigoKSA9PiAoe1xyXG4gICAgaHR0cDogdmkuZm4oKSxcclxuICAgIGluZm86IHZpLmZuKCksXHJcbiAgICBlcnJvcjogdmkuZm4oKSxcclxuICAgIGRlYnVnOiB2aS5mbigpLFxyXG4gICAgcGVyZm9ybWFuY2U6IHZpLmZuKClcclxuICB9KSksXHJcbiAgYXBpUmVxdWVzdExvZ2dlcjoge1xyXG4gICAgbG9nUmVzcG9uc2U6IHZpLmZuKCksXHJcbiAgICBsb2dFcnJvcjogdmkuZm4oKVxyXG4gIH1cclxufSkpO1xyXG5cclxuLy8gTW9jayB1dWlkXHJcbnZpLm1vY2soJ3V1aWQnLCAoKSA9PiAoe1xyXG4gIHY0OiB2aS5mbigoKSA9PiAndGVzdC1yZXF1ZXN0LWlkLTEyMycpXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdSZXF1ZXN0IExvZ2dpbmcgTWlkZGxld2FyZScsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHZpLmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIHZpLnVzZUZha2VUaW1lcnMoKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIHZpLnVzZVJlYWxUaW1lcnMoKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3dpdGhSZXF1ZXN0TG9nZ2luZycsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgbG9nIHN1Y2Nlc3NmdWwgcmVxdWVzdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tIYW5kbGVyID0gdmkuZm4oYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QpID0+IHtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRIYW5kbGVyID0gd2l0aFJlcXVlc3RMb2dnaW5nKG1vY2tIYW5kbGVyKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdCcsIHtcclxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICd1c2VyLWFnZW50JzogJ3Rlc3QtYWdlbnQnLFxyXG4gICAgICAgICAgJ3gtZm9yd2FyZGVkLWZvcic6ICcxOTIuMTY4LjEuMSdcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmkuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDApO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3cmFwcGVkSGFuZGxlcihyZXF1ZXN0KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3QtaWQnKSkudG9CZSgndGVzdC1yZXF1ZXN0LWlkLTEyMycpO1xyXG4gICAgICBleHBlY3QobW9ja0hhbmRsZXIpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9nIGZhaWxlZCByZXF1ZXN0cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0hhbmRsZXIgPSB2aS5mbihhc3luYyAocmVxOiBOZXh0UmVxdWVzdCkgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFuZGxlciBlcnJvcicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRIYW5kbGVyID0gd2l0aFJlcXVlc3RMb2dnaW5nKG1vY2tIYW5kbGVyKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdCcsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZpLmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwKTtcclxuXHJcbiAgICAgIGF3YWl0IGV4cGVjdCh3cmFwcGVkSGFuZGxlcihyZXF1ZXN0KSkucmVqZWN0cy50b1Rocm93KCdIYW5kbGVyIGVycm9yJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSByZXF1ZXN0cyB3aXRob3V0IG9wdGlvbmFsIGhlYWRlcnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tIYW5kbGVyID0gdmkuZm4oYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QpID0+IHtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRIYW5kbGVyID0gd2l0aFJlcXVlc3RMb2dnaW5nKG1vY2tIYW5kbGVyKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdCcsIHtcclxuICAgICAgICBtZXRob2Q6ICdHRVQnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3cmFwcGVkSGFuZGxlcihyZXF1ZXN0KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9CZURlZmluZWQoKTtcclxuICAgICAgZXhwZWN0KG1vY2tIYW5kbGVyKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3dpdGhEYXRhYmFzZUxvZ2dpbmcnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGxvZyBzdWNjZXNzZnVsIGRhdGFiYXNlIG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tPcGVyYXRpb24gPSB2aS5mbihhc3luYyAocGFyYW0xOiBzdHJpbmcsIHBhcmFtMjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgaWQ6IDEsIG5hbWU6IHBhcmFtMSwgY291bnQ6IHBhcmFtMiB9O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRPcGVyYXRpb24gPSB3aXRoRGF0YWJhc2VMb2dnaW5nKCdHRVRfVVNFUicsIG1vY2tPcGVyYXRpb24pO1xyXG5cclxuICAgICAgdmkuYWR2YW5jZVRpbWVyc0J5VGltZSgxNTApO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd3JhcHBlZE9wZXJhdGlvbigndGVzdC11c2VyJywgNDIpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IGlkOiAxLCBuYW1lOiAndGVzdC11c2VyJywgY291bnQ6IDQyIH0pO1xyXG4gICAgICBleHBlY3QobW9ja09wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QtdXNlcicsIDQyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9nIGZhaWxlZCBkYXRhYmFzZSBvcGVyYXRpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrT3BlcmF0aW9uID0gdmkuZm4oYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB3cmFwcGVkT3BlcmF0aW9uID0gd2l0aERhdGFiYXNlTG9nZ2luZygnQ1JFQVRFX1VTRVInLCBtb2NrT3BlcmF0aW9uKTtcclxuXHJcbiAgICAgIHZpLmFkdmFuY2VUaW1lcnNCeVRpbWUoMzAwKTtcclxuXHJcbiAgICAgIGF3YWl0IGV4cGVjdCh3cmFwcGVkT3BlcmF0aW9uKCkpLnJlamVjdHMudG9UaHJvdygnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnd2l0aFNlcnZpY2VMb2dnaW5nJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBsb2cgc3VjY2Vzc2Z1bCBzZXJ2aWNlIG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tTZXJ2aWNlID0gdmkuZm4oYXN5bmMgKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7IHByb2Nlc3NlZDogdHJ1ZSwgZGF0YSB9O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRTZXJ2aWNlID0gd2l0aFNlcnZpY2VMb2dnaW5nKCdVc2VyU2VydmljZScsICdwcm9jZXNzVXNlcicsIG1vY2tTZXJ2aWNlKTtcclxuXHJcbiAgICAgIHZpLmFkdmFuY2VUaW1lcnNCeVRpbWUoMjUwKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdyYXBwZWRTZXJ2aWNlKHsgbmFtZTogJ0pvaG4nIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IHByb2Nlc3NlZDogdHJ1ZSwgZGF0YTogeyBuYW1lOiAnSm9obicgfSB9KTtcclxuICAgICAgZXhwZWN0KG1vY2tTZXJ2aWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IG5hbWU6ICdKb2huJyB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9nIGZhaWxlZCBzZXJ2aWNlIG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tTZXJ2aWNlID0gdmkuZm4oYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmljZSB1bmF2YWlsYWJsZScpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZWRTZXJ2aWNlID0gd2l0aFNlcnZpY2VMb2dnaW5nKCdFbWFpbFNlcnZpY2UnLCAnc2VuZEVtYWlsJywgbW9ja1NlcnZpY2UpO1xyXG5cclxuICAgICAgdmkuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDApO1xyXG5cclxuICAgICAgYXdhaXQgZXhwZWN0KHdyYXBwZWRTZXJ2aWNlKCkpLnJlamVjdHMudG9UaHJvdygnU2VydmljZSB1bmF2YWlsYWJsZScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCd3aXRoUGVyZm9ybWFuY2VMb2dnaW5nJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBsb2cgc2xvdyBvcGVyYXRpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzbG93T3BlcmF0aW9uID0gdmkuZm4oYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAnY29tcGxldGVkJztcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB3cmFwcGVkT3BlcmF0aW9uID0gd2l0aFBlcmZvcm1hbmNlTG9nZ2luZygnU0xPV19PUEVSQVRJT04nLCBzbG93T3BlcmF0aW9uLCA1MDApO1xyXG5cclxuICAgICAgdmkuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKTsgLy8gRXhjZWVkIHRocmVzaG9sZFxyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd3JhcHBlZE9wZXJhdGlvbigpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnY29tcGxldGVkJyk7XHJcbiAgICAgIGV4cGVjdChzbG93T3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGxvZyBmYXN0IG9wZXJhdGlvbnMgd2l0aG91dCB3YXJuaW5ncycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgZmFzdE9wZXJhdGlvbiA9IHZpLmZuKGFzeW5jICgpID0+IHtcclxuICAgICAgICByZXR1cm4gJ2NvbXBsZXRlZCc7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3Qgd3JhcHBlZE9wZXJhdGlvbiA9IHdpdGhQZXJmb3JtYW5jZUxvZ2dpbmcoJ0ZBU1RfT1BFUkFUSU9OJywgZmFzdE9wZXJhdGlvbiwgMTAwMCk7XHJcblxyXG4gICAgICB2aS5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMCk7IC8vIFVuZGVyIHRocmVzaG9sZFxyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd3JhcHBlZE9wZXJhdGlvbigpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnY29tcGxldGVkJyk7XHJcbiAgICAgIGV4cGVjdChmYXN0T3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzeW5jaHJvbm91cyBmdW5jdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN5bmNPcGVyYXRpb24gPSB2aS5mbigoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICdzeW5jIHJlc3VsdCc7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3Qgd3JhcHBlZE9wZXJhdGlvbiA9IHdpdGhQZXJmb3JtYW5jZUxvZ2dpbmcoJ1NZTkNfT1BFUkFUSU9OJywgc3luY09wZXJhdGlvbik7XHJcblxyXG4gICAgICB2aS5hZHZhbmNlVGltZXJzQnlUaW1lKDUwKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdyYXBwZWRPcGVyYXRpb24oKTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3N5bmMgcmVzdWx0Jyk7XHJcbiAgICAgIGV4cGVjdChzeW5jT3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGxvZyBmYWlsZWQgb3BlcmF0aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgZmFpbGluZ09wZXJhdGlvbiA9IHZpLmZuKGFzeW5jICgpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wZXJhdGlvbiBmYWlsZWQnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB3cmFwcGVkT3BlcmF0aW9uID0gd2l0aFBlcmZvcm1hbmNlTG9nZ2luZygnRkFJTElOR19PUEVSQVRJT04nLCBmYWlsaW5nT3BlcmF0aW9uKTtcclxuXHJcbiAgICAgIHZpLmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwKTtcclxuXHJcbiAgICAgIGF3YWl0IGV4cGVjdCh3cmFwcGVkT3BlcmF0aW9uKCkpLnJlamVjdHMudG9UaHJvdygnT3BlcmF0aW9uIGZhaWxlZCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdIZWFkZXIgc2FuaXRpemF0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSBzZW5zaXRpdmUgaGVhZGVycyBpbiBsb2dzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrSGFuZGxlciA9IHZpLmZuKGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB3cmFwcGVkSGFuZGxlciA9IHdpdGhSZXF1ZXN0TG9nZ2luZyhtb2NrSGFuZGxlcik7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IE5leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3Rlc3QnLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiAnQmVhcmVyIHNlY3JldC10b2tlbicsXHJcbiAgICAgICAgICAnY29va2llJzogJ3Nlc3Npb249c2VjcmV0LXNlc3Npb24nLFxyXG4gICAgICAgICAgJ3gtYXBpLWtleSc6ICdzZWNyZXQtYXBpLWtleScsXHJcbiAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd3JhcHBlZEhhbmRsZXIocmVxdWVzdCk7XHJcblxyXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIGV4cGVjdChtb2NrSGFuZGxlcikudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICBcclxuICAgICAgLy8gVmVyaWZ5IHRoYXQgdGhlIHJlcXVlc3Qgd2FzIHByb2Nlc3NlZCB3aXRoIHNhbml0aXplZCBoZWFkZXJzXHJcbiAgICAgIGNvbnN0IHByb2Nlc3NlZFJlcXVlc3QgPSBtb2NrSGFuZGxlci5tb2NrLmNhbGxzWzBdWzBdO1xyXG4gICAgICBleHBlY3QocHJvY2Vzc2VkUmVxdWVzdC5oZWFkZXJzLmdldCgneC1yZXF1ZXN0LWlkJykpLnRvQmUoJ3Rlc3QtcmVxdWVzdC1pZC0xMjMnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnUmVzcG9uc2Ugc2l6ZSBjYWxjdWxhdGlvbicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlc3BvbnNlcyB3aXRoIGNvbnRlbnQtbGVuZ3RoIGhlYWRlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0hhbmRsZXIgPSB2aS5mbihhc3luYyAocmVxOiBOZXh0UmVxdWVzdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLmpzb24oeyBkYXRhOiAndGVzdCcgfSk7XHJcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ2NvbnRlbnQtbGVuZ3RoJywgJzEwMjQnKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3Qgd3JhcHBlZEhhbmRsZXIgPSB3aXRoUmVxdWVzdExvZ2dpbmcobW9ja0hhbmRsZXIpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBOZXh0UmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS90ZXN0Jyk7XHJcblxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdyYXBwZWRIYW5kbGVyKHJlcXVlc3QpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpLnRvQmUoJzEwMjQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlc3BvbnNlcyB3aXRob3V0IGNvbnRlbnQtbGVuZ3RoIGhlYWRlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0hhbmRsZXIgPSB2aS5mbihhc3luYyAocmVxOiBOZXh0UmVxdWVzdCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGRhdGE6ICd0ZXN0JyB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB3cmFwcGVkSGFuZGxlciA9IHdpdGhSZXF1ZXN0TG9nZ2luZyhtb2NrSGFuZGxlcik7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IE5leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3Rlc3QnKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd3JhcHBlZEhhbmRsZXIocmVxdWVzdCk7XHJcblxyXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9