{"file":"F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\integration\\services\\database.test.ts","mappings":"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","names":[],"sources":["F:\\Youcloud\\Documents\\Projets\\Logistix\\tests\\integration\\services\\database.test.ts"],"sourcesContent":["/**\r\n * Database Service Integration Tests\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\r\nimport { DatabaseServiceInstrumentation } from '@/lib/services/logging-instrumentation';\r\n\r\n// Mock the database\r\nvi.mock('@/lib/services/database/db', () => ({\r\n  db: {\r\n    prepare: vi.fn(() => ({\r\n      get: vi.fn(),\r\n      all: vi.fn(),\r\n      run: vi.fn()\r\n    })),\r\n    transaction: vi.fn(),\r\n    close: vi.fn()\r\n  },\r\n  getCurrentTimestamp: vi.fn(() => '2024-01-01T00:00:00Z')\r\n}));\r\n\r\n// Mock logging\r\nvi.mock('@/lib/utils/logging', () => ({\r\n  databaseLogger: {\r\n    info: vi.fn(),\r\n    error: vi.fn(),\r\n    debug: vi.fn(),\r\n    performance: vi.fn()\r\n  },\r\n  dbQueryLogger: {\r\n    logQuery: vi.fn(),\r\n    logTransaction: vi.fn(),\r\n    logConnection: vi.fn()\r\n  }\r\n}));\r\n\r\ndescribe('Database Service Integration Tests', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('Database Connection', () => {\r\n    it('should establish database connection', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      expect(db).toBeDefined();\r\n      expect(typeof db.prepare).toBe('function');\r\n    });\r\n\r\n    it('should handle connection errors gracefully', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      // Mock connection failure\r\n      (db.prepare as any).mockImplementation(() => {\r\n        throw new Error('Connection failed');\r\n      });\r\n\r\n      const mockQuery = async () => {\r\n        const stmt = db.prepare('SELECT 1');\r\n        return stmt.get();\r\n      };\r\n\r\n      await expect(mockQuery()).rejects.toThrow('Connection failed');\r\n    });\r\n\r\n    it('should log connection events', async () => {\r\n      const { dbQueryLogger } = await import('@/lib/utils/logging');\r\n      \r\n      // Simulate connection event\r\n      dbQueryLogger.logConnection('connect', { host: 'localhost' });\r\n      \r\n      expect(dbQueryLogger.logConnection).toHaveBeenCalledWith('connect', { host: 'localhost' });\r\n    });\r\n  });\r\n\r\n  describe('Query Execution', () => {\r\n    it('should execute SELECT queries successfully', async () => {\r\n      const mockResult = { id: 1, name: 'Test' };\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue(mockResult)\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('SELECT * FROM users WHERE id = ?');\r\n        return stmt.get(1);\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'GET_USER',\r\n        queryFn,\r\n        'SELECT * FROM users WHERE id = ?'\r\n      );\r\n\r\n      const result = await instrumentedQuery;\r\n      \r\n      expect(result).toEqual(mockResult);\r\n    });\r\n\r\n    it('should execute INSERT queries successfully', async () => {\r\n      const mockResult = { lastInsertRowid: 1, changes: 1 };\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue(mockResult)\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('INSERT INTO users (name, email) VALUES (?, ?)');\r\n        return stmt.run('John Doe', 'john@example.com');\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'CREATE_USER',\r\n        queryFn,\r\n        'INSERT INTO users (name, email) VALUES (?, ?)'\r\n      );\r\n\r\n      const result = await instrumentedQuery;\r\n      \r\n      expect(result).toEqual(mockResult);\r\n    });\r\n\r\n    it('should execute UPDATE queries successfully', async () => {\r\n      const mockResult = { changes: 1 };\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue(mockResult)\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('UPDATE users SET name = ? WHERE id = ?');\r\n        return stmt.run('Jane Doe', 1);\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'UPDATE_USER',\r\n        queryFn,\r\n        'UPDATE users SET name = ? WHERE id = ?'\r\n      );\r\n\r\n      const result = await instrumentedQuery;\r\n      \r\n      expect(result).toEqual(mockResult);\r\n    });\r\n\r\n    it('should execute DELETE queries successfully', async () => {\r\n      const mockResult = { changes: 1 };\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue(mockResult)\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('DELETE FROM users WHERE id = ?');\r\n        return stmt.run(1);\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'DELETE_USER',\r\n        queryFn,\r\n        'DELETE FROM users WHERE id = ?'\r\n      );\r\n\r\n      const result = await instrumentedQuery;\r\n      \r\n      expect(result).toEqual(mockResult);\r\n    });\r\n\r\n    it('should handle query errors and log them', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockImplementation(() => {\r\n          throw new Error('SQL syntax error');\r\n        })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('INVALID SQL');\r\n        return stmt.get();\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'INVALID_QUERY',\r\n        queryFn,\r\n        'INVALID SQL'\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('SQL syntax error');\r\n    });\r\n\r\n    it('should log query performance metrics', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      const { dbQueryLogger } = await import('@/lib/utils/logging');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockReturnValue({ id: 1 })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('SELECT * FROM users WHERE id = ?');\r\n        return stmt.get(1);\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'GET_USER',\r\n        queryFn,\r\n        'SELECT * FROM users WHERE id = ?'\r\n      );\r\n\r\n      await instrumentedQuery;\r\n      \r\n      expect(dbQueryLogger.logQuery).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Transaction Management', () => {\r\n    it('should execute transactions successfully', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      const mockTransaction = vi.fn().mockImplementation((fn) => fn());\r\n      (db.transaction as any).mockReturnValue(mockTransaction);\r\n\r\n      const transactionFn = async () => {\r\n        // Simulate transaction operations\r\n        return { success: true, affectedRows: 2 };\r\n      };\r\n\r\n      const instrumentedTransaction = DatabaseServiceInstrumentation.instrumentTransaction(\r\n        'USER_BATCH_UPDATE',\r\n        transactionFn\r\n      );\r\n\r\n      const result = await instrumentedTransaction;\r\n      \r\n      expect(result).toEqual({ success: true, affectedRows: 2 });\r\n    });\r\n\r\n    it('should handle transaction rollbacks', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      const mockTransaction = vi.fn().mockImplementation((fn) => {\r\n        try {\r\n          return fn();\r\n        } catch (error) {\r\n          // Simulate rollback\r\n          throw error;\r\n        }\r\n      });\r\n      (db.transaction as any).mockReturnValue(mockTransaction);\r\n\r\n      const transactionFn = async () => {\r\n        throw new Error('Transaction failed');\r\n      };\r\n\r\n      const instrumentedTransaction = DatabaseServiceInstrumentation.instrumentTransaction(\r\n        'FAILED_TRANSACTION',\r\n        transactionFn\r\n      );\r\n\r\n      await expect(instrumentedTransaction).rejects.toThrow('Transaction failed');\r\n    });\r\n\r\n    it('should log transaction performance', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      const { dbQueryLogger } = await import('@/lib/utils/logging');\r\n      \r\n      const mockTransaction = vi.fn().mockImplementation((fn) => fn());\r\n      (db.transaction as any).mockReturnValue(mockTransaction);\r\n\r\n      const transactionFn = async () => {\r\n        return { success: true };\r\n      };\r\n\r\n      const instrumentedTransaction = DatabaseServiceInstrumentation.instrumentTransaction(\r\n        'TEST_TRANSACTION',\r\n        transactionFn\r\n      );\r\n\r\n      await instrumentedTransaction;\r\n      \r\n      expect(dbQueryLogger.logTransaction).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Database Schema Operations', () => {\r\n    it('should handle schema migrations', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue({ changes: 0 })\r\n      });\r\n\r\n      const migrationFn = async () => {\r\n        const stmt = db.prepare(`\r\n          CREATE TABLE IF NOT EXISTS test_table (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            name TEXT NOT NULL,\r\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `);\r\n        return stmt.run();\r\n      };\r\n\r\n      const instrumentedMigration = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'CREATE_TABLE',\r\n        migrationFn,\r\n        'CREATE TABLE IF NOT EXISTS test_table...'\r\n      );\r\n\r\n      const result = await instrumentedMigration;\r\n      \r\n      expect(result).toEqual({ changes: 0 });\r\n    });\r\n\r\n    it('should handle index creation', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue({ changes: 0 })\r\n      });\r\n\r\n      const indexFn = async () => {\r\n        const stmt = db.prepare('CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)');\r\n        return stmt.run();\r\n      };\r\n\r\n      const instrumentedIndex = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'CREATE_INDEX',\r\n        indexFn,\r\n        'CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)'\r\n      );\r\n\r\n      const result = await instrumentedIndex;\r\n      \r\n      expect(result).toEqual({ changes: 0 });\r\n    });\r\n  });\r\n\r\n  describe('Connection Pool Management', () => {\r\n    it('should handle connection pool exhaustion', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      // Simulate connection pool exhaustion\r\n      (db.prepare as any).mockImplementation(() => {\r\n        throw new Error('Connection pool exhausted');\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('SELECT 1');\r\n        return stmt.get();\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'POOL_TEST',\r\n        queryFn\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('Connection pool exhausted');\r\n    });\r\n\r\n    it('should handle connection timeouts', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      // Simulate connection timeout\r\n      (db.prepare as any).mockImplementation(() => {\r\n        return new Promise((_, reject) => {\r\n          setTimeout(() => reject(new Error('Connection timeout')), 100);\r\n        });\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = await db.prepare('SELECT 1');\r\n        return stmt.get();\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'TIMEOUT_TEST',\r\n        queryFn\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('Connection timeout');\r\n    });\r\n  });\r\n\r\n  describe('Data Integrity', () => {\r\n    it('should handle foreign key constraints', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockImplementation(() => {\r\n          const error = new Error('FOREIGN KEY constraint failed');\r\n          (error as any).code = 'SQLITE_CONSTRAINT_FOREIGNKEY';\r\n          throw error;\r\n        })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('INSERT INTO products (name, parcelle_id) VALUES (?, ?)');\r\n        return stmt.run('Test Product', 'non-existent-parcelle');\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'INSERT_PRODUCT',\r\n        queryFn\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('FOREIGN KEY constraint failed');\r\n    });\r\n\r\n    it('should handle unique constraints', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockImplementation(() => {\r\n          const error = new Error('UNIQUE constraint failed');\r\n          (error as any).code = 'SQLITE_CONSTRAINT_UNIQUE';\r\n          throw error;\r\n        })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('INSERT INTO users (email) VALUES (?)');\r\n        return stmt.run('existing@example.com');\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'INSERT_USER',\r\n        queryFn\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('UNIQUE constraint failed');\r\n    });\r\n\r\n    it('should handle check constraints', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockImplementation(() => {\r\n          const error = new Error('CHECK constraint failed');\r\n          (error as any).code = 'SQLITE_CONSTRAINT_CHECK';\r\n          throw error;\r\n        })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('INSERT INTO products (name, price) VALUES (?, ?)');\r\n        return stmt.run('Test Product', -10); // Negative price violates check constraint\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'INSERT_PRODUCT_INVALID',\r\n        queryFn\r\n      );\r\n\r\n      await expect(instrumentedQuery).rejects.toThrow('CHECK constraint failed');\r\n    });\r\n  });\r\n\r\n  describe('Performance Monitoring', () => {\r\n    it('should monitor slow queries', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      const { databaseLogger } = await import('@/lib/utils/logging');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        get: vi.fn().mockImplementation(() => {\r\n          // Simulate slow query\r\n          return new Promise(resolve => {\r\n            setTimeout(() => resolve({ id: 1 }), 100);\r\n          });\r\n        })\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('SELECT * FROM large_table WHERE complex_condition = ?');\r\n        return stmt.get('value');\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'SLOW_QUERY',\r\n        queryFn,\r\n        'SELECT * FROM large_table WHERE complex_condition = ?'\r\n      );\r\n\r\n      await instrumentedQuery;\r\n      \r\n      // Should log performance metrics\r\n      expect(databaseLogger.info).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should track query execution statistics', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      const mockResults = [\r\n        { id: 1, name: 'Item 1' },\r\n        { id: 2, name: 'Item 2' },\r\n        { id: 3, name: 'Item 3' }\r\n      ];\r\n\r\n      (db.prepare as any).mockReturnValue({\r\n        all: vi.fn().mockReturnValue(mockResults)\r\n      });\r\n\r\n      const queryFn = async () => {\r\n        const stmt = db.prepare('SELECT * FROM items');\r\n        return stmt.all();\r\n      };\r\n\r\n      const instrumentedQuery = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'GET_ALL_ITEMS',\r\n        queryFn,\r\n        'SELECT * FROM items'\r\n      );\r\n\r\n      const result = await instrumentedQuery;\r\n      \r\n      expect(result).toHaveLength(3);\r\n      expect(Array.isArray(result)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Database Cleanup', () => {\r\n    it('should handle database cleanup operations', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue({ changes: 5 })\r\n      });\r\n\r\n      const cleanupFn = async () => {\r\n        const stmt = db.prepare('DELETE FROM logs WHERE created_at < datetime(\"now\", \"-30 days\")');\r\n        return stmt.run();\r\n      };\r\n\r\n      const instrumentedCleanup = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'CLEANUP_OLD_LOGS',\r\n        cleanupFn,\r\n        'DELETE FROM logs WHERE created_at < datetime(\"now\", \"-30 days\")'\r\n      );\r\n\r\n      const result = await instrumentedCleanup;\r\n      \r\n      expect(result.changes).toBe(5);\r\n    });\r\n\r\n    it('should handle vacuum operations', async () => {\r\n      const { db } = await import('@/lib/services/database/db');\r\n      \r\n      (db.prepare as any).mockReturnValue({\r\n        run: vi.fn().mockReturnValue({ changes: 0 })\r\n      });\r\n\r\n      const vacuumFn = async () => {\r\n        const stmt = db.prepare('VACUUM');\r\n        return stmt.run();\r\n      };\r\n\r\n      const instrumentedVacuum = DatabaseServiceInstrumentation.instrumentQuery(\r\n        'VACUUM_DATABASE',\r\n        vacuumFn,\r\n        'VACUUM'\r\n      );\r\n\r\n      const result = await instrumentedVacuum;\r\n      \r\n      expect(result).toEqual({ changes: 0 });\r\n    });\r\n  });\r\n});"],"version":3}