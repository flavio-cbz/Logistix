6aac5c68d3a8157ab7b2cf9658fe45c5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const validation_1 = require("../validation");
(0, vitest_1.describe)('Validation Schemas', () => {
    (0, vitest_1.describe)('SimilarSaleInputSchema', () => {
        const validSale = {
            id: 'item-1',
            price: { amount: 25.99, currency: 'EUR' },
            size_title: 'T-shirt Medium',
            status: 'sold',
            user: { login: 'seller1', feedback_reputation: 95 },
            photos: [{ url: 'https://example.com/photo1.jpg' }],
            created_at: '2023-01-01T10:00:00Z',
            sold_at: '2023-01-02T15:30:00Z'
        };
        (0, vitest_1.it)('should validate correct similar sale data', () => {
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(validSale)).not.toThrow();
        });
        (0, vitest_1.it)('should reject empty ID', () => {
            const invalidSale = { ...validSale, id: '' };
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(invalidSale)).toThrow();
        });
        (0, vitest_1.it)('should reject negative price amount', () => {
            const invalidSale = { ...validSale, price: { amount: -10, currency: 'EUR' } };
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(invalidSale)).toThrow();
        });
        (0, vitest_1.it)('should reject empty currency', () => {
            const invalidSale = { ...validSale, price: { amount: 25.99, currency: '' } };
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(invalidSale)).toThrow();
        });
        (0, vitest_1.it)('should reject invalid photo URL', () => {
            const invalidSale = { ...validSale, photos: [{ url: 'not-a-url' }] };
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(invalidSale)).toThrow();
        });
        (0, vitest_1.it)('should reject negative feedback reputation', () => {
            const invalidSale = { ...validSale, user: { login: 'seller1', feedback_reputation: -1 } };
            (0, vitest_1.expect)(() => validation_1.SimilarSaleInputSchema.parse(invalidSale)).toThrow();
        });
    });
    (0, vitest_1.describe)('validateCreateMarketAnalysis', () => {
        const validSales = [
            {
                id: 'item-1',
                price: { amount: 25.99, currency: 'EUR' },
                size_title: 'T-shirt Medium',
                status: 'sold',
                user: { login: 'seller1', feedback_reputation: 95 },
                photos: [{ url: 'https://example.com/photo1.jpg' }],
                created_at: '2023-01-01T10:00:00Z',
                sold_at: '2023-01-02T15:30:00Z'
            }
        ];
        (0, vitest_1.it)('should validate correct array of sales', () => {
            (0, vitest_1.expect)(() => (0, validation_1.validateCreateMarketAnalysis)(validSales)).not.toThrow();
        });
        (0, vitest_1.it)('should reject empty array', () => {
            (0, vitest_1.expect)(() => (0, validation_1.validateCreateMarketAnalysis)([])).toThrow();
        });
        (0, vitest_1.it)('should reject non-array input', () => {
            (0, vitest_1.expect)(() => (0, validation_1.validateCreateMarketAnalysis)('not an array')).toThrow();
        });
        (0, vitest_1.it)('should reject array with invalid sales', () => {
            const invalidSales = [{ ...validSales[0], id: '' }];
            (0, vitest_1.expect)(() => (0, validation_1.validateCreateMarketAnalysis)(invalidSales)).toThrow();
        });
    });
    (0, vitest_1.describe)('PaginationSchema', () => {
        (0, vitest_1.it)('should validate correct pagination parameters', () => {
            const result = validation_1.PaginationSchema.parse({ page: 2, limit: 5 });
            (0, vitest_1.expect)(result.page).toBe(2);
            (0, vitest_1.expect)(result.limit).toBe(5);
        });
        (0, vitest_1.it)('should use default values', () => {
            const result = validation_1.PaginationSchema.parse({});
            (0, vitest_1.expect)(result.page).toBe(1);
            (0, vitest_1.expect)(result.limit).toBe(10);
        });
        (0, vitest_1.it)('should reject page less than 1', () => {
            (0, vitest_1.expect)(() => validation_1.PaginationSchema.parse({ page: 0, limit: 10 })).toThrow();
        });
        (0, vitest_1.it)('should reject limit greater than 50', () => {
            (0, vitest_1.expect)(() => validation_1.PaginationSchema.parse({ page: 1, limit: 100 })).toThrow();
        });
        (0, vitest_1.it)('should reject negative limit', () => {
            (0, vitest_1.expect)(() => validation_1.PaginationSchema.parse({ page: 1, limit: -5 })).toThrow();
        });
    });
    (0, vitest_1.describe)('validatePagination', () => {
        (0, vitest_1.it)('should validate URLSearchParams correctly', () => {
            const searchParams = new URLSearchParams('page=2&limit=5');
            const result = (0, validation_1.validatePagination)(searchParams);
            (0, vitest_1.expect)(result.page).toBe(2);
            (0, vitest_1.expect)(result.limit).toBe(5);
        });
        (0, vitest_1.it)('should use defaults for missing parameters', () => {
            const searchParams = new URLSearchParams('');
            const result = (0, validation_1.validatePagination)(searchParams);
            (0, vitest_1.expect)(result.page).toBe(1);
            (0, vitest_1.expect)(result.limit).toBe(10);
        });
        (0, vitest_1.it)('should handle invalid string values', () => {
            const searchParams = new URLSearchParams('page=invalid&limit=abc');
            // Should use defaults when parsing fails
            const result = (0, validation_1.validatePagination)(searchParams);
            (0, vitest_1.expect)(result.page).toBe(1);
            (0, vitest_1.expect)(result.limit).toBe(10);
        });
    });
    (0, vitest_1.describe)('TaskIdSchema', () => {
        (0, vitest_1.it)('should validate correct UUID', () => {
            const validUuid = '550e8400-e29b-41d4-a716-446655440000';
            (0, vitest_1.expect)(() => validation_1.TaskIdSchema.parse({ id: validUuid })).not.toThrow();
        });
        (0, vitest_1.it)('should reject invalid UUID format', () => {
            (0, vitest_1.expect)(() => validation_1.TaskIdSchema.parse({ id: 'not-a-uuid' })).toThrow();
        });
        (0, vitest_1.it)('should reject empty string', () => {
            (0, vitest_1.expect)(() => validation_1.TaskIdSchema.parse({ id: '' })).toThrow();
        });
    });
    (0, vitest_1.describe)('validateTaskId', () => {
        (0, vitest_1.it)('should validate correct UUID string', () => {
            const validUuid = '550e8400-e29b-41d4-a716-446655440000';
            (0, vitest_1.expect)(() => (0, validation_1.validateTaskId)(validUuid)).not.toThrow();
        });
        (0, vitest_1.it)('should reject invalid UUID string', () => {
            (0, vitest_1.expect)(() => (0, validation_1.validateTaskId)('not-a-uuid')).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,