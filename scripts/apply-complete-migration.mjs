#!/usr/bin/env node

/**
 * Script pour appliquer la migration compl√®te du sch√©ma
 * Cr√©e toutes les tables n√©cessaires avec les colonnes legacy
 */

import Database from 'better-sqlite3';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const DB_PATH = join(__dirname, '../data/logistix.db');
const MIGRATION_FILE = join(__dirname, '../drizzle/migrations/0000_complete_schema.sql');

console.log('üöÄ Application de la migration compl√®te du sch√©ma...\n');

try {
  // Connexion √† la base de donn√©es
  const db = new Database(DB_PATH);
  console.log(`‚úÖ Connexion √† la base de donn√©es : ${DB_PATH}`);
  
  // Lecture du fichier de migration
  const migrationSQL = readFileSync(MIGRATION_FILE, 'utf-8');
  console.log(`‚úÖ Lecture du fichier de migration : ${MIGRATION_FILE}\n`);
  
  // Nettoyage des commentaires multi-lignes pour √©viter la corruption des statements
  const sanitizedSQL = migrationSQL.replace(/\/\*[\s\S]*?\*\//g, '');
  // S√©paration des commandes SQL (ignorer les commentaires et lignes vides)
  const sqlStatements = sanitizedSQL
    .split(';')
    .map(stmt => stmt.trim())
    .filter(stmt => {
      // Ignorer les commentaires et les lignes vides
      return stmt.length > 0 && !stmt.startsWith('--');
    });
  
  console.log(`üìã ${sqlStatements.length} commandes SQL √† ex√©cuter\n`);
  
  // Helper: v√©rifier existence d'une table
  function tableExists(tableName) {
    try {
      const row = db.prepare(
        "SELECT name FROM sqlite_master WHERE type='table' AND name = ?"
      ).get(tableName);
      return !!row;
    } catch {
      return false;
    }
  }

  // Ex√©cution dans une transaction
  const transaction = db.transaction(() => {
    let successCount = 0;
    let skipCount = 0;
    
    for (const raw of sqlStatements) {
      const statement = raw; // d√©j√† trim
      
      try {
        const lower = statement.toLowerCase();

        // Gardes pour CREATE INDEX: s'assurer que la table cible existe, sinon ignorer (idempotence)
        if (lower.startsWith('create index') || lower.startsWith('create unique index')) {
          const m = /on\s+([`"]?)([a-z0-9_]+)\1\s*\(/i.exec(statement);
          const targetTable = m?.[2];
          if (!targetTable) {
            console.warn(`  ‚ö†Ô∏è Index sans table d√©tect√©, skip: ${statement.substring(0, 80)}...`);
            skipCount++;
            continue;
          }
          if (!tableExists(targetTable)) {
            console.log(`  ‚è≠Ô∏è Table absente (${targetTable}), index ignor√©: ${statement.substring(0, 80)}...`);
            skipCount++;
            continue;
          }
        }

        // Ex√©cuter le statement
        db.exec(statement);
        successCount++;
        
        // Afficher des messages pour les CREATE TABLE
        if (lower.startsWith('create table')) {
          const match = statement.match(/create table (?:if not exists )?([`"]?)([a-z0-9_]+)\1/i);
          if (match) {
            console.log(`  ‚úì Table cr√©√©e/v√©rifi√©e : ${match[2]}`);
          }
        }
      } catch (error) {
        // Ignorer les erreurs "table already exists" ou "duplicate column name"
        const errorMsg = String(error?.message || '').toLowerCase();
        if (
          errorMsg.includes('already exists') ||
          errorMsg.includes('duplicate column')
        ) {
          skipCount++;
        } else {
          console.error(`\n‚ùå Erreur lors de l'ex√©cution de la commande :`);
          console.error(`   ${statement.substring(0, 100)}...`);
          throw error;
        }
      }
    }
    
    return { successCount, skipCount };
  });
  
  const result = transaction();
  
  console.log(`\n‚úÖ Migration compl√©t√©e avec succ√®s !`);
  console.log(`   - Commandes ex√©cut√©es : ${result.successCount}`);
  console.log(`   - Commandes ignor√©es (d√©j√† existantes) : ${result.skipCount}`);
  
  // V√©rification des tables cr√©√©es
  const tables = db.prepare(`
    SELECT name FROM sqlite_master 
    WHERE type='table' 
    AND name NOT LIKE 'sqlite_%'
    ORDER BY name
  `).all();
  
  console.log(`\nüìä Tables pr√©sentes dans la base de donn√©es (${tables.length}) :`);
  tables.forEach(table => {
    console.log(`   - ${table.name}`);
  });
  
  // Fermeture de la connexion
  db.close();
  console.log(`\n‚úÖ Connexion ferm√©e. Migration termin√©e !`);
  
} catch (error) {
  console.error('\n‚ùå Erreur lors de la migration :', error.message);
  process.exit(1);
}
