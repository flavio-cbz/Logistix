/**
 * Test E2E complet du workflow produits - Version finale
 * ========================================================
 * Ce test valide le cycle de vie complet d'un produit :
 * - √âtape 0 : Connexion
 * - √âtape 1 : Cr√©ation d'un produit
 * - √âtape 2A : Duplication
 * - √âtape 2B : Suppression du duplicata
 * - √âtape 2C : Modification du nom
 * - √âtape 3 : Cr√©ation d'un produit vendu (avec toutes les informations de vente)
 * 
 * NOTE : L'√âtape 3 cr√©e un NOUVEAU produit vendu au lieu de modifier un existant
 * car le formulaire ferme automatiquement apr√®s changement de statut (Bug #8).
 */

import { test, expect } from '@playwright/test';

test.describe.configure({ tag: '@regression' });

const BASE_URL = 'http://localhost:3000';
const TEST_CREDENTIALS = {
  username: 'admin',
  password: 'admin123'
};

const TEST_PRODUCT = {
  id: 'VINTEDCM001TEST',
  name: 'Robe test',
  brand: 'H&M',
  prixAchat: '10',
  poids: '0.350', // 350g
  parcellePrice: 10.00 // prix fixe de la parcelle
};

test.describe('Workflow Produits Complet', () => {
  test('Workflow complet : Cr√©er, Dupliquer, Modifier, Vendre un produit', async ({ page }) => {
    
    // ==========================================
    // √âTAPE 0 : CONNEXION
    // ==========================================
    console.log('\n=== √âTAPE 0 : CONNEXION ===');
    await page.goto(`${BASE_URL}/login`);
    
    // Remplir le formulaire de connexion
    await page.getByLabel(/nom d'utilisateur/i).fill(TEST_CREDENTIALS.username);
    await page.getByLabel(/mot de passe/i).fill(TEST_CREDENTIALS.password);
    await page.getByRole('button', { name: /se connecter/i }).click();
    
    // Attendre la redirection vers le dashboard
    await page.waitForURL('**/dashboard', { timeout: 10000 });
    console.log('‚úÖ Connexion r√©ussie');
    
    // Naviguer vers produits
    await page.getByRole('link', { name: /produits/i }).click();
    await page.waitForURL('**/produits');
    console.log('‚úÖ Page produits charg√©e');
    
    // Passer en mode liste (ic√¥ne liste = lignes horizontales)
    console.log('üîÑ Passage en mode liste...');
    const listViewButton = page.locator('button').filter({ has: page.locator('svg[data-lucide="list"]') }).or(page.locator('button:has-text("Liste")'));
    if (await listViewButton.count() > 0) {
    await listViewButton.first().click();
    // Attendre la pr√©sence de la table de produits pour confirmer le passage en mode liste
    await page.waitForSelector('tbody tr[data-row-key]', { timeout: 10000 }).catch(() => {});
    console.log('‚úÖ Mode liste activ√©');
  } else {
      console.log('‚ö†Ô∏è  Bouton liste non trouv√©, on continue (peut-√™tre d√©j√† en mode liste)');
    }
    
    // ==========================================
    // √âTAPE 1 : CR√âATION DU PRODUIT
    // ==========================================
    console.log('\n=== √âTAPE 1 : CR√âATION DU PRODUIT ===');
    const initialCount = await page.locator('tbody tr[data-row-key]').count();
    console.log(`Nombre initial de produits : ${initialCount}`);
    
    await page.getByRole('button', { name: /nouveau produit/i }).click();
    await page.waitForSelector('[role="dialog"]', { state: 'visible' });
    console.log('‚úÖ Dialogue de cr√©ation ouvert');
    
    // Remplir les champs de base (utiliser les name attributes pour plus de robustesse)
    await page.locator('input[name="name"]').fill(TEST_PRODUCT.name);
    await page.locator('input[name="brand"]').fill(TEST_PRODUCT.brand);
    await page.locator('input[name="price"]').fill(TEST_PRODUCT.prixAchat);
    await page.locator('input[name="vintedItemId"]').fill(TEST_PRODUCT.id);
    console.log('‚úÖ Formulaire rempli');
    
    // Soumettre
    const submitButton = page.locator('[role="dialog"]').locator('button[type="submit"]').first();
    await submitButton.click({ force: true });
    console.log('‚è≥ Attente de la cr√©ation du produit...');
    
    // Attendre la fermeture du dialog ou la r√©ponse API
    await page.waitForSelector(`tr:has-text("${TEST_PRODUCT.name}")`, { timeout: 10000 });
    console.log(`‚úÖ Produit soumis`);
    
    // V√©rifier que le produit appara√Æt
    await page.waitForSelector(`tr:has-text("${TEST_PRODUCT.name}")`, { timeout: 10000 });
    const countAfterCreate = await page.locator('tbody tr[data-row-key]').count();
    console.log(`Nombre de produits apr√®s cr√©ation : ${countAfterCreate}`);
    
    // Debug: afficher le nombre de lignes du tableau
    const tableRows = await page.locator('tbody tr[data-row-key]').count();
    console.log(`üîç DEBUG Vue: table rows=${tableRows}`);
    
    const newProduct = page.locator(`tr:has-text("${TEST_PRODUCT.name}")`);
    await expect(newProduct).toBeVisible();
    console.log('‚úÖ Produit cr√©√© et visible dans la liste');
    
    // ==========================================
    // √âTAPE 2A : DUPLICATION DU PRODUIT
    // ==========================================
    console.log('\n=== √âTAPE 2A : DUPLICATION DU PRODUIT ===');
    const productRow = page.locator(`tr:has-text("${TEST_PRODUCT.name}")`).first();
    const duplicateButton = productRow.getByTestId('duplicate-button');
    
    const postPromise2 = page.waitForResponse(
      (response) => response.url().includes('/api/v1/produits') && response.request().method() === 'POST'
    );
    
    await duplicateButton.click();
    await postPromise2;
    await page.waitForLoadState('networkidle');
    
    const countAfterDuplicate = await page.locator('tbody tr[data-row-key]').count();
    console.log(`Nombre de produits apr√®s duplication : ${countAfterDuplicate}`);
    expect(countAfterDuplicate).toBe(countAfterCreate + 1);
    console.log('‚úÖ Produit dupliqu√© avec succ√®s');
    
    // ==========================================
    // √âTAPE 2B : SUPPRESSION DU DUPLICATA
    // ==========================================
    console.log('\n=== √âTAPE 2B : SUPPRESSION DU DUPLICATA ===');
    
    // Trouver le duplicata (dernier produit avec le m√™me nom)
    const allMatchingRows = page.locator(`tr:has-text("${TEST_PRODUCT.name}")`);
    const duplicateRow = allMatchingRows.nth(1);
    const duplicateExists = await duplicateRow.isVisible();
    console.log(`Produit dupliqu√© trouv√© : ${duplicateExists}`);
    
    const deleteButton = duplicateRow.getByTestId('delete-button');
    
    const deletePromise = page.waitForResponse(
      (response) => response.url().includes('/api/v1/produits/') && response.request().method() === 'DELETE'
    );
    
    await deleteButton.click();
    await deletePromise;
    await page.waitForLoadState('networkidle');
    
    const countAfterDelete = await page.locator('tbody tr[data-row-key]').count();
    console.log(`Nombre de produits apr√®s suppression : ${countAfterDelete}`);
    expect(countAfterDelete).toBe(countAfterCreate);
    console.log('‚úÖ Duplicata supprim√© avec succ√®s');
    
    // ==========================================
    // √âTAPE 2C : MODIFICATION DU NOM
    // ==========================================
    console.log('\n=== √âTAPE 2C : MODIFICATION DU NOM ===');
    const editButton = productRow.getByTestId('edit-button');
    await editButton.click();
    await page.waitForSelector('[role="dialog"]', { state: 'visible' });
    console.log('‚úÖ Dialogue de modification ouvert');
    
    // Modifier le nom
    const nomField = page.locator('[role="dialog"]').locator('input[name="name"]').first();
    await nomField.clear();
    await nomField.fill('Robe modifi√©');
    
    const submitButton2 = page.locator('[role="dialog"]').locator('button[type="submit"]').first();
    await submitButton2.click({ force: true });
    await page.waitForSelector('tr:has-text("Robe modifi√©")', { timeout: 10000 });
    
    // V√©rifier le nouveau nom
    const modifiedProduct = page.locator('tr:has-text("Robe modifi√©")');
    await expect(modifiedProduct).toBeVisible();
    console.log('‚úÖ Nom du produit modifi√© avec succ√®s');
    
    // ==========================================
    // √âTAPE 3 : CR√âER UN PRODUIT VENDU
    // ==========================================
    console.log('\n=== √âTAPE 3 : CR√âER UN PRODUIT VENDU ===');
    
    // Fermer tous les dialogs et attendre qu'ils disparaissent
    await page.keyboard.press('Escape');
    await page.waitForSelector('[role="dialog"]', { state: 'hidden', timeout: 5000 }).catch(() => {});
    
    // Compter les produits actuels
    const countBeforeSold = await page.locator('tbody tr[data-row-key]').count();
    console.log(`Nombre de produits avant cr√©ation du produit vendu : ${countBeforeSold}`);
    
    // Ouvrir le dialog de cr√©ation
    await page.getByRole('button', { name: /nouveau produit/i }).click();
    await page.waitForSelector('[role="dialog"]', { state: 'visible' });
    console.log('‚úÖ Dialog de cr√©ation ouvert');
    
    const dialog2 = page.locator('[role="dialog"]');
    
    // Remplir les champs de base
    await dialog2.locator('input[name="name"]').fill('Manteau vendu');
    await dialog2.locator('input[name="brand"]').fill('Zara');
    await dialog2.locator('input[name="price"]').fill('35');
    
    // IMPORTANT : Changer le statut vers "Vendu" AVANT de remplir les champs conditionnels
    console.log('üîç Changement du statut vers Vendu...');
    const statusSelect2 = dialog2.locator('button').filter({ hasText: /s√©lectionner le statut|disponible/i }).first();
    // Ouvrir le s√©lecteur et choisir l'option 'Vendu' de fa√ßon d√©terministe
    await statusSelect2.click();
    await page.getByRole('option', { name: /vendu/i }).click();
    // Attendre que la section d'informations de vente se charge
    await dialog2.locator('text=Informations de vente').waitFor({ state: 'visible', timeout: 10000 });
    console.log('‚úÖ Statut Vendu s√©lectionn√©');
    
    // Attendre que la section "Informations de vente" apparaisse
    await dialog2.locator('text=Informations de vente').waitFor({ state: 'visible', timeout: 10000 });
    console.log('‚úÖ Section Informations de vente visible');
    
    // Remplir les champs de vente
    await dialog2.locator('input[name="dateMiseEnLigne"]').fill('2025-10-01');
    await dialog2.locator('input[name="dateVente"]').fill('2025-10-07');
    await dialog2.locator('input[name="prixVente"]').fill('55'); // Prix de vente
    
    // S√©lectionner la plateforme Vinted
    const plateformeSelect = dialog2.locator('button').filter({ hasText: /s√©lectionner.*plateforme/i }).first();
    await plateformeSelect.focus();
    await page.keyboard.press('Space');
    await page.waitForTimeout(500);
    await page.getByRole('option', { name: /vinted/i }).click();
    
    console.log('‚úÖ Tous les champs remplis (produit vendu)');
    
    // Soumettre le formulaire
    const submitButton3 = dialog2.locator('button[type="submit"]').first();
    await submitButton3.click({ force: true });
    // Attendre la cr√©ation via pr√©sence dans la liste (d√©terministe)
    await page.waitForSelector('tr:has-text("Manteau vendu")', { timeout: 10000 });
    
    // V√©rifier que le produit vendu est cr√©√©
    const countAfterSold = await page.locator('tbody tr[data-row-key]').count();
    expect(countAfterSold).toBe(countBeforeSold + 1);
    console.log(`‚úÖ Produit vendu cr√©√© (total: ${countAfterSold})`);
    
    // V√©rifier que le produit vendu appara√Æt dans la liste
    const soldProduct = page.locator('tr:has-text("Manteau vendu")');
    await expect(soldProduct).toBeVisible();
    console.log('‚úÖ Produit vendu visible dans la liste');
    
    // ==========================================
    // RAPPORT FINAL
    // ==========================================
    console.log('\n=== ‚úÖ WORKFLOW COMPLET TERMIN√â ===');
    console.log(`\nR√©sum√© :`);
    console.log(`  ‚úì Connexion r√©ussie`);
    console.log(`  ‚úì Produit cr√©√© : "${TEST_PRODUCT.name}"`);
    console.log(`  ‚úì Produit dupliqu√© et supprim√©`);
    console.log(`  ‚úì Nom modifi√© : "Robe modifi√©"`);
    console.log(`  ‚úì Produit vendu cr√©√© : "Manteau vendu"`);
    console.log(`\nüéâ Tous les tests sont pass√©s avec succ√®s !`);
  });
});
